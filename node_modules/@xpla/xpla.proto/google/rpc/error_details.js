"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizedMessage = exports.Help_Link = exports.Help = exports.ResourceInfo = exports.RequestInfo = exports.BadRequest_FieldViolation = exports.BadRequest = exports.PreconditionFailure_Violation = exports.PreconditionFailure = exports.ErrorInfo_MetadataEntry = exports.ErrorInfo = exports.QuotaFailure_Violation = exports.QuotaFailure = exports.DebugInfo = exports.RetryInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../protobuf/duration");
exports.protobufPackage = "google.rpc";
function createBaseRetryInfo() {
    return { retryDelay: undefined };
}
exports.RetryInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.retryDelay !== undefined) {
            duration_1.Duration.encode(message.retryDelay, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRetryInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.retryDelay = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { retryDelay: isSet(object.retryDelay) ? duration_1.Duration.fromJSON(object.retryDelay) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.retryDelay !== undefined) {
            obj.retryDelay = duration_1.Duration.toJSON(message.retryDelay);
        }
        return obj;
    },
    create(base) {
        return exports.RetryInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRetryInfo();
        message.retryDelay = (object.retryDelay !== undefined && object.retryDelay !== null)
            ? duration_1.Duration.fromPartial(object.retryDelay)
            : undefined;
        return message;
    },
};
function createBaseDebugInfo() {
    return { stackEntries: [], detail: "" };
}
exports.DebugInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.stackEntries) {
            writer.uint32(10).string(v);
        }
        if (message.detail !== "") {
            writer.uint32(18).string(message.detail);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stackEntries.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.detail = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stackEntries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stackEntries)
                ? object.stackEntries.map((e) => globalThis.String(e))
                : [],
            detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.stackEntries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stackEntries = message.stackEntries;
        }
        if (message.detail !== "") {
            obj.detail = message.detail;
        }
        return obj;
    },
    create(base) {
        return exports.DebugInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDebugInfo();
        message.stackEntries = ((_a = object.stackEntries) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.detail = (_b = object.detail) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQuotaFailure() {
    return { violations: [] };
}
exports.QuotaFailure = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.violations) {
            exports.QuotaFailure_Violation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuotaFailure();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.violations.push(exports.QuotaFailure_Violation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            violations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.violations)
                ? object.violations.map((e) => exports.QuotaFailure_Violation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.violations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.violations = message.violations.map((e) => exports.QuotaFailure_Violation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QuotaFailure.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQuotaFailure();
        message.violations = ((_a = object.violations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QuotaFailure_Violation.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQuotaFailure_Violation() {
    return { subject: "", description: "" };
}
exports.QuotaFailure_Violation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.subject !== "") {
            writer.uint32(10).string(message.subject);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuotaFailure_Violation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.QuotaFailure_Violation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQuotaFailure_Violation();
        message.subject = (_a = object.subject) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseErrorInfo() {
    return { reason: "", domain: "", metadata: {} };
}
exports.ErrorInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.ErrorInfo_MetadataEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.ErrorInfo_MetadataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.metadata[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.ErrorInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseErrorInfo();
        message.reason = (_a = object.reason) !== null && _a !== void 0 ? _a : "";
        message.domain = (_b = object.domain) !== null && _b !== void 0 ? _b : "";
        message.metadata = Object.entries((_c = object.metadata) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseErrorInfo_MetadataEntry() {
    return { key: "", value: "" };
}
exports.ErrorInfo_MetadataEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorInfo_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ErrorInfo_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseErrorInfo_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBasePreconditionFailure() {
    return { violations: [] };
}
exports.PreconditionFailure = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.violations) {
            exports.PreconditionFailure_Violation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreconditionFailure();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.violations.push(exports.PreconditionFailure_Violation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            violations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.violations)
                ? object.violations.map((e) => exports.PreconditionFailure_Violation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.violations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.violations = message.violations.map((e) => exports.PreconditionFailure_Violation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PreconditionFailure.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePreconditionFailure();
        message.violations = ((_a = object.violations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.PreconditionFailure_Violation.fromPartial(e))) || [];
        return message;
    },
};
function createBasePreconditionFailure_Violation() {
    return { type: "", subject: "", description: "" };
}
exports.PreconditionFailure_Violation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.subject !== "") {
            writer.uint32(18).string(message.subject);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreconditionFailure_Violation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.PreconditionFailure_Violation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePreconditionFailure_Violation();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.subject = (_b = object.subject) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseBadRequest() {
    return { fieldViolations: [] };
}
exports.BadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.fieldViolations) {
            exports.BadRequest_FieldViolation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fieldViolations.push(exports.BadRequest_FieldViolation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fieldViolations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.fieldViolations)
                ? object.fieldViolations.map((e) => exports.BadRequest_FieldViolation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.fieldViolations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.fieldViolations = message.fieldViolations.map((e) => exports.BadRequest_FieldViolation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.BadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBadRequest();
        message.fieldViolations = ((_a = object.fieldViolations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.BadRequest_FieldViolation.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBadRequest_FieldViolation() {
    return { field: "", description: "" };
}
exports.BadRequest_FieldViolation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.field !== "") {
            writer.uint32(10).string(message.field);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadRequest_FieldViolation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.field = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            field: isSet(object.field) ? globalThis.String(object.field) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.field !== "") {
            obj.field = message.field;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.BadRequest_FieldViolation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBadRequest_FieldViolation();
        message.field = (_a = object.field) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRequestInfo() {
    return { requestId: "", servingData: "" };
}
exports.RequestInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.servingData !== "") {
            writer.uint32(18).string(message.servingData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.servingData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            servingData: isSet(object.servingData) ? globalThis.String(object.servingData) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.servingData !== "") {
            obj.servingData = message.servingData;
        }
        return obj;
    },
    create(base) {
        return exports.RequestInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRequestInfo();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.servingData = (_b = object.servingData) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseResourceInfo() {
    return { resourceType: "", resourceName: "", owner: "", description: "" };
}
exports.ResourceInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.resourceType !== "") {
            writer.uint32(10).string(message.resourceType);
        }
        if (message.resourceName !== "") {
            writer.uint32(18).string(message.resourceName);
        }
        if (message.owner !== "") {
            writer.uint32(26).string(message.owner);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResourceInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resourceType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.resourceName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
            resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.resourceType !== "") {
            obj.resourceType = message.resourceType;
        }
        if (message.resourceName !== "") {
            obj.resourceName = message.resourceName;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.ResourceInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseResourceInfo();
        message.resourceType = (_a = object.resourceType) !== null && _a !== void 0 ? _a : "";
        message.resourceName = (_b = object.resourceName) !== null && _b !== void 0 ? _b : "";
        message.owner = (_c = object.owner) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseHelp() {
    return { links: [] };
}
exports.Help = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.links) {
            exports.Help_Link.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHelp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.links.push(exports.Help_Link.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            links: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.links) ? object.links.map((e) => exports.Help_Link.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.links) === null || _a === void 0 ? void 0 : _a.length) {
            obj.links = message.links.map((e) => exports.Help_Link.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Help.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHelp();
        message.links = ((_a = object.links) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Help_Link.fromPartial(e))) || [];
        return message;
    },
};
function createBaseHelp_Link() {
    return { description: "", url: "" };
}
exports.Help_Link = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.description !== "") {
            writer.uint32(10).string(message.description);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHelp_Link();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.Help_Link.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHelp_Link();
        message.description = (_a = object.description) !== null && _a !== void 0 ? _a : "";
        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLocalizedMessage() {
    return { locale: "", message: "" };
}
exports.LocalizedMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.locale !== "") {
            writer.uint32(10).string(message.locale);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLocalizedMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.locale !== "") {
            obj.locale = message.locale;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.LocalizedMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLocalizedMessage();
        message.locale = (_a = object.locale) !== null && _a !== void 0 ? _a : "";
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=error_details.js.map