"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourcePosition = exports.SourceInfo_MacroCallsEntry = exports.SourceInfo_PositionsEntry = exports.SourceInfo = exports.Constant = exports.Expr_Comprehension = exports.Expr_CreateStruct_Entry = exports.Expr_CreateStruct = exports.Expr_CreateList = exports.Expr_Call = exports.Expr_Select = exports.Expr_Ident = exports.Expr = exports.ParsedExpr = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../../../protobuf/duration");
const struct_1 = require("../../../protobuf/struct");
const timestamp_1 = require("../../../protobuf/timestamp");
exports.protobufPackage = "google.api.expr.v1alpha1";
function createBaseParsedExpr() {
    return { expr: undefined, sourceInfo: undefined };
}
exports.ParsedExpr = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.expr !== undefined) {
            exports.Expr.encode(message.expr, writer.uint32(18).fork()).ldelim();
        }
        if (message.sourceInfo !== undefined) {
            exports.SourceInfo.encode(message.sourceInfo, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParsedExpr();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.expr = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sourceInfo = exports.SourceInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            expr: isSet(object.expr) ? exports.Expr.fromJSON(object.expr) : undefined,
            sourceInfo: isSet(object.sourceInfo) ? exports.SourceInfo.fromJSON(object.sourceInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.expr !== undefined) {
            obj.expr = exports.Expr.toJSON(message.expr);
        }
        if (message.sourceInfo !== undefined) {
            obj.sourceInfo = exports.SourceInfo.toJSON(message.sourceInfo);
        }
        return obj;
    },
    create(base) {
        return exports.ParsedExpr.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParsedExpr();
        message.expr = (object.expr !== undefined && object.expr !== null) ? exports.Expr.fromPartial(object.expr) : undefined;
        message.sourceInfo = (object.sourceInfo !== undefined && object.sourceInfo !== null)
            ? exports.SourceInfo.fromPartial(object.sourceInfo)
            : undefined;
        return message;
    },
};
function createBaseExpr() {
    return {
        id: long_1.default.ZERO,
        constExpr: undefined,
        identExpr: undefined,
        selectExpr: undefined,
        callExpr: undefined,
        listExpr: undefined,
        structExpr: undefined,
        comprehensionExpr: undefined,
    };
}
exports.Expr = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(16).int64(message.id);
        }
        if (message.constExpr !== undefined) {
            exports.Constant.encode(message.constExpr, writer.uint32(26).fork()).ldelim();
        }
        if (message.identExpr !== undefined) {
            exports.Expr_Ident.encode(message.identExpr, writer.uint32(34).fork()).ldelim();
        }
        if (message.selectExpr !== undefined) {
            exports.Expr_Select.encode(message.selectExpr, writer.uint32(42).fork()).ldelim();
        }
        if (message.callExpr !== undefined) {
            exports.Expr_Call.encode(message.callExpr, writer.uint32(50).fork()).ldelim();
        }
        if (message.listExpr !== undefined) {
            exports.Expr_CreateList.encode(message.listExpr, writer.uint32(58).fork()).ldelim();
        }
        if (message.structExpr !== undefined) {
            exports.Expr_CreateStruct.encode(message.structExpr, writer.uint32(66).fork()).ldelim();
        }
        if (message.comprehensionExpr !== undefined) {
            exports.Expr_Comprehension.encode(message.comprehensionExpr, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.int64();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.constExpr = exports.Constant.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.identExpr = exports.Expr_Ident.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.selectExpr = exports.Expr_Select.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.callExpr = exports.Expr_Call.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.listExpr = exports.Expr_CreateList.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.structExpr = exports.Expr_CreateStruct.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.comprehensionExpr = exports.Expr_Comprehension.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.ZERO,
            constExpr: isSet(object.constExpr) ? exports.Constant.fromJSON(object.constExpr) : undefined,
            identExpr: isSet(object.identExpr) ? exports.Expr_Ident.fromJSON(object.identExpr) : undefined,
            selectExpr: isSet(object.selectExpr) ? exports.Expr_Select.fromJSON(object.selectExpr) : undefined,
            callExpr: isSet(object.callExpr) ? exports.Expr_Call.fromJSON(object.callExpr) : undefined,
            listExpr: isSet(object.listExpr) ? exports.Expr_CreateList.fromJSON(object.listExpr) : undefined,
            structExpr: isSet(object.structExpr) ? exports.Expr_CreateStruct.fromJSON(object.structExpr) : undefined,
            comprehensionExpr: isSet(object.comprehensionExpr)
                ? exports.Expr_Comprehension.fromJSON(object.comprehensionExpr)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.id.isZero()) {
            obj.id = (message.id || long_1.default.ZERO).toString();
        }
        if (message.constExpr !== undefined) {
            obj.constExpr = exports.Constant.toJSON(message.constExpr);
        }
        if (message.identExpr !== undefined) {
            obj.identExpr = exports.Expr_Ident.toJSON(message.identExpr);
        }
        if (message.selectExpr !== undefined) {
            obj.selectExpr = exports.Expr_Select.toJSON(message.selectExpr);
        }
        if (message.callExpr !== undefined) {
            obj.callExpr = exports.Expr_Call.toJSON(message.callExpr);
        }
        if (message.listExpr !== undefined) {
            obj.listExpr = exports.Expr_CreateList.toJSON(message.listExpr);
        }
        if (message.structExpr !== undefined) {
            obj.structExpr = exports.Expr_CreateStruct.toJSON(message.structExpr);
        }
        if (message.comprehensionExpr !== undefined) {
            obj.comprehensionExpr = exports.Expr_Comprehension.toJSON(message.comprehensionExpr);
        }
        return obj;
    },
    create(base) {
        return exports.Expr.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseExpr();
        message.id = (object.id !== undefined && object.id !== null) ? long_1.default.fromValue(object.id) : long_1.default.ZERO;
        message.constExpr = (object.constExpr !== undefined && object.constExpr !== null)
            ? exports.Constant.fromPartial(object.constExpr)
            : undefined;
        message.identExpr = (object.identExpr !== undefined && object.identExpr !== null)
            ? exports.Expr_Ident.fromPartial(object.identExpr)
            : undefined;
        message.selectExpr = (object.selectExpr !== undefined && object.selectExpr !== null)
            ? exports.Expr_Select.fromPartial(object.selectExpr)
            : undefined;
        message.callExpr = (object.callExpr !== undefined && object.callExpr !== null)
            ? exports.Expr_Call.fromPartial(object.callExpr)
            : undefined;
        message.listExpr = (object.listExpr !== undefined && object.listExpr !== null)
            ? exports.Expr_CreateList.fromPartial(object.listExpr)
            : undefined;
        message.structExpr = (object.structExpr !== undefined && object.structExpr !== null)
            ? exports.Expr_CreateStruct.fromPartial(object.structExpr)
            : undefined;
        message.comprehensionExpr = (object.comprehensionExpr !== undefined && object.comprehensionExpr !== null)
            ? exports.Expr_Comprehension.fromPartial(object.comprehensionExpr)
            : undefined;
        return message;
    },
};
function createBaseExpr_Ident() {
    return { name: "" };
}
exports.Expr_Ident = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_Ident();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.Expr_Ident.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExpr_Ident();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseExpr_Select() {
    return { operand: undefined, field: "", testOnly: false };
}
exports.Expr_Select = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.operand !== undefined) {
            exports.Expr.encode(message.operand, writer.uint32(10).fork()).ldelim();
        }
        if (message.field !== "") {
            writer.uint32(18).string(message.field);
        }
        if (message.testOnly === true) {
            writer.uint32(24).bool(message.testOnly);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_Select();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.operand = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.field = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.testOnly = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operand: isSet(object.operand) ? exports.Expr.fromJSON(object.operand) : undefined,
            field: isSet(object.field) ? globalThis.String(object.field) : "",
            testOnly: isSet(object.testOnly) ? globalThis.Boolean(object.testOnly) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.operand !== undefined) {
            obj.operand = exports.Expr.toJSON(message.operand);
        }
        if (message.field !== "") {
            obj.field = message.field;
        }
        if (message.testOnly === true) {
            obj.testOnly = message.testOnly;
        }
        return obj;
    },
    create(base) {
        return exports.Expr_Select.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExpr_Select();
        message.operand = (object.operand !== undefined && object.operand !== null)
            ? exports.Expr.fromPartial(object.operand)
            : undefined;
        message.field = (_a = object.field) !== null && _a !== void 0 ? _a : "";
        message.testOnly = (_b = object.testOnly) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseExpr_Call() {
    return { target: undefined, function: "", args: [] };
}
exports.Expr_Call = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.target !== undefined) {
            exports.Expr.encode(message.target, writer.uint32(10).fork()).ldelim();
        }
        if (message.function !== "") {
            writer.uint32(18).string(message.function);
        }
        for (const v of message.args) {
            exports.Expr.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_Call();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.target = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.function = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.args.push(exports.Expr.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            target: isSet(object.target) ? exports.Expr.fromJSON(object.target) : undefined,
            function: isSet(object.function) ? globalThis.String(object.function) : "",
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => exports.Expr.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.target !== undefined) {
            obj.target = exports.Expr.toJSON(message.target);
        }
        if (message.function !== "") {
            obj.function = message.function;
        }
        if ((_a = message.args) === null || _a === void 0 ? void 0 : _a.length) {
            obj.args = message.args.map((e) => exports.Expr.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Expr_Call.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExpr_Call();
        message.target = (object.target !== undefined && object.target !== null)
            ? exports.Expr.fromPartial(object.target)
            : undefined;
        message.function = (_a = object.function) !== null && _a !== void 0 ? _a : "";
        message.args = ((_b = object.args) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Expr.fromPartial(e))) || [];
        return message;
    },
};
function createBaseExpr_CreateList() {
    return { elements: [] };
}
exports.Expr_CreateList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.elements) {
            exports.Expr.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_CreateList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.elements.push(exports.Expr.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elements: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.elements) ? object.elements.map((e) => exports.Expr.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.elements) === null || _a === void 0 ? void 0 : _a.length) {
            obj.elements = message.elements.map((e) => exports.Expr.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Expr_CreateList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExpr_CreateList();
        message.elements = ((_a = object.elements) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Expr.fromPartial(e))) || [];
        return message;
    },
};
function createBaseExpr_CreateStruct() {
    return { messageName: "", entries: [] };
}
exports.Expr_CreateStruct = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.messageName !== "") {
            writer.uint32(10).string(message.messageName);
        }
        for (const v of message.entries) {
            exports.Expr_CreateStruct_Entry.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_CreateStruct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.messageName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.entries.push(exports.Expr_CreateStruct_Entry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageName: isSet(object.messageName) ? globalThis.String(object.messageName) : "",
            entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.entries)
                ? object.entries.map((e) => exports.Expr_CreateStruct_Entry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.messageName !== "") {
            obj.messageName = message.messageName;
        }
        if ((_a = message.entries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.entries = message.entries.map((e) => exports.Expr_CreateStruct_Entry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Expr_CreateStruct.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExpr_CreateStruct();
        message.messageName = (_a = object.messageName) !== null && _a !== void 0 ? _a : "";
        message.entries = ((_b = object.entries) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Expr_CreateStruct_Entry.fromPartial(e))) || [];
        return message;
    },
};
function createBaseExpr_CreateStruct_Entry() {
    return { id: long_1.default.ZERO, fieldKey: undefined, mapKey: undefined, value: undefined };
}
exports.Expr_CreateStruct_Entry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).int64(message.id);
        }
        if (message.fieldKey !== undefined) {
            writer.uint32(18).string(message.fieldKey);
        }
        if (message.mapKey !== undefined) {
            exports.Expr.encode(message.mapKey, writer.uint32(26).fork()).ldelim();
        }
        if (message.value !== undefined) {
            exports.Expr.encode(message.value, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_CreateStruct_Entry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fieldKey = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.mapKey = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.value = exports.Expr.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.ZERO,
            fieldKey: isSet(object.fieldKey) ? globalThis.String(object.fieldKey) : undefined,
            mapKey: isSet(object.mapKey) ? exports.Expr.fromJSON(object.mapKey) : undefined,
            value: isSet(object.value) ? exports.Expr.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.id.isZero()) {
            obj.id = (message.id || long_1.default.ZERO).toString();
        }
        if (message.fieldKey !== undefined) {
            obj.fieldKey = message.fieldKey;
        }
        if (message.mapKey !== undefined) {
            obj.mapKey = exports.Expr.toJSON(message.mapKey);
        }
        if (message.value !== undefined) {
            obj.value = exports.Expr.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.Expr_CreateStruct_Entry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExpr_CreateStruct_Entry();
        message.id = (object.id !== undefined && object.id !== null) ? long_1.default.fromValue(object.id) : long_1.default.ZERO;
        message.fieldKey = (_a = object.fieldKey) !== null && _a !== void 0 ? _a : undefined;
        message.mapKey = (object.mapKey !== undefined && object.mapKey !== null)
            ? exports.Expr.fromPartial(object.mapKey)
            : undefined;
        message.value = (object.value !== undefined && object.value !== null) ? exports.Expr.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseExpr_Comprehension() {
    return {
        iterVar: "",
        iterRange: undefined,
        accuVar: "",
        accuInit: undefined,
        loopCondition: undefined,
        loopStep: undefined,
        result: undefined,
    };
}
exports.Expr_Comprehension = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.iterVar !== "") {
            writer.uint32(10).string(message.iterVar);
        }
        if (message.iterRange !== undefined) {
            exports.Expr.encode(message.iterRange, writer.uint32(18).fork()).ldelim();
        }
        if (message.accuVar !== "") {
            writer.uint32(26).string(message.accuVar);
        }
        if (message.accuInit !== undefined) {
            exports.Expr.encode(message.accuInit, writer.uint32(34).fork()).ldelim();
        }
        if (message.loopCondition !== undefined) {
            exports.Expr.encode(message.loopCondition, writer.uint32(42).fork()).ldelim();
        }
        if (message.loopStep !== undefined) {
            exports.Expr.encode(message.loopStep, writer.uint32(50).fork()).ldelim();
        }
        if (message.result !== undefined) {
            exports.Expr.encode(message.result, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpr_Comprehension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.iterVar = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.iterRange = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.accuVar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.accuInit = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.loopCondition = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.loopStep = exports.Expr.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.result = exports.Expr.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            iterVar: isSet(object.iterVar) ? globalThis.String(object.iterVar) : "",
            iterRange: isSet(object.iterRange) ? exports.Expr.fromJSON(object.iterRange) : undefined,
            accuVar: isSet(object.accuVar) ? globalThis.String(object.accuVar) : "",
            accuInit: isSet(object.accuInit) ? exports.Expr.fromJSON(object.accuInit) : undefined,
            loopCondition: isSet(object.loopCondition) ? exports.Expr.fromJSON(object.loopCondition) : undefined,
            loopStep: isSet(object.loopStep) ? exports.Expr.fromJSON(object.loopStep) : undefined,
            result: isSet(object.result) ? exports.Expr.fromJSON(object.result) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.iterVar !== "") {
            obj.iterVar = message.iterVar;
        }
        if (message.iterRange !== undefined) {
            obj.iterRange = exports.Expr.toJSON(message.iterRange);
        }
        if (message.accuVar !== "") {
            obj.accuVar = message.accuVar;
        }
        if (message.accuInit !== undefined) {
            obj.accuInit = exports.Expr.toJSON(message.accuInit);
        }
        if (message.loopCondition !== undefined) {
            obj.loopCondition = exports.Expr.toJSON(message.loopCondition);
        }
        if (message.loopStep !== undefined) {
            obj.loopStep = exports.Expr.toJSON(message.loopStep);
        }
        if (message.result !== undefined) {
            obj.result = exports.Expr.toJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.Expr_Comprehension.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExpr_Comprehension();
        message.iterVar = (_a = object.iterVar) !== null && _a !== void 0 ? _a : "";
        message.iterRange = (object.iterRange !== undefined && object.iterRange !== null)
            ? exports.Expr.fromPartial(object.iterRange)
            : undefined;
        message.accuVar = (_b = object.accuVar) !== null && _b !== void 0 ? _b : "";
        message.accuInit = (object.accuInit !== undefined && object.accuInit !== null)
            ? exports.Expr.fromPartial(object.accuInit)
            : undefined;
        message.loopCondition = (object.loopCondition !== undefined && object.loopCondition !== null)
            ? exports.Expr.fromPartial(object.loopCondition)
            : undefined;
        message.loopStep = (object.loopStep !== undefined && object.loopStep !== null)
            ? exports.Expr.fromPartial(object.loopStep)
            : undefined;
        message.result = (object.result !== undefined && object.result !== null)
            ? exports.Expr.fromPartial(object.result)
            : undefined;
        return message;
    },
};
function createBaseConstant() {
    return {
        nullValue: undefined,
        boolValue: undefined,
        int64Value: undefined,
        uint64Value: undefined,
        doubleValue: undefined,
        stringValue: undefined,
        bytesValue: undefined,
        durationValue: undefined,
        timestampValue: undefined,
    };
}
exports.Constant = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.nullValue !== undefined) {
            writer.uint32(8).int32(message.nullValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(16).bool(message.boolValue);
        }
        if (message.int64Value !== undefined) {
            writer.uint32(24).int64(message.int64Value);
        }
        if (message.uint64Value !== undefined) {
            writer.uint32(32).uint64(message.uint64Value);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(41).double(message.doubleValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(50).string(message.stringValue);
        }
        if (message.bytesValue !== undefined) {
            writer.uint32(58).bytes(message.bytesValue);
        }
        if (message.durationValue !== undefined) {
            duration_1.Duration.encode(message.durationValue, writer.uint32(66).fork()).ldelim();
        }
        if (message.timestampValue !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestampValue), writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConstant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.nullValue = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.int64Value = reader.int64();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.uint64Value = reader.uint64();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.doubleValue = reader.double();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.bytesValue = reader.bytes();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.durationValue = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.timestampValue = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nullValue: isSet(object.nullValue) ? (0, struct_1.nullValueFromJSON)(object.nullValue) : undefined,
            boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
            int64Value: isSet(object.int64Value) ? long_1.default.fromValue(object.int64Value) : undefined,
            uint64Value: isSet(object.uint64Value) ? long_1.default.fromValue(object.uint64Value) : undefined,
            doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
            stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
            bytesValue: isSet(object.bytesValue) ? bytesFromBase64(object.bytesValue) : undefined,
            durationValue: isSet(object.durationValue) ? duration_1.Duration.fromJSON(object.durationValue) : undefined,
            timestampValue: isSet(object.timestampValue) ? fromJsonTimestamp(object.timestampValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nullValue !== undefined) {
            obj.nullValue = (0, struct_1.nullValueToJSON)(message.nullValue);
        }
        if (message.boolValue !== undefined) {
            obj.boolValue = message.boolValue;
        }
        if (message.int64Value !== undefined) {
            obj.int64Value = (message.int64Value || long_1.default.ZERO).toString();
        }
        if (message.uint64Value !== undefined) {
            obj.uint64Value = (message.uint64Value || long_1.default.UZERO).toString();
        }
        if (message.doubleValue !== undefined) {
            obj.doubleValue = message.doubleValue;
        }
        if (message.stringValue !== undefined) {
            obj.stringValue = message.stringValue;
        }
        if (message.bytesValue !== undefined) {
            obj.bytesValue = base64FromBytes(message.bytesValue);
        }
        if (message.durationValue !== undefined) {
            obj.durationValue = duration_1.Duration.toJSON(message.durationValue);
        }
        if (message.timestampValue !== undefined) {
            obj.timestampValue = message.timestampValue.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.Constant.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseConstant();
        message.nullValue = (_a = object.nullValue) !== null && _a !== void 0 ? _a : undefined;
        message.boolValue = (_b = object.boolValue) !== null && _b !== void 0 ? _b : undefined;
        message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
            ? long_1.default.fromValue(object.int64Value)
            : undefined;
        message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
            ? long_1.default.fromValue(object.uint64Value)
            : undefined;
        message.doubleValue = (_c = object.doubleValue) !== null && _c !== void 0 ? _c : undefined;
        message.stringValue = (_d = object.stringValue) !== null && _d !== void 0 ? _d : undefined;
        message.bytesValue = (_e = object.bytesValue) !== null && _e !== void 0 ? _e : undefined;
        message.durationValue = (object.durationValue !== undefined && object.durationValue !== null)
            ? duration_1.Duration.fromPartial(object.durationValue)
            : undefined;
        message.timestampValue = (_f = object.timestampValue) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseSourceInfo() {
    return { syntaxVersion: "", location: "", lineOffsets: [], positions: new Map(), macroCalls: new Map() };
}
exports.SourceInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.syntaxVersion !== "") {
            writer.uint32(10).string(message.syntaxVersion);
        }
        if (message.location !== "") {
            writer.uint32(18).string(message.location);
        }
        writer.uint32(26).fork();
        for (const v of message.lineOffsets) {
            writer.int32(v);
        }
        writer.ldelim();
        message.positions.forEach((value, key) => {
            exports.SourceInfo_PositionsEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        message.macroCalls.forEach((value, key) => {
            exports.SourceInfo_MacroCallsEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSourceInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.syntaxVersion = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
                case 3:
                    if (tag === 24) {
                        message.lineOffsets.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.lineOffsets.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.SourceInfo_PositionsEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.positions.set(entry4.key, entry4.value);
                    }
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.SourceInfo_MacroCallsEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.macroCalls.set(entry5.key, entry5.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            syntaxVersion: isSet(object.syntaxVersion) ? globalThis.String(object.syntaxVersion) : "",
            location: isSet(object.location) ? globalThis.String(object.location) : "",
            lineOffsets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lineOffsets)
                ? object.lineOffsets.map((e) => globalThis.Number(e))
                : [],
            positions: isObject(object.positions)
                ? Object.entries(object.positions).reduce((acc, [key, value]) => {
                    acc.set(long_1.default.fromValue(key), Number(value));
                    return acc;
                }, new Map())
                : new Map(),
            macroCalls: isObject(object.macroCalls)
                ? Object.entries(object.macroCalls).reduce((acc, [key, value]) => {
                    acc.set(long_1.default.fromValue(key), exports.Expr.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.syntaxVersion !== "") {
            obj.syntaxVersion = message.syntaxVersion;
        }
        if (message.location !== "") {
            obj.location = message.location;
        }
        if ((_a = message.lineOffsets) === null || _a === void 0 ? void 0 : _a.length) {
            obj.lineOffsets = message.lineOffsets.map((e) => Math.round(e));
        }
        if ((_b = message.positions) === null || _b === void 0 ? void 0 : _b.size) {
            obj.positions = {};
            message.positions.forEach((v, k) => {
                obj.positions[longToNumber(k)] = Math.round(v);
            });
        }
        if ((_c = message.macroCalls) === null || _c === void 0 ? void 0 : _c.size) {
            obj.macroCalls = {};
            message.macroCalls.forEach((v, k) => {
                obj.macroCalls[longToNumber(k)] = exports.Expr.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.SourceInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSourceInfo();
        message.syntaxVersion = (_a = object.syntaxVersion) !== null && _a !== void 0 ? _a : "";
        message.location = (_b = object.location) !== null && _b !== void 0 ? _b : "";
        message.lineOffsets = ((_c = object.lineOffsets) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.positions = (() => {
            var _a;
            const m = new Map();
            ((_a = object.positions) !== null && _a !== void 0 ? _a : new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, globalThis.Number(value));
                }
            });
            return m;
        })();
        message.macroCalls = (() => {
            var _a;
            const m = new Map();
            ((_a = object.macroCalls) !== null && _a !== void 0 ? _a : new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, exports.Expr.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseSourceInfo_PositionsEntry() {
    return { key: long_1.default.ZERO, value: 0 };
}
exports.SourceInfo_PositionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.key.isZero()) {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSourceInfo_PositionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? long_1.default.fromValue(object.key) : long_1.default.ZERO,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.key.isZero()) {
            obj.key = (message.key || long_1.default.ZERO).toString();
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.SourceInfo_PositionsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSourceInfo_PositionsEntry();
        message.key = (object.key !== undefined && object.key !== null) ? long_1.default.fromValue(object.key) : long_1.default.ZERO;
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseSourceInfo_MacroCallsEntry() {
    return { key: long_1.default.ZERO, value: undefined };
}
exports.SourceInfo_MacroCallsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.key.isZero()) {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.Expr.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSourceInfo_MacroCallsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Expr.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? long_1.default.fromValue(object.key) : long_1.default.ZERO,
            value: isSet(object.value) ? exports.Expr.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.key.isZero()) {
            obj.key = (message.key || long_1.default.ZERO).toString();
        }
        if (message.value !== undefined) {
            obj.value = exports.Expr.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.SourceInfo_MacroCallsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSourceInfo_MacroCallsEntry();
        message.key = (object.key !== undefined && object.key !== null) ? long_1.default.fromValue(object.key) : long_1.default.ZERO;
        message.value = (object.value !== undefined && object.value !== null) ? exports.Expr.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseSourcePosition() {
    return { location: "", offset: 0, line: 0, column: 0 };
}
exports.SourcePosition = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.location !== "") {
            writer.uint32(10).string(message.location);
        }
        if (message.offset !== 0) {
            writer.uint32(16).int32(message.offset);
        }
        if (message.line !== 0) {
            writer.uint32(24).int32(message.line);
        }
        if (message.column !== 0) {
            writer.uint32(32).int32(message.column);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSourcePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.line = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.column = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            location: isSet(object.location) ? globalThis.String(object.location) : "",
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
            line: isSet(object.line) ? globalThis.Number(object.line) : 0,
            column: isSet(object.column) ? globalThis.Number(object.column) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.location !== "") {
            obj.location = message.location;
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        if (message.line !== 0) {
            obj.line = Math.round(message.line);
        }
        if (message.column !== 0) {
            obj.column = Math.round(message.column);
        }
        return obj;
    },
    create(base) {
        return exports.SourcePosition.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSourcePosition();
        message.location = (_a = object.location) !== null && _a !== void 0 ? _a : "";
        message.offset = (_b = object.offset) !== null && _b !== void 0 ? _b : 0;
        message.line = (_c = object.line) !== null && _c !== void 0 ? _c : 0;
        message.column = (_d = object.column) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=syntax.js.map