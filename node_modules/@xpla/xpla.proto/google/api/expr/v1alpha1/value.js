"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapValue_Entry = exports.MapValue = exports.ListValue = exports.EnumValue = exports.Value = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../protobuf/any");
const struct_1 = require("../../../protobuf/struct");
exports.protobufPackage = "google.api.expr.v1alpha1";
function createBaseValue() {
    return {
        nullValue: undefined,
        boolValue: undefined,
        int64Value: undefined,
        uint64Value: undefined,
        doubleValue: undefined,
        stringValue: undefined,
        bytesValue: undefined,
        enumValue: undefined,
        objectValue: undefined,
        mapValue: undefined,
        listValue: undefined,
        typeValue: undefined,
    };
}
exports.Value = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.nullValue !== undefined) {
            writer.uint32(8).int32(message.nullValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(16).bool(message.boolValue);
        }
        if (message.int64Value !== undefined) {
            writer.uint32(24).int64(message.int64Value);
        }
        if (message.uint64Value !== undefined) {
            writer.uint32(32).uint64(message.uint64Value);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(41).double(message.doubleValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(50).string(message.stringValue);
        }
        if (message.bytesValue !== undefined) {
            writer.uint32(58).bytes(message.bytesValue);
        }
        if (message.enumValue !== undefined) {
            exports.EnumValue.encode(message.enumValue, writer.uint32(74).fork()).ldelim();
        }
        if (message.objectValue !== undefined) {
            any_1.Any.encode(message.objectValue, writer.uint32(82).fork()).ldelim();
        }
        if (message.mapValue !== undefined) {
            exports.MapValue.encode(message.mapValue, writer.uint32(90).fork()).ldelim();
        }
        if (message.listValue !== undefined) {
            exports.ListValue.encode(message.listValue, writer.uint32(98).fork()).ldelim();
        }
        if (message.typeValue !== undefined) {
            writer.uint32(122).string(message.typeValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.nullValue = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.int64Value = reader.int64();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.uint64Value = reader.uint64();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.doubleValue = reader.double();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.bytesValue = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.enumValue = exports.EnumValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.objectValue = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.mapValue = exports.MapValue.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.listValue = exports.ListValue.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.typeValue = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nullValue: isSet(object.nullValue) ? (0, struct_1.nullValueFromJSON)(object.nullValue) : undefined,
            boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
            int64Value: isSet(object.int64Value) ? long_1.default.fromValue(object.int64Value) : undefined,
            uint64Value: isSet(object.uint64Value) ? long_1.default.fromValue(object.uint64Value) : undefined,
            doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
            stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
            bytesValue: isSet(object.bytesValue) ? bytesFromBase64(object.bytesValue) : undefined,
            enumValue: isSet(object.enumValue) ? exports.EnumValue.fromJSON(object.enumValue) : undefined,
            objectValue: isSet(object.objectValue) ? any_1.Any.fromJSON(object.objectValue) : undefined,
            mapValue: isSet(object.mapValue) ? exports.MapValue.fromJSON(object.mapValue) : undefined,
            listValue: isSet(object.listValue) ? exports.ListValue.fromJSON(object.listValue) : undefined,
            typeValue: isSet(object.typeValue) ? globalThis.String(object.typeValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nullValue !== undefined) {
            obj.nullValue = (0, struct_1.nullValueToJSON)(message.nullValue);
        }
        if (message.boolValue !== undefined) {
            obj.boolValue = message.boolValue;
        }
        if (message.int64Value !== undefined) {
            obj.int64Value = (message.int64Value || long_1.default.ZERO).toString();
        }
        if (message.uint64Value !== undefined) {
            obj.uint64Value = (message.uint64Value || long_1.default.UZERO).toString();
        }
        if (message.doubleValue !== undefined) {
            obj.doubleValue = message.doubleValue;
        }
        if (message.stringValue !== undefined) {
            obj.stringValue = message.stringValue;
        }
        if (message.bytesValue !== undefined) {
            obj.bytesValue = base64FromBytes(message.bytesValue);
        }
        if (message.enumValue !== undefined) {
            obj.enumValue = exports.EnumValue.toJSON(message.enumValue);
        }
        if (message.objectValue !== undefined) {
            obj.objectValue = any_1.Any.toJSON(message.objectValue);
        }
        if (message.mapValue !== undefined) {
            obj.mapValue = exports.MapValue.toJSON(message.mapValue);
        }
        if (message.listValue !== undefined) {
            obj.listValue = exports.ListValue.toJSON(message.listValue);
        }
        if (message.typeValue !== undefined) {
            obj.typeValue = message.typeValue;
        }
        return obj;
    },
    create(base) {
        return exports.Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseValue();
        message.nullValue = (_a = object.nullValue) !== null && _a !== void 0 ? _a : undefined;
        message.boolValue = (_b = object.boolValue) !== null && _b !== void 0 ? _b : undefined;
        message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
            ? long_1.default.fromValue(object.int64Value)
            : undefined;
        message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
            ? long_1.default.fromValue(object.uint64Value)
            : undefined;
        message.doubleValue = (_c = object.doubleValue) !== null && _c !== void 0 ? _c : undefined;
        message.stringValue = (_d = object.stringValue) !== null && _d !== void 0 ? _d : undefined;
        message.bytesValue = (_e = object.bytesValue) !== null && _e !== void 0 ? _e : undefined;
        message.enumValue = (object.enumValue !== undefined && object.enumValue !== null)
            ? exports.EnumValue.fromPartial(object.enumValue)
            : undefined;
        message.objectValue = (object.objectValue !== undefined && object.objectValue !== null)
            ? any_1.Any.fromPartial(object.objectValue)
            : undefined;
        message.mapValue = (object.mapValue !== undefined && object.mapValue !== null)
            ? exports.MapValue.fromPartial(object.mapValue)
            : undefined;
        message.listValue = (object.listValue !== undefined && object.listValue !== null)
            ? exports.ListValue.fromPartial(object.listValue)
            : undefined;
        message.typeValue = (_f = object.typeValue) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseEnumValue() {
    return { type: "", value: 0 };
}
exports.EnumValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnumValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.EnumValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnumValue();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseListValue() {
    return { values: [] };
}
exports.ListValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.values) {
            exports.Value.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(exports.Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => exports.Value.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values.map((e) => exports.Value.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListValue();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Value.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMapValue() {
    return { entries: [] };
}
exports.MapValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.entries) {
            exports.MapValue_Entry.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entries.push(exports.MapValue_Entry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.entries)
                ? object.entries.map((e) => exports.MapValue_Entry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.entries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.entries = message.entries.map((e) => exports.MapValue_Entry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MapValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMapValue();
        message.entries = ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map((e) => exports.MapValue_Entry.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMapValue_Entry() {
    return { key: undefined, value: undefined };
}
exports.MapValue_Entry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== undefined) {
            exports.Value.encode(message.key, writer.uint32(10).fork()).ldelim();
        }
        if (message.value !== undefined) {
            exports.Value.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapValue_Entry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = exports.Value.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Value.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? exports.Value.fromJSON(object.key) : undefined,
            value: isSet(object.value) ? exports.Value.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== undefined) {
            obj.key = exports.Value.toJSON(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.Value.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.MapValue_Entry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMapValue_Entry();
        message.key = (object.key !== undefined && object.key !== null) ? exports.Value.fromPartial(object.key) : undefined;
        message.value = (object.value !== undefined && object.value !== null) ? exports.Value.fromPartial(object.value) : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=value.js.map