"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Color = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const wrappers_1 = require("../protobuf/wrappers");
exports.protobufPackage = "google.type";
function createBaseColor() {
    return { red: 0, green: 0, blue: 0, alpha: undefined };
}
exports.Color = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.red !== 0) {
            writer.uint32(13).float(message.red);
        }
        if (message.green !== 0) {
            writer.uint32(21).float(message.green);
        }
        if (message.blue !== 0) {
            writer.uint32(29).float(message.blue);
        }
        if (message.alpha !== undefined) {
            wrappers_1.FloatValue.encode({ value: message.alpha }, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseColor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.red = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.green = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.blue = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.alpha = wrappers_1.FloatValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            red: isSet(object.red) ? globalThis.Number(object.red) : 0,
            green: isSet(object.green) ? globalThis.Number(object.green) : 0,
            blue: isSet(object.blue) ? globalThis.Number(object.blue) : 0,
            alpha: isSet(object.alpha) ? Number(object.alpha) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.red !== 0) {
            obj.red = message.red;
        }
        if (message.green !== 0) {
            obj.green = message.green;
        }
        if (message.blue !== 0) {
            obj.blue = message.blue;
        }
        if (message.alpha !== undefined) {
            obj.alpha = message.alpha;
        }
        return obj;
    },
    create(base) {
        return exports.Color.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseColor();
        message.red = (_a = object.red) !== null && _a !== void 0 ? _a : 0;
        message.green = (_b = object.green) !== null && _b !== void 0 ? _b : 0;
        message.blue = (_c = object.blue) !== null && _c !== void 0 ? _c : 0;
        message.alpha = (_d = object.alpha) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=color.js.map