import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "google.type";
/** Represents a fraction in terms of a numerator divided by a denominator. */
export interface Fraction {
    /** The numerator in the fraction, e.g. 2 in 2/3. */
    numerator: Long;
    /**
     * The value by which the numerator is divided, e.g. 3 in 2/3. Must be
     * positive.
     */
    denominator: Long;
}
export declare const Fraction: {
    encode(message: Fraction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Fraction;
    fromJSON(object: any): Fraction;
    toJSON(message: Fraction): unknown;
    create(base?: DeepPartial<Fraction>): Fraction;
    fromPartial(object: DeepPartial<Fraction>): Fraction;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
