"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fraction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "google.type";
function createBaseFraction() {
    return { numerator: long_1.default.ZERO, denominator: long_1.default.ZERO };
}
exports.Fraction = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.numerator.isZero()) {
            writer.uint32(8).int64(message.numerator);
        }
        if (!message.denominator.isZero()) {
            writer.uint32(16).int64(message.denominator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFraction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.numerator = reader.int64();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.denominator = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            numerator: isSet(object.numerator) ? long_1.default.fromValue(object.numerator) : long_1.default.ZERO,
            denominator: isSet(object.denominator) ? long_1.default.fromValue(object.denominator) : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.numerator.isZero()) {
            obj.numerator = (message.numerator || long_1.default.ZERO).toString();
        }
        if (!message.denominator.isZero()) {
            obj.denominator = (message.denominator || long_1.default.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.Fraction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseFraction();
        message.numerator = (object.numerator !== undefined && object.numerator !== null)
            ? long_1.default.fromValue(object.numerator)
            : long_1.default.ZERO;
        message.denominator = (object.denominator !== undefined && object.denominator !== null)
            ? long_1.default.fromValue(object.denominator)
            : long_1.default.ZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=fraction.js.map