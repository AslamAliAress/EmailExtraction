import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "google.type";
/**
 * An object that represents a latitude/longitude pair. This is expressed as a
 * pair of doubles to represent degrees latitude and degrees longitude. Unless
 * specified otherwise, this must conform to the
 * <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 * standard</a>. Values must be within normalized ranges.
 */
export interface LatLng {
    /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
    latitude: number;
    /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
    longitude: number;
}
export declare const LatLng: {
    encode(message: LatLng, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LatLng;
    fromJSON(object: any): LatLng;
    toJSON(message: LatLng): unknown;
    create(base?: DeepPartial<LatLng>): LatLng;
    fromPartial(object: DeepPartial<LatLng>): LatLng;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
