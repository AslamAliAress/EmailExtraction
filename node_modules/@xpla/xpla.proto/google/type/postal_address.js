"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostalAddress = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "google.type";
function createBasePostalAddress() {
    return {
        revision: 0,
        regionCode: "",
        languageCode: "",
        postalCode: "",
        sortingCode: "",
        administrativeArea: "",
        locality: "",
        sublocality: "",
        addressLines: [],
        recipients: [],
        organization: "",
    };
}
exports.PostalAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.revision !== 0) {
            writer.uint32(8).int32(message.revision);
        }
        if (message.regionCode !== "") {
            writer.uint32(18).string(message.regionCode);
        }
        if (message.languageCode !== "") {
            writer.uint32(26).string(message.languageCode);
        }
        if (message.postalCode !== "") {
            writer.uint32(34).string(message.postalCode);
        }
        if (message.sortingCode !== "") {
            writer.uint32(42).string(message.sortingCode);
        }
        if (message.administrativeArea !== "") {
            writer.uint32(50).string(message.administrativeArea);
        }
        if (message.locality !== "") {
            writer.uint32(58).string(message.locality);
        }
        if (message.sublocality !== "") {
            writer.uint32(66).string(message.sublocality);
        }
        for (const v of message.addressLines) {
            writer.uint32(74).string(v);
        }
        for (const v of message.recipients) {
            writer.uint32(82).string(v);
        }
        if (message.organization !== "") {
            writer.uint32(90).string(message.organization);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostalAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.revision = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.regionCode = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.postalCode = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sortingCode = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.administrativeArea = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.locality = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.sublocality = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.addressLines.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.recipients.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.organization = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0,
            regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
            postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : "",
            sortingCode: isSet(object.sortingCode) ? globalThis.String(object.sortingCode) : "",
            administrativeArea: isSet(object.administrativeArea) ? globalThis.String(object.administrativeArea) : "",
            locality: isSet(object.locality) ? globalThis.String(object.locality) : "",
            sublocality: isSet(object.sublocality) ? globalThis.String(object.sublocality) : "",
            addressLines: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addressLines)
                ? object.addressLines.map((e) => globalThis.String(e))
                : [],
            recipients: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.recipients)
                ? object.recipients.map((e) => globalThis.String(e))
                : [],
            organization: isSet(object.organization) ? globalThis.String(object.organization) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.revision !== 0) {
            obj.revision = Math.round(message.revision);
        }
        if (message.regionCode !== "") {
            obj.regionCode = message.regionCode;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        if (message.postalCode !== "") {
            obj.postalCode = message.postalCode;
        }
        if (message.sortingCode !== "") {
            obj.sortingCode = message.sortingCode;
        }
        if (message.administrativeArea !== "") {
            obj.administrativeArea = message.administrativeArea;
        }
        if (message.locality !== "") {
            obj.locality = message.locality;
        }
        if (message.sublocality !== "") {
            obj.sublocality = message.sublocality;
        }
        if ((_a = message.addressLines) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addressLines = message.addressLines;
        }
        if ((_b = message.recipients) === null || _b === void 0 ? void 0 : _b.length) {
            obj.recipients = message.recipients;
        }
        if (message.organization !== "") {
            obj.organization = message.organization;
        }
        return obj;
    },
    create(base) {
        return exports.PostalAddress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBasePostalAddress();
        message.revision = (_a = object.revision) !== null && _a !== void 0 ? _a : 0;
        message.regionCode = (_b = object.regionCode) !== null && _b !== void 0 ? _b : "";
        message.languageCode = (_c = object.languageCode) !== null && _c !== void 0 ? _c : "";
        message.postalCode = (_d = object.postalCode) !== null && _d !== void 0 ? _d : "";
        message.sortingCode = (_e = object.sortingCode) !== null && _e !== void 0 ? _e : "";
        message.administrativeArea = (_f = object.administrativeArea) !== null && _f !== void 0 ? _f : "";
        message.locality = (_g = object.locality) !== null && _g !== void 0 ? _g : "";
        message.sublocality = (_h = object.sublocality) !== null && _h !== void 0 ? _h : "";
        message.addressLines = ((_j = object.addressLines) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.recipients = ((_k = object.recipients) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.organization = (_l = object.organization) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=postal_address.js.map