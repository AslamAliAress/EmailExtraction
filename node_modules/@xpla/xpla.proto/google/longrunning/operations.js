"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.OperationsWaitOperationDesc = exports.OperationsCancelOperationDesc = exports.OperationsDeleteOperationDesc = exports.OperationsGetOperationDesc = exports.OperationsListOperationsDesc = exports.OperationsDesc = exports.OperationsClientImpl = exports.OperationInfo = exports.WaitOperationRequest = exports.DeleteOperationRequest = exports.CancelOperationRequest = exports.ListOperationsResponse = exports.ListOperationsRequest = exports.GetOperationRequest = exports.Operation = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../protobuf/any");
const duration_1 = require("../protobuf/duration");
const empty_1 = require("../protobuf/empty");
const status_1 = require("../rpc/status");
exports.protobufPackage = "google.longrunning";
function createBaseOperation() {
    return { name: "", metadata: undefined, done: false, error: undefined, response: undefined };
}
exports.Operation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.metadata !== undefined) {
            any_1.Any.encode(message.metadata, writer.uint32(18).fork()).ldelim();
        }
        if (message.done === true) {
            writer.uint32(24).bool(message.done);
        }
        if (message.error !== undefined) {
            status_1.Status.encode(message.error, writer.uint32(34).fork()).ldelim();
        }
        if (message.response !== undefined) {
            any_1.Any.encode(message.response, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.done = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.error = status_1.Status.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = any_1.Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            metadata: isSet(object.metadata) ? any_1.Any.fromJSON(object.metadata) : undefined,
            done: isSet(object.done) ? globalThis.Boolean(object.done) : false,
            error: isSet(object.error) ? status_1.Status.fromJSON(object.error) : undefined,
            response: isSet(object.response) ? any_1.Any.fromJSON(object.response) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.metadata !== undefined) {
            obj.metadata = any_1.Any.toJSON(message.metadata);
        }
        if (message.done === true) {
            obj.done = message.done;
        }
        if (message.error !== undefined) {
            obj.error = status_1.Status.toJSON(message.error);
        }
        if (message.response !== undefined) {
            obj.response = any_1.Any.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.Operation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOperation();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? any_1.Any.fromPartial(object.metadata)
            : undefined;
        message.done = (_b = object.done) !== null && _b !== void 0 ? _b : false;
        message.error = (object.error !== undefined && object.error !== null)
            ? status_1.Status.fromPartial(object.error)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? any_1.Any.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseGetOperationRequest() {
    return { name: "" };
}
exports.GetOperationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOperationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.GetOperationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetOperationRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListOperationsRequest() {
    return { name: "", filter: "", pageSize: 0, pageToken: "" };
}
exports.ListOperationsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.filter !== "") {
            writer.uint32(10).string(message.filter);
        }
        if (message.pageSize !== 0) {
            writer.uint32(16).int32(message.pageSize);
        }
        if (message.pageToken !== "") {
            writer.uint32(26).string(message.pageToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOperationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.pageSize = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.pageToken = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
            pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
            pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.filter !== "") {
            obj.filter = message.filter;
        }
        if (message.pageSize !== 0) {
            obj.pageSize = Math.round(message.pageSize);
        }
        if (message.pageToken !== "") {
            obj.pageToken = message.pageToken;
        }
        return obj;
    },
    create(base) {
        return exports.ListOperationsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseListOperationsRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.filter = (_b = object.filter) !== null && _b !== void 0 ? _b : "";
        message.pageSize = (_c = object.pageSize) !== null && _c !== void 0 ? _c : 0;
        message.pageToken = (_d = object.pageToken) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseListOperationsResponse() {
    return { operations: [], nextPageToken: "" };
}
exports.ListOperationsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.operations) {
            exports.Operation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.nextPageToken !== "") {
            writer.uint32(18).string(message.nextPageToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOperationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.operations.push(exports.Operation.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nextPageToken = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.operations)
                ? object.operations.map((e) => exports.Operation.fromJSON(e))
                : [],
            nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.operations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.operations = message.operations.map((e) => exports.Operation.toJSON(e));
        }
        if (message.nextPageToken !== "") {
            obj.nextPageToken = message.nextPageToken;
        }
        return obj;
    },
    create(base) {
        return exports.ListOperationsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListOperationsResponse();
        message.operations = ((_a = object.operations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Operation.fromPartial(e))) || [];
        message.nextPageToken = (_b = object.nextPageToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCancelOperationRequest() {
    return { name: "" };
}
exports.CancelOperationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelOperationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.CancelOperationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCancelOperationRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteOperationRequest() {
    return { name: "" };
}
exports.DeleteOperationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteOperationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteOperationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteOperationRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseWaitOperationRequest() {
    return { name: "", timeout: undefined };
}
exports.WaitOperationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.timeout !== undefined) {
            duration_1.Duration.encode(message.timeout, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWaitOperationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timeout = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            timeout: isSet(object.timeout) ? duration_1.Duration.fromJSON(object.timeout) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.timeout !== undefined) {
            obj.timeout = duration_1.Duration.toJSON(message.timeout);
        }
        return obj;
    },
    create(base) {
        return exports.WaitOperationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWaitOperationRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? duration_1.Duration.fromPartial(object.timeout)
            : undefined;
        return message;
    },
};
function createBaseOperationInfo() {
    return { responseType: "", metadataType: "" };
}
exports.OperationInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.responseType !== "") {
            writer.uint32(10).string(message.responseType);
        }
        if (message.metadataType !== "") {
            writer.uint32(18).string(message.metadataType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.responseType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataType = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responseType: isSet(object.responseType) ? globalThis.String(object.responseType) : "",
            metadataType: isSet(object.metadataType) ? globalThis.String(object.metadataType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.responseType !== "") {
            obj.responseType = message.responseType;
        }
        if (message.metadataType !== "") {
            obj.metadataType = message.metadataType;
        }
        return obj;
    },
    create(base) {
        return exports.OperationInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOperationInfo();
        message.responseType = (_a = object.responseType) !== null && _a !== void 0 ? _a : "";
        message.metadataType = (_b = object.metadataType) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
class OperationsClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.ListOperations = this.ListOperations.bind(this);
        this.GetOperation = this.GetOperation.bind(this);
        this.DeleteOperation = this.DeleteOperation.bind(this);
        this.CancelOperation = this.CancelOperation.bind(this);
        this.WaitOperation = this.WaitOperation.bind(this);
    }
    ListOperations(request, metadata) {
        return this.rpc.unary(exports.OperationsListOperationsDesc, exports.ListOperationsRequest.fromPartial(request), metadata);
    }
    GetOperation(request, metadata) {
        return this.rpc.unary(exports.OperationsGetOperationDesc, exports.GetOperationRequest.fromPartial(request), metadata);
    }
    DeleteOperation(request, metadata) {
        return this.rpc.unary(exports.OperationsDeleteOperationDesc, exports.DeleteOperationRequest.fromPartial(request), metadata);
    }
    CancelOperation(request, metadata) {
        return this.rpc.unary(exports.OperationsCancelOperationDesc, exports.CancelOperationRequest.fromPartial(request), metadata);
    }
    WaitOperation(request, metadata) {
        return this.rpc.unary(exports.OperationsWaitOperationDesc, exports.WaitOperationRequest.fromPartial(request), metadata);
    }
}
exports.OperationsClientImpl = OperationsClientImpl;
exports.OperationsDesc = { serviceName: "google.longrunning.Operations" };
exports.OperationsListOperationsDesc = {
    methodName: "ListOperations",
    service: exports.OperationsDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.ListOperationsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ListOperationsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.OperationsGetOperationDesc = {
    methodName: "GetOperation",
    service: exports.OperationsDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetOperationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.Operation.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.OperationsDeleteOperationDesc = {
    methodName: "DeleteOperation",
    service: exports.OperationsDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.DeleteOperationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = empty_1.Empty.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.OperationsCancelOperationDesc = {
    methodName: "CancelOperation",
    service: exports.OperationsDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.CancelOperationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = empty_1.Empty.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.OperationsWaitOperationDesc = {
    methodName: "WaitOperation",
    service: exports.OperationsDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.WaitOperationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.Operation.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=operations.js.map