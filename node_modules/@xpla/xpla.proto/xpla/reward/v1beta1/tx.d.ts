import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./reward";
export declare const protobufPackage = "xpla.reward.v1beta1";
/**
 * MsgFundFeeCollector allows an account to directly
 * fund the fee collector.
 */
export interface MsgFundFeeCollector {
    amount: Coin[];
    depositor: string;
}
/** MsgFundFeeCollectorResponse defines the Msg/FundFeeCollector response type. */
export interface MsgFundFeeCollectorResponse {
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type for reward parameters.
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /**
     * params defines the x/evm parameters to update.
     * NOTE: All parameters must be supplied.
     */
    params: Params | undefined;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgFundFeeCollector: {
    encode(message: MsgFundFeeCollector, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundFeeCollector;
    fromJSON(object: any): MsgFundFeeCollector;
    toJSON(message: MsgFundFeeCollector): unknown;
    create(base?: DeepPartial<MsgFundFeeCollector>): MsgFundFeeCollector;
    fromPartial(object: DeepPartial<MsgFundFeeCollector>): MsgFundFeeCollector;
};
export declare const MsgFundFeeCollectorResponse: {
    encode(_: MsgFundFeeCollectorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFundFeeCollectorResponse;
    fromJSON(_: any): MsgFundFeeCollectorResponse;
    toJSON(_: MsgFundFeeCollectorResponse): unknown;
    create(base?: DeepPartial<MsgFundFeeCollectorResponse>): MsgFundFeeCollectorResponse;
    fromPartial(_: DeepPartial<MsgFundFeeCollectorResponse>): MsgFundFeeCollectorResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
    fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
};
/** Msg defines the reawrd Msg service. */
export interface Msg {
    /**
     * FundFeeCollector defines a method to allow an account to directly
     * fund the fee collector.
     */
    FundFeeCollector(request: DeepPartial<MsgFundFeeCollector>, metadata?: grpc.Metadata): Promise<MsgFundFeeCollectorResponse>;
    /**
     * UpdateParams defined a governance operation for updating the x/reward
     * module parameters. The authority is hard-coded to the Cosmos SDK x/gov
     * module account
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    FundFeeCollector(request: DeepPartial<MsgFundFeeCollector>, metadata?: grpc.Metadata): Promise<MsgFundFeeCollectorResponse>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgFundFeeCollectorDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
