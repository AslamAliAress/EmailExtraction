"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "xpla.reward.v1beta1";
function createBaseParams() {
    return { feePoolRate: "", communityPoolRate: "", reserveRate: "", reserveAccount: "", rewardDistributeAccount: "" };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feePoolRate !== "") {
            writer.uint32(10).string(message.feePoolRate);
        }
        if (message.communityPoolRate !== "") {
            writer.uint32(18).string(message.communityPoolRate);
        }
        if (message.reserveRate !== "") {
            writer.uint32(26).string(message.reserveRate);
        }
        if (message.reserveAccount !== "") {
            writer.uint32(34).string(message.reserveAccount);
        }
        if (message.rewardDistributeAccount !== "") {
            writer.uint32(42).string(message.rewardDistributeAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feePoolRate = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.communityPoolRate = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reserveRate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.reserveAccount = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.rewardDistributeAccount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            feePoolRate: isSet(object.feePoolRate) ? globalThis.String(object.feePoolRate) : "",
            communityPoolRate: isSet(object.communityPoolRate) ? globalThis.String(object.communityPoolRate) : "",
            reserveRate: isSet(object.reserveRate) ? globalThis.String(object.reserveRate) : "",
            reserveAccount: isSet(object.reserveAccount) ? globalThis.String(object.reserveAccount) : "",
            rewardDistributeAccount: isSet(object.rewardDistributeAccount)
                ? globalThis.String(object.rewardDistributeAccount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.feePoolRate !== "") {
            obj.feePoolRate = message.feePoolRate;
        }
        if (message.communityPoolRate !== "") {
            obj.communityPoolRate = message.communityPoolRate;
        }
        if (message.reserveRate !== "") {
            obj.reserveRate = message.reserveRate;
        }
        if (message.reserveAccount !== "") {
            obj.reserveAccount = message.reserveAccount;
        }
        if (message.rewardDistributeAccount !== "") {
            obj.rewardDistributeAccount = message.rewardDistributeAccount;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseParams();
        message.feePoolRate = (_a = object.feePoolRate) !== null && _a !== void 0 ? _a : "";
        message.communityPoolRate = (_b = object.communityPoolRate) !== null && _b !== void 0 ? _b : "";
        message.reserveRate = (_c = object.reserveRate) !== null && _c !== void 0 ? _c : "";
        message.reserveAccount = (_d = object.reserveAccount) !== null && _d !== void 0 ? _d : "";
        message.rewardDistributeAccount = (_e = object.rewardDistributeAccount) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=reward.js.map