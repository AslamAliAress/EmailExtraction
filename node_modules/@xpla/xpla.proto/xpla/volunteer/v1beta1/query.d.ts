import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xpla.volunteer.v1beta1";
/** QueryVolunteerValidatorsRequest */
export interface QueryVolunteerValidatorsRequest {
}
/** QueryVolunteerValidatorsResponse */
export interface QueryVolunteerValidatorsResponse {
    volunteerValidators: string[];
}
export declare const QueryVolunteerValidatorsRequest: {
    encode(_: QueryVolunteerValidatorsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVolunteerValidatorsRequest;
    fromJSON(_: any): QueryVolunteerValidatorsRequest;
    toJSON(_: QueryVolunteerValidatorsRequest): unknown;
    create(base?: DeepPartial<QueryVolunteerValidatorsRequest>): QueryVolunteerValidatorsRequest;
    fromPartial(_: DeepPartial<QueryVolunteerValidatorsRequest>): QueryVolunteerValidatorsRequest;
};
export declare const QueryVolunteerValidatorsResponse: {
    encode(message: QueryVolunteerValidatorsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVolunteerValidatorsResponse;
    fromJSON(object: any): QueryVolunteerValidatorsResponse;
    toJSON(message: QueryVolunteerValidatorsResponse): unknown;
    create(base?: DeepPartial<QueryVolunteerValidatorsResponse>): QueryVolunteerValidatorsResponse;
    fromPartial(object: DeepPartial<QueryVolunteerValidatorsResponse>): QueryVolunteerValidatorsResponse;
};
/** Query defines the gRPC querier service for volunteer module. */
export interface Query {
    /** VolunteerValidators */
    VolunteerValidators(request: DeepPartial<QueryVolunteerValidatorsRequest>, metadata?: grpc.Metadata): Promise<QueryVolunteerValidatorsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    VolunteerValidators(request: DeepPartial<QueryVolunteerValidatorsRequest>, metadata?: grpc.Metadata): Promise<QueryVolunteerValidatorsResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryVolunteerValidatorsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
