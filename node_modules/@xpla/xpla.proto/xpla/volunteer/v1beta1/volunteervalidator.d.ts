import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xpla.volunteer.v1beta1";
/** VolunteerValidator required for validator set update logic. */
export interface VolunteerValidator {
    /** address is the address of the validator. */
    address: string;
    /** power defines the power of the validator. */
    power: Long;
}
export declare const VolunteerValidator: {
    encode(message: VolunteerValidator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VolunteerValidator;
    fromJSON(object: any): VolunteerValidator;
    toJSON(message: VolunteerValidator): unknown;
    create(base?: DeepPartial<VolunteerValidator>): VolunteerValidator;
    fromPartial(object: DeepPartial<VolunteerValidator>): VolunteerValidator;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
