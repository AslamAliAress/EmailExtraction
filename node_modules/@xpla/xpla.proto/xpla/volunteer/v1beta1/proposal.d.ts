import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Description } from "../../../cosmos/staking/v1beta1/staking";
import { Any } from "../../../google/protobuf/any";
export declare const protobufPackage = "xpla.volunteer.v1beta1";
/** RegisterVolunteerValidatorProposal */
export interface RegisterVolunteerValidatorProposal {
    title: string;
    description: string;
    validatorDescription: Description | undefined;
    delegatorAddress: string;
    validatorAddress: string;
    pubkey: Any | undefined;
    amount: Coin | undefined;
}
/** RegisterVolunteerValidatorProposalWithDeposit */
export interface RegisterVolunteerValidatorProposalWithDeposit {
    title: string;
    description: string;
    validatorDescription: Description | undefined;
    delegatorAddress: string;
    validatorAddress: string;
    pubkey: Any | undefined;
    amount: Coin | undefined;
    deposit: string;
}
/** UnregisterVolunteerValidatorProposal */
export interface UnregisterVolunteerValidatorProposal {
    title: string;
    description: string;
    validatorAddress: string;
}
/** UnregisterVolunteerValidatorProposalWithDeposit */
export interface UnregisterVolunteerValidatorProposalWithDeposit {
    title: string;
    description: string;
    validatorAddress: string;
    deposit: string;
}
export declare const RegisterVolunteerValidatorProposal: {
    encode(message: RegisterVolunteerValidatorProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterVolunteerValidatorProposal;
    fromJSON(object: any): RegisterVolunteerValidatorProposal;
    toJSON(message: RegisterVolunteerValidatorProposal): unknown;
    create(base?: DeepPartial<RegisterVolunteerValidatorProposal>): RegisterVolunteerValidatorProposal;
    fromPartial(object: DeepPartial<RegisterVolunteerValidatorProposal>): RegisterVolunteerValidatorProposal;
};
export declare const RegisterVolunteerValidatorProposalWithDeposit: {
    encode(message: RegisterVolunteerValidatorProposalWithDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterVolunteerValidatorProposalWithDeposit;
    fromJSON(object: any): RegisterVolunteerValidatorProposalWithDeposit;
    toJSON(message: RegisterVolunteerValidatorProposalWithDeposit): unknown;
    create(base?: DeepPartial<RegisterVolunteerValidatorProposalWithDeposit>): RegisterVolunteerValidatorProposalWithDeposit;
    fromPartial(object: DeepPartial<RegisterVolunteerValidatorProposalWithDeposit>): RegisterVolunteerValidatorProposalWithDeposit;
};
export declare const UnregisterVolunteerValidatorProposal: {
    encode(message: UnregisterVolunteerValidatorProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterVolunteerValidatorProposal;
    fromJSON(object: any): UnregisterVolunteerValidatorProposal;
    toJSON(message: UnregisterVolunteerValidatorProposal): unknown;
    create(base?: DeepPartial<UnregisterVolunteerValidatorProposal>): UnregisterVolunteerValidatorProposal;
    fromPartial(object: DeepPartial<UnregisterVolunteerValidatorProposal>): UnregisterVolunteerValidatorProposal;
};
export declare const UnregisterVolunteerValidatorProposalWithDeposit: {
    encode(message: UnregisterVolunteerValidatorProposalWithDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterVolunteerValidatorProposalWithDeposit;
    fromJSON(object: any): UnregisterVolunteerValidatorProposalWithDeposit;
    toJSON(message: UnregisterVolunteerValidatorProposalWithDeposit): unknown;
    create(base?: DeepPartial<UnregisterVolunteerValidatorProposalWithDeposit>): UnregisterVolunteerValidatorProposalWithDeposit;
    fromPartial(object: DeepPartial<UnregisterVolunteerValidatorProposalWithDeposit>): UnregisterVolunteerValidatorProposalWithDeposit;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
