import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "ethermint.types.v1";
/** TxResult is the value stored in eth tx indexer */
export interface TxResult {
    /** height of the blockchain */
    height: Long;
    /** tx_index of the cosmos transaction */
    txIndex: number;
    /** msg_index in a batch transaction */
    msgIndex: number;
    /**
     * eth_tx_index is the index in the list of valid eth tx in the block,
     * aka. the transaction list returned by eth_getBlock api.
     */
    ethTxIndex: number;
    /** failed is true if the eth transaction did not go succeed */
    failed: boolean;
    /**
     * gas_used by the transaction. If it exceeds the block gas limit,
     * it's set to gas limit, which is what's actually deducted by ante handler.
     */
    gasUsed: Long;
    /**
     * cumulative_gas_used specifies the cumulated amount of gas used for all
     * processed messages within the current batch transaction.
     */
    cumulativeGasUsed: Long;
}
export declare const TxResult: {
    encode(message: TxResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxResult;
    fromJSON(object: any): TxResult;
    toJSON(message: TxResult): unknown;
    create(base?: DeepPartial<TxResult>): TxResult;
    fromPartial(object: DeepPartial<TxResult>): TxResult;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
