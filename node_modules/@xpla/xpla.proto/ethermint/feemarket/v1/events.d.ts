import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "ethermint.feemarket.v1";
/** EventFeeMarket is the event type for the fee market module */
export interface EventFeeMarket {
    /** base_fee for EIP-1559 blocks */
    baseFee: string;
}
/** EventBlockGas defines an Ethereum block gas event */
export interface EventBlockGas {
    /** height of the block */
    height: string;
    /** amount of gas wanted by the block */
    amount: string;
}
export declare const EventFeeMarket: {
    encode(message: EventFeeMarket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventFeeMarket;
    fromJSON(object: any): EventFeeMarket;
    toJSON(message: EventFeeMarket): unknown;
    create(base?: DeepPartial<EventFeeMarket>): EventFeeMarket;
    fromPartial(object: DeepPartial<EventFeeMarket>): EventFeeMarket;
};
export declare const EventBlockGas: {
    encode(message: EventBlockGas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBlockGas;
    fromJSON(object: any): EventBlockGas;
    toJSON(message: EventBlockGas): unknown;
    create(base?: DeepPartial<EventBlockGas>): EventBlockGas;
    fromPartial(object: DeepPartial<EventBlockGas>): EventBlockGas;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
