"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceConfig = exports.AccessTuple = exports.TxResult = exports.Log = exports.TransactionLogs = exports.State = exports.ChainConfig = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "ethermint.evm.v1";
function createBaseParams() {
    return {
        evmDenom: "",
        enableCreate: false,
        enableCall: false,
        extraEips: [],
        chainConfig: undefined,
        allowUnprotectedTxs: false,
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.evmDenom !== "") {
            writer.uint32(10).string(message.evmDenom);
        }
        if (message.enableCreate === true) {
            writer.uint32(16).bool(message.enableCreate);
        }
        if (message.enableCall === true) {
            writer.uint32(24).bool(message.enableCall);
        }
        writer.uint32(34).fork();
        for (const v of message.extraEips) {
            writer.int64(v);
        }
        writer.ldelim();
        if (message.chainConfig !== undefined) {
            exports.ChainConfig.encode(message.chainConfig, writer.uint32(42).fork()).ldelim();
        }
        if (message.allowUnprotectedTxs === true) {
            writer.uint32(48).bool(message.allowUnprotectedTxs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.evmDenom = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.enableCreate = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.enableCall = reader.bool();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.extraEips.push(reader.int64());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.extraEips.push(reader.int64());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.chainConfig = exports.ChainConfig.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.allowUnprotectedTxs = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            evmDenom: isSet(object.evmDenom) ? globalThis.String(object.evmDenom) : "",
            enableCreate: isSet(object.enableCreate) ? globalThis.Boolean(object.enableCreate) : false,
            enableCall: isSet(object.enableCall) ? globalThis.Boolean(object.enableCall) : false,
            extraEips: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extraEips) ? object.extraEips.map((e) => long_1.default.fromValue(e)) : [],
            chainConfig: isSet(object.chainConfig) ? exports.ChainConfig.fromJSON(object.chainConfig) : undefined,
            allowUnprotectedTxs: isSet(object.allowUnprotectedTxs) ? globalThis.Boolean(object.allowUnprotectedTxs) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.evmDenom !== "") {
            obj.evmDenom = message.evmDenom;
        }
        if (message.enableCreate === true) {
            obj.enableCreate = message.enableCreate;
        }
        if (message.enableCall === true) {
            obj.enableCall = message.enableCall;
        }
        if ((_a = message.extraEips) === null || _a === void 0 ? void 0 : _a.length) {
            obj.extraEips = message.extraEips.map((e) => (e || long_1.default.ZERO).toString());
        }
        if (message.chainConfig !== undefined) {
            obj.chainConfig = exports.ChainConfig.toJSON(message.chainConfig);
        }
        if (message.allowUnprotectedTxs === true) {
            obj.allowUnprotectedTxs = message.allowUnprotectedTxs;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseParams();
        message.evmDenom = (_a = object.evmDenom) !== null && _a !== void 0 ? _a : "";
        message.enableCreate = (_b = object.enableCreate) !== null && _b !== void 0 ? _b : false;
        message.enableCall = (_c = object.enableCall) !== null && _c !== void 0 ? _c : false;
        message.extraEips = ((_d = object.extraEips) === null || _d === void 0 ? void 0 : _d.map((e) => long_1.default.fromValue(e))) || [];
        message.chainConfig = (object.chainConfig !== undefined && object.chainConfig !== null)
            ? exports.ChainConfig.fromPartial(object.chainConfig)
            : undefined;
        message.allowUnprotectedTxs = (_e = object.allowUnprotectedTxs) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseChainConfig() {
    return {
        homesteadBlock: "",
        daoForkBlock: "",
        daoForkSupport: false,
        eip150Block: "",
        eip150Hash: "",
        eip155Block: "",
        eip158Block: "",
        byzantiumBlock: "",
        constantinopleBlock: "",
        petersburgBlock: "",
        istanbulBlock: "",
        muirGlacierBlock: "",
        berlinBlock: "",
        londonBlock: "",
        arrowGlacierBlock: "",
        grayGlacierBlock: "",
        mergeNetsplitBlock: "",
        shanghaiBlock: "",
        cancunBlock: "",
    };
}
exports.ChainConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.homesteadBlock !== "") {
            writer.uint32(10).string(message.homesteadBlock);
        }
        if (message.daoForkBlock !== "") {
            writer.uint32(18).string(message.daoForkBlock);
        }
        if (message.daoForkSupport === true) {
            writer.uint32(24).bool(message.daoForkSupport);
        }
        if (message.eip150Block !== "") {
            writer.uint32(34).string(message.eip150Block);
        }
        if (message.eip150Hash !== "") {
            writer.uint32(42).string(message.eip150Hash);
        }
        if (message.eip155Block !== "") {
            writer.uint32(50).string(message.eip155Block);
        }
        if (message.eip158Block !== "") {
            writer.uint32(58).string(message.eip158Block);
        }
        if (message.byzantiumBlock !== "") {
            writer.uint32(66).string(message.byzantiumBlock);
        }
        if (message.constantinopleBlock !== "") {
            writer.uint32(74).string(message.constantinopleBlock);
        }
        if (message.petersburgBlock !== "") {
            writer.uint32(82).string(message.petersburgBlock);
        }
        if (message.istanbulBlock !== "") {
            writer.uint32(90).string(message.istanbulBlock);
        }
        if (message.muirGlacierBlock !== "") {
            writer.uint32(98).string(message.muirGlacierBlock);
        }
        if (message.berlinBlock !== "") {
            writer.uint32(106).string(message.berlinBlock);
        }
        if (message.londonBlock !== "") {
            writer.uint32(138).string(message.londonBlock);
        }
        if (message.arrowGlacierBlock !== "") {
            writer.uint32(146).string(message.arrowGlacierBlock);
        }
        if (message.grayGlacierBlock !== "") {
            writer.uint32(162).string(message.grayGlacierBlock);
        }
        if (message.mergeNetsplitBlock !== "") {
            writer.uint32(170).string(message.mergeNetsplitBlock);
        }
        if (message.shanghaiBlock !== "") {
            writer.uint32(178).string(message.shanghaiBlock);
        }
        if (message.cancunBlock !== "") {
            writer.uint32(186).string(message.cancunBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChainConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homesteadBlock = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.daoForkBlock = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.daoForkSupport = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eip150Block = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.eip150Hash = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.eip155Block = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.eip158Block = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.byzantiumBlock = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.constantinopleBlock = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.petersburgBlock = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.istanbulBlock = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.muirGlacierBlock = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.berlinBlock = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.londonBlock = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.arrowGlacierBlock = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.grayGlacierBlock = reader.string();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.mergeNetsplitBlock = reader.string();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.shanghaiBlock = reader.string();
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.cancunBlock = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homesteadBlock: isSet(object.homesteadBlock) ? globalThis.String(object.homesteadBlock) : "",
            daoForkBlock: isSet(object.daoForkBlock) ? globalThis.String(object.daoForkBlock) : "",
            daoForkSupport: isSet(object.daoForkSupport) ? globalThis.Boolean(object.daoForkSupport) : false,
            eip150Block: isSet(object.eip150Block) ? globalThis.String(object.eip150Block) : "",
            eip150Hash: isSet(object.eip150Hash) ? globalThis.String(object.eip150Hash) : "",
            eip155Block: isSet(object.eip155Block) ? globalThis.String(object.eip155Block) : "",
            eip158Block: isSet(object.eip158Block) ? globalThis.String(object.eip158Block) : "",
            byzantiumBlock: isSet(object.byzantiumBlock) ? globalThis.String(object.byzantiumBlock) : "",
            constantinopleBlock: isSet(object.constantinopleBlock) ? globalThis.String(object.constantinopleBlock) : "",
            petersburgBlock: isSet(object.petersburgBlock) ? globalThis.String(object.petersburgBlock) : "",
            istanbulBlock: isSet(object.istanbulBlock) ? globalThis.String(object.istanbulBlock) : "",
            muirGlacierBlock: isSet(object.muirGlacierBlock) ? globalThis.String(object.muirGlacierBlock) : "",
            berlinBlock: isSet(object.berlinBlock) ? globalThis.String(object.berlinBlock) : "",
            londonBlock: isSet(object.londonBlock) ? globalThis.String(object.londonBlock) : "",
            arrowGlacierBlock: isSet(object.arrowGlacierBlock) ? globalThis.String(object.arrowGlacierBlock) : "",
            grayGlacierBlock: isSet(object.grayGlacierBlock) ? globalThis.String(object.grayGlacierBlock) : "",
            mergeNetsplitBlock: isSet(object.mergeNetsplitBlock) ? globalThis.String(object.mergeNetsplitBlock) : "",
            shanghaiBlock: isSet(object.shanghaiBlock) ? globalThis.String(object.shanghaiBlock) : "",
            cancunBlock: isSet(object.cancunBlock) ? globalThis.String(object.cancunBlock) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homesteadBlock !== "") {
            obj.homesteadBlock = message.homesteadBlock;
        }
        if (message.daoForkBlock !== "") {
            obj.daoForkBlock = message.daoForkBlock;
        }
        if (message.daoForkSupport === true) {
            obj.daoForkSupport = message.daoForkSupport;
        }
        if (message.eip150Block !== "") {
            obj.eip150Block = message.eip150Block;
        }
        if (message.eip150Hash !== "") {
            obj.eip150Hash = message.eip150Hash;
        }
        if (message.eip155Block !== "") {
            obj.eip155Block = message.eip155Block;
        }
        if (message.eip158Block !== "") {
            obj.eip158Block = message.eip158Block;
        }
        if (message.byzantiumBlock !== "") {
            obj.byzantiumBlock = message.byzantiumBlock;
        }
        if (message.constantinopleBlock !== "") {
            obj.constantinopleBlock = message.constantinopleBlock;
        }
        if (message.petersburgBlock !== "") {
            obj.petersburgBlock = message.petersburgBlock;
        }
        if (message.istanbulBlock !== "") {
            obj.istanbulBlock = message.istanbulBlock;
        }
        if (message.muirGlacierBlock !== "") {
            obj.muirGlacierBlock = message.muirGlacierBlock;
        }
        if (message.berlinBlock !== "") {
            obj.berlinBlock = message.berlinBlock;
        }
        if (message.londonBlock !== "") {
            obj.londonBlock = message.londonBlock;
        }
        if (message.arrowGlacierBlock !== "") {
            obj.arrowGlacierBlock = message.arrowGlacierBlock;
        }
        if (message.grayGlacierBlock !== "") {
            obj.grayGlacierBlock = message.grayGlacierBlock;
        }
        if (message.mergeNetsplitBlock !== "") {
            obj.mergeNetsplitBlock = message.mergeNetsplitBlock;
        }
        if (message.shanghaiBlock !== "") {
            obj.shanghaiBlock = message.shanghaiBlock;
        }
        if (message.cancunBlock !== "") {
            obj.cancunBlock = message.cancunBlock;
        }
        return obj;
    },
    create(base) {
        return exports.ChainConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseChainConfig();
        message.homesteadBlock = (_a = object.homesteadBlock) !== null && _a !== void 0 ? _a : "";
        message.daoForkBlock = (_b = object.daoForkBlock) !== null && _b !== void 0 ? _b : "";
        message.daoForkSupport = (_c = object.daoForkSupport) !== null && _c !== void 0 ? _c : false;
        message.eip150Block = (_d = object.eip150Block) !== null && _d !== void 0 ? _d : "";
        message.eip150Hash = (_e = object.eip150Hash) !== null && _e !== void 0 ? _e : "";
        message.eip155Block = (_f = object.eip155Block) !== null && _f !== void 0 ? _f : "";
        message.eip158Block = (_g = object.eip158Block) !== null && _g !== void 0 ? _g : "";
        message.byzantiumBlock = (_h = object.byzantiumBlock) !== null && _h !== void 0 ? _h : "";
        message.constantinopleBlock = (_j = object.constantinopleBlock) !== null && _j !== void 0 ? _j : "";
        message.petersburgBlock = (_k = object.petersburgBlock) !== null && _k !== void 0 ? _k : "";
        message.istanbulBlock = (_l = object.istanbulBlock) !== null && _l !== void 0 ? _l : "";
        message.muirGlacierBlock = (_m = object.muirGlacierBlock) !== null && _m !== void 0 ? _m : "";
        message.berlinBlock = (_o = object.berlinBlock) !== null && _o !== void 0 ? _o : "";
        message.londonBlock = (_p = object.londonBlock) !== null && _p !== void 0 ? _p : "";
        message.arrowGlacierBlock = (_q = object.arrowGlacierBlock) !== null && _q !== void 0 ? _q : "";
        message.grayGlacierBlock = (_r = object.grayGlacierBlock) !== null && _r !== void 0 ? _r : "";
        message.mergeNetsplitBlock = (_s = object.mergeNetsplitBlock) !== null && _s !== void 0 ? _s : "";
        message.shanghaiBlock = (_t = object.shanghaiBlock) !== null && _t !== void 0 ? _t : "";
        message.cancunBlock = (_u = object.cancunBlock) !== null && _u !== void 0 ? _u : "";
        return message;
    },
};
function createBaseState() {
    return { key: "", value: "" };
}
exports.State = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.State.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseState();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTransactionLogs() {
    return { hash: "", logs: [] };
}
exports.TransactionLogs = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        for (const v of message.logs) {
            exports.Log.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionLogs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.logs.push(exports.Log.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => exports.Log.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if ((_a = message.logs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.logs = message.logs.map((e) => exports.Log.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TransactionLogs.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTransactionLogs();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : "";
        message.logs = ((_b = object.logs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Log.fromPartial(e))) || [];
        return message;
    },
};
function createBaseLog() {
    return {
        address: "",
        topics: [],
        data: new Uint8Array(0),
        blockNumber: long_1.default.UZERO,
        txHash: "",
        txIndex: long_1.default.UZERO,
        blockHash: "",
        index: long_1.default.UZERO,
        removed: false,
    };
}
exports.Log = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.topics) {
            writer.uint32(18).string(v);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(32).uint64(message.blockNumber);
        }
        if (message.txHash !== "") {
            writer.uint32(42).string(message.txHash);
        }
        if (!message.txIndex.isZero()) {
            writer.uint32(48).uint64(message.txIndex);
        }
        if (message.blockHash !== "") {
            writer.uint32(58).string(message.blockHash);
        }
        if (!message.index.isZero()) {
            writer.uint32(64).uint64(message.index);
        }
        if (message.removed === true) {
            writer.uint32(72).bool(message.removed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topics.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.blockNumber = reader.uint64();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.txHash = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.txIndex = reader.uint64();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.index = reader.uint64();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.removed = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => globalThis.String(e)) : [],
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            blockNumber: isSet(object.blockNumber) ? long_1.default.fromValue(object.blockNumber) : long_1.default.UZERO,
            txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
            txIndex: isSet(object.txIndex) ? long_1.default.fromValue(object.txIndex) : long_1.default.UZERO,
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            index: isSet(object.index) ? long_1.default.fromValue(object.index) : long_1.default.UZERO,
            removed: isSet(object.removed) ? globalThis.Boolean(object.removed) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics;
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (!message.blockNumber.isZero()) {
            obj.blockNumber = (message.blockNumber || long_1.default.UZERO).toString();
        }
        if (message.txHash !== "") {
            obj.txHash = message.txHash;
        }
        if (!message.txIndex.isZero()) {
            obj.txIndex = (message.txIndex || long_1.default.UZERO).toString();
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (!message.index.isZero()) {
            obj.index = (message.index || long_1.default.UZERO).toString();
        }
        if (message.removed === true) {
            obj.removed = message.removed;
        }
        return obj;
    },
    create(base) {
        return exports.Log.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLog();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.topics = ((_b = object.topics) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.blockNumber = (object.blockNumber !== undefined && object.blockNumber !== null)
            ? long_1.default.fromValue(object.blockNumber)
            : long_1.default.UZERO;
        message.txHash = (_d = object.txHash) !== null && _d !== void 0 ? _d : "";
        message.txIndex = (object.txIndex !== undefined && object.txIndex !== null)
            ? long_1.default.fromValue(object.txIndex)
            : long_1.default.UZERO;
        message.blockHash = (_e = object.blockHash) !== null && _e !== void 0 ? _e : "";
        message.index = (object.index !== undefined && object.index !== null) ? long_1.default.fromValue(object.index) : long_1.default.UZERO;
        message.removed = (_f = object.removed) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseTxResult() {
    return {
        contractAddress: "",
        bloom: new Uint8Array(0),
        txLogs: undefined,
        ret: new Uint8Array(0),
        reverted: false,
        gasUsed: long_1.default.UZERO,
    };
}
exports.TxResult = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.bloom.length !== 0) {
            writer.uint32(18).bytes(message.bloom);
        }
        if (message.txLogs !== undefined) {
            exports.TransactionLogs.encode(message.txLogs, writer.uint32(26).fork()).ldelim();
        }
        if (message.ret.length !== 0) {
            writer.uint32(34).bytes(message.ret);
        }
        if (message.reverted === true) {
            writer.uint32(40).bool(message.reverted);
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(48).uint64(message.gasUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTxResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.bloom = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.txLogs = exports.TransactionLogs.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.ret = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.reverted = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
            bloom: isSet(object.bloom) ? bytesFromBase64(object.bloom) : new Uint8Array(0),
            txLogs: isSet(object.txLogs) ? exports.TransactionLogs.fromJSON(object.txLogs) : undefined,
            ret: isSet(object.ret) ? bytesFromBase64(object.ret) : new Uint8Array(0),
            reverted: isSet(object.reverted) ? globalThis.Boolean(object.reverted) : false,
            gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddress !== "") {
            obj.contractAddress = message.contractAddress;
        }
        if (message.bloom.length !== 0) {
            obj.bloom = base64FromBytes(message.bloom);
        }
        if (message.txLogs !== undefined) {
            obj.txLogs = exports.TransactionLogs.toJSON(message.txLogs);
        }
        if (message.ret.length !== 0) {
            obj.ret = base64FromBytes(message.ret);
        }
        if (message.reverted === true) {
            obj.reverted = message.reverted;
        }
        if (!message.gasUsed.isZero()) {
            obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.TxResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTxResult();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.bloom = (_b = object.bloom) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.txLogs = (object.txLogs !== undefined && object.txLogs !== null)
            ? exports.TransactionLogs.fromPartial(object.txLogs)
            : undefined;
        message.ret = (_c = object.ret) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.reverted = (_d = object.reverted) !== null && _d !== void 0 ? _d : false;
        message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
            ? long_1.default.fromValue(object.gasUsed)
            : long_1.default.UZERO;
        return message;
    },
};
function createBaseAccessTuple() {
    return { address: "", storageKeys: [] };
}
exports.AccessTuple = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.storageKeys) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessTuple();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.storageKeys.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            storageKeys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.storageKeys)
                ? object.storageKeys.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if ((_a = message.storageKeys) === null || _a === void 0 ? void 0 : _a.length) {
            obj.storageKeys = message.storageKeys;
        }
        return obj;
    },
    create(base) {
        return exports.AccessTuple.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccessTuple();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.storageKeys = ((_b = object.storageKeys) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseTraceConfig() {
    return {
        tracer: "",
        timeout: "",
        reexec: long_1.default.UZERO,
        disableStack: false,
        disableStorage: false,
        debug: false,
        limit: 0,
        overrides: undefined,
        enableMemory: false,
        enableReturnData: false,
        tracerJsonConfig: "",
    };
}
exports.TraceConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tracer !== "") {
            writer.uint32(10).string(message.tracer);
        }
        if (message.timeout !== "") {
            writer.uint32(18).string(message.timeout);
        }
        if (!message.reexec.isZero()) {
            writer.uint32(24).uint64(message.reexec);
        }
        if (message.disableStack === true) {
            writer.uint32(40).bool(message.disableStack);
        }
        if (message.disableStorage === true) {
            writer.uint32(48).bool(message.disableStorage);
        }
        if (message.debug === true) {
            writer.uint32(64).bool(message.debug);
        }
        if (message.limit !== 0) {
            writer.uint32(72).int32(message.limit);
        }
        if (message.overrides !== undefined) {
            exports.ChainConfig.encode(message.overrides, writer.uint32(82).fork()).ldelim();
        }
        if (message.enableMemory === true) {
            writer.uint32(88).bool(message.enableMemory);
        }
        if (message.enableReturnData === true) {
            writer.uint32(96).bool(message.enableReturnData);
        }
        if (message.tracerJsonConfig !== "") {
            writer.uint32(106).string(message.tracerJsonConfig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tracer = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timeout = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.reexec = reader.uint64();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.disableStack = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.disableStorage = reader.bool();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.debug = reader.bool();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.overrides = exports.ChainConfig.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.enableMemory = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.enableReturnData = reader.bool();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.tracerJsonConfig = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tracer: isSet(object.tracer) ? globalThis.String(object.tracer) : "",
            timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
            reexec: isSet(object.reexec) ? long_1.default.fromValue(object.reexec) : long_1.default.UZERO,
            disableStack: isSet(object.disableStack) ? globalThis.Boolean(object.disableStack) : false,
            disableStorage: isSet(object.disableStorage) ? globalThis.Boolean(object.disableStorage) : false,
            debug: isSet(object.debug) ? globalThis.Boolean(object.debug) : false,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            overrides: isSet(object.overrides) ? exports.ChainConfig.fromJSON(object.overrides) : undefined,
            enableMemory: isSet(object.enableMemory) ? globalThis.Boolean(object.enableMemory) : false,
            enableReturnData: isSet(object.enableReturnData) ? globalThis.Boolean(object.enableReturnData) : false,
            tracerJsonConfig: isSet(object.tracerJsonConfig) ? globalThis.String(object.tracerJsonConfig) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tracer !== "") {
            obj.tracer = message.tracer;
        }
        if (message.timeout !== "") {
            obj.timeout = message.timeout;
        }
        if (!message.reexec.isZero()) {
            obj.reexec = (message.reexec || long_1.default.UZERO).toString();
        }
        if (message.disableStack === true) {
            obj.disableStack = message.disableStack;
        }
        if (message.disableStorage === true) {
            obj.disableStorage = message.disableStorage;
        }
        if (message.debug === true) {
            obj.debug = message.debug;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.overrides !== undefined) {
            obj.overrides = exports.ChainConfig.toJSON(message.overrides);
        }
        if (message.enableMemory === true) {
            obj.enableMemory = message.enableMemory;
        }
        if (message.enableReturnData === true) {
            obj.enableReturnData = message.enableReturnData;
        }
        if (message.tracerJsonConfig !== "") {
            obj.tracerJsonConfig = message.tracerJsonConfig;
        }
        return obj;
    },
    create(base) {
        return exports.TraceConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTraceConfig();
        message.tracer = (_a = object.tracer) !== null && _a !== void 0 ? _a : "";
        message.timeout = (_b = object.timeout) !== null && _b !== void 0 ? _b : "";
        message.reexec = (object.reexec !== undefined && object.reexec !== null)
            ? long_1.default.fromValue(object.reexec)
            : long_1.default.UZERO;
        message.disableStack = (_c = object.disableStack) !== null && _c !== void 0 ? _c : false;
        message.disableStorage = (_d = object.disableStorage) !== null && _d !== void 0 ? _d : false;
        message.debug = (_e = object.debug) !== null && _e !== void 0 ? _e : false;
        message.limit = (_f = object.limit) !== null && _f !== void 0 ? _f : 0;
        message.overrides = (object.overrides !== undefined && object.overrides !== null)
            ? exports.ChainConfig.fromPartial(object.overrides)
            : undefined;
        message.enableMemory = (_g = object.enableMemory) !== null && _g !== void 0 ? _g : false;
        message.enableReturnData = (_h = object.enableReturnData) !== null && _h !== void 0 ? _h : false;
        message.tracerJsonConfig = (_j = object.tracerJsonConfig) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=evm.js.map