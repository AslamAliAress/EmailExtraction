"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventConvertERC20 = exports.EventConvertCoin = exports.EventToggleTokenConversion = exports.EventRegisterPair = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "ethermint.erc20.v1";
function createBaseEventRegisterPair() {
    return { denom: "", erc20Address: "" };
}
exports.EventRegisterPair = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.erc20Address !== "") {
            writer.uint32(18).string(message.erc20Address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRegisterPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.erc20Address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            erc20Address: isSet(object.erc20Address) ? globalThis.String(object.erc20Address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.erc20Address !== "") {
            obj.erc20Address = message.erc20Address;
        }
        return obj;
    },
    create(base) {
        return exports.EventRegisterPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventRegisterPair();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.erc20Address = (_b = object.erc20Address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventToggleTokenConversion() {
    return { denom: "", erc20Address: "" };
}
exports.EventToggleTokenConversion = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.erc20Address !== "") {
            writer.uint32(18).string(message.erc20Address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventToggleTokenConversion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.erc20Address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            erc20Address: isSet(object.erc20Address) ? globalThis.String(object.erc20Address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.erc20Address !== "") {
            obj.erc20Address = message.erc20Address;
        }
        return obj;
    },
    create(base) {
        return exports.EventToggleTokenConversion.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventToggleTokenConversion();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.erc20Address = (_b = object.erc20Address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventConvertCoin() {
    return { sender: "", receiver: "", amount: "", denom: "", erc20Address: "" };
}
exports.EventConvertCoin = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(18).string(message.receiver);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        if (message.denom !== "") {
            writer.uint32(34).string(message.denom);
        }
        if (message.erc20Address !== "") {
            writer.uint32(42).string(message.erc20Address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventConvertCoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.erc20Address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            erc20Address: isSet(object.erc20Address) ? globalThis.String(object.erc20Address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.receiver !== "") {
            obj.receiver = message.receiver;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.erc20Address !== "") {
            obj.erc20Address = message.erc20Address;
        }
        return obj;
    },
    create(base) {
        return exports.EventConvertCoin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventConvertCoin();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.receiver = (_b = object.receiver) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        message.denom = (_d = object.denom) !== null && _d !== void 0 ? _d : "";
        message.erc20Address = (_e = object.erc20Address) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseEventConvertERC20() {
    return { sender: "", receiver: "", amount: "", denom: "", contractAddress: "" };
}
exports.EventConvertERC20 = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(18).string(message.receiver);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        if (message.denom !== "") {
            writer.uint32(34).string(message.denom);
        }
        if (message.contractAddress !== "") {
            writer.uint32(42).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventConvertERC20();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.receiver !== "") {
            obj.receiver = message.receiver;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.contractAddress !== "") {
            obj.contractAddress = message.contractAddress;
        }
        return obj;
    },
    create(base) {
        return exports.EventConvertERC20.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventConvertERC20();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.receiver = (_b = object.receiver) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        message.denom = (_d = object.denom) !== null && _d !== void 0 ? _d : "";
        message.contractAddress = (_e = object.contractAddress) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map