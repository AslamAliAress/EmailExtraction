import Long from "long";
import _m0 from "protobufjs/minimal";
import { TokenPair } from "./erc20";
export declare const protobufPackage = "ethermint.erc20.v1";
/** GenesisState defines the module's genesis state. */
export interface GenesisState {
    /** params are the erc20 module parameters at genesis */
    params: Params | undefined;
    /** token_pairs is a slice of the registered token pairs at genesis */
    tokenPairs: TokenPair[];
}
/** Params defines the erc20 module params */
export interface Params {
    /** enable_erc20 is the parameter to enable the conversion of Cosmos coins <--> ERC20 tokens. */
    enableErc20: boolean;
    /**
     * enable_evm_hook is the parameter to enable the EVM hook that converts an ERC20 token to a Cosmos
     * Coin by transferring the Tokens through a MsgEthereumTx to the ModuleAddress Ethereum address.
     */
    enableEvmHook: boolean;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: DeepPartial<GenesisState>): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create(base?: DeepPartial<Params>): Params;
    fromPartial(object: DeepPartial<Params>): Params;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
