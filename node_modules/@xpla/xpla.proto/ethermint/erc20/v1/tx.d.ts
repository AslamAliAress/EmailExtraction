import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./genesis";
export declare const protobufPackage = "ethermint.erc20.v1";
/** MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token */
export interface MsgConvertCoin {
    /**
     * coin is a Cosmos coin whose denomination is registered in a token pair. The coin
     * amount defines the amount of coins to convert.
     */
    coin: Coin | undefined;
    /** receiver is the hex address to receive ERC20 token */
    receiver: string;
    /** sender is the cosmos bech32 address from the owner of the given Cosmos coins */
    sender: string;
}
/** MsgConvertCoinResponse returns no fields */
export interface MsgConvertCoinResponse {
}
/**
 * MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
 * coin.
 */
export interface MsgConvertERC20 {
    /** contract_address of an ERC20 token contract, that is registered in a token pair */
    contractAddress: string;
    /** amount of ERC20 tokens to convert */
    amount: string;
    /** receiver is the bech32 address to receive native Cosmos coins */
    receiver: string;
    /** sender is the hex address from the owner of the given ERC20 tokens */
    sender: string;
}
/** MsgConvertERC20Response returns no fields */
export interface MsgConvertERC20Response {
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /**
     * params defines the x/evm parameters to update.
     * NOTE: All parameters must be supplied.
     */
    params: Params | undefined;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgConvertCoin: {
    encode(message: MsgConvertCoin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCoin;
    fromJSON(object: any): MsgConvertCoin;
    toJSON(message: MsgConvertCoin): unknown;
    create(base?: DeepPartial<MsgConvertCoin>): MsgConvertCoin;
    fromPartial(object: DeepPartial<MsgConvertCoin>): MsgConvertCoin;
};
export declare const MsgConvertCoinResponse: {
    encode(_: MsgConvertCoinResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCoinResponse;
    fromJSON(_: any): MsgConvertCoinResponse;
    toJSON(_: MsgConvertCoinResponse): unknown;
    create(base?: DeepPartial<MsgConvertCoinResponse>): MsgConvertCoinResponse;
    fromPartial(_: DeepPartial<MsgConvertCoinResponse>): MsgConvertCoinResponse;
};
export declare const MsgConvertERC20: {
    encode(message: MsgConvertERC20, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertERC20;
    fromJSON(object: any): MsgConvertERC20;
    toJSON(message: MsgConvertERC20): unknown;
    create(base?: DeepPartial<MsgConvertERC20>): MsgConvertERC20;
    fromPartial(object: DeepPartial<MsgConvertERC20>): MsgConvertERC20;
};
export declare const MsgConvertERC20Response: {
    encode(_: MsgConvertERC20Response, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertERC20Response;
    fromJSON(_: any): MsgConvertERC20Response;
    toJSON(_: MsgConvertERC20Response): unknown;
    create(base?: DeepPartial<MsgConvertERC20Response>): MsgConvertERC20Response;
    fromPartial(_: DeepPartial<MsgConvertERC20Response>): MsgConvertERC20Response;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
    fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
};
/** Msg defines the erc20 Msg service. */
export interface Msg {
    /**
     * ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
     * that is registered on the token mapping.
     */
    ConvertCoin(request: DeepPartial<MsgConvertCoin>, metadata?: grpc.Metadata): Promise<MsgConvertCoinResponse>;
    /**
     * ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
     * contract that is registered on the token mapping.
     */
    ConvertERC20(request: DeepPartial<MsgConvertERC20>, metadata?: grpc.Metadata): Promise<MsgConvertERC20Response>;
    /**
     * UpdateParams defined a governance operation for updating the x/erc20 module parameters.
     * The authority is hard-coded to the Cosmos SDK x/gov module account
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    ConvertCoin(request: DeepPartial<MsgConvertCoin>, metadata?: grpc.Metadata): Promise<MsgConvertCoinResponse>;
    ConvertERC20(request: DeepPartial<MsgConvertERC20>, metadata?: grpc.Metadata): Promise<MsgConvertERC20Response>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgConvertCoinDesc: UnaryMethodDefinitionish;
export declare const MsgConvertERC20Desc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
