import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "ethermint.erc20.v1";
/** EventRegisterPair is an event emitted when a coin is registered. */
export interface EventRegisterPair {
    /** denom is the coin's denomination. */
    denom: string;
    /** erc20_address is the ERC20 contract address. */
    erc20Address: string;
}
/** EventToggleTokenConversion is an event emitted when a coin's token conversion is toggled. */
export interface EventToggleTokenConversion {
    /** denom is the coin's denomination. */
    denom: string;
    /** erc20_address is the ERC20 contract address. */
    erc20Address: string;
}
/** EventConvertCoin is an event emitted when a coin is converted. */
export interface EventConvertCoin {
    /** sender is the sender's address. */
    sender: string;
    /** receiver is the receiver's address. */
    receiver: string;
    /** amount is the amount of coins to be converted. */
    amount: string;
    /** denom is the coin's denomination. */
    denom: string;
    /** erc20_address is the ERC20 contract address. */
    erc20Address: string;
}
/** EventConvertERC20 is an event emitted when an ERC20 is converted. */
export interface EventConvertERC20 {
    /** sender is the sender's address. */
    sender: string;
    /** receiver is the receiver's address. */
    receiver: string;
    /** amount is the amount of coins to be converted. */
    amount: string;
    /** denom is the coin's denomination. */
    denom: string;
    /** contract_address of an ERC20 token contract, that is registered in a token pair */
    contractAddress: string;
}
export declare const EventRegisterPair: {
    encode(message: EventRegisterPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventRegisterPair;
    fromJSON(object: any): EventRegisterPair;
    toJSON(message: EventRegisterPair): unknown;
    create(base?: DeepPartial<EventRegisterPair>): EventRegisterPair;
    fromPartial(object: DeepPartial<EventRegisterPair>): EventRegisterPair;
};
export declare const EventToggleTokenConversion: {
    encode(message: EventToggleTokenConversion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventToggleTokenConversion;
    fromJSON(object: any): EventToggleTokenConversion;
    toJSON(message: EventToggleTokenConversion): unknown;
    create(base?: DeepPartial<EventToggleTokenConversion>): EventToggleTokenConversion;
    fromPartial(object: DeepPartial<EventToggleTokenConversion>): EventToggleTokenConversion;
};
export declare const EventConvertCoin: {
    encode(message: EventConvertCoin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventConvertCoin;
    fromJSON(object: any): EventConvertCoin;
    toJSON(message: EventConvertCoin): unknown;
    create(base?: DeepPartial<EventConvertCoin>): EventConvertCoin;
    fromPartial(object: DeepPartial<EventConvertCoin>): EventConvertCoin;
};
export declare const EventConvertERC20: {
    encode(message: EventConvertERC20, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventConvertERC20;
    fromJSON(object: any): EventConvertERC20;
    toJSON(message: EventConvertERC20): unknown;
    create(base?: DeepPartial<EventConvertERC20>): EventConvertERC20;
    fromPartial(object: DeepPartial<EventConvertERC20>): EventConvertERC20;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
