"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalMetadata = exports.ToggleTokenConversionProposal = exports.RegisterERC20Proposal = exports.RegisterCoinProposal = exports.TokenPair = exports.ownerToJSON = exports.ownerFromJSON = exports.Owner = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const bank_1 = require("../../../cosmos/bank/v1beta1/bank");
exports.protobufPackage = "ethermint.erc20.v1";
/** Owner enumerates the ownership of a ERC20 contract. */
var Owner;
(function (Owner) {
    /** OWNER_UNSPECIFIED - OWNER_UNSPECIFIED defines an invalid/undefined owner. */
    Owner[Owner["OWNER_UNSPECIFIED"] = 0] = "OWNER_UNSPECIFIED";
    /** OWNER_MODULE - OWNER_MODULE - erc20 is owned by the erc20 module account. */
    Owner[Owner["OWNER_MODULE"] = 1] = "OWNER_MODULE";
    /** OWNER_EXTERNAL - OWNER_EXTERNAL - erc20 is owned by an external account. */
    Owner[Owner["OWNER_EXTERNAL"] = 2] = "OWNER_EXTERNAL";
    Owner[Owner["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Owner || (exports.Owner = Owner = {}));
function ownerFromJSON(object) {
    switch (object) {
        case 0:
        case "OWNER_UNSPECIFIED":
            return Owner.OWNER_UNSPECIFIED;
        case 1:
        case "OWNER_MODULE":
            return Owner.OWNER_MODULE;
        case 2:
        case "OWNER_EXTERNAL":
            return Owner.OWNER_EXTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Owner.UNRECOGNIZED;
    }
}
exports.ownerFromJSON = ownerFromJSON;
function ownerToJSON(object) {
    switch (object) {
        case Owner.OWNER_UNSPECIFIED:
            return "OWNER_UNSPECIFIED";
        case Owner.OWNER_MODULE:
            return "OWNER_MODULE";
        case Owner.OWNER_EXTERNAL:
            return "OWNER_EXTERNAL";
        case Owner.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.ownerToJSON = ownerToJSON;
function createBaseTokenPair() {
    return { erc20Address: "", denom: "", enabled: false, contractOwner: 0 };
}
exports.TokenPair = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.erc20Address !== "") {
            writer.uint32(10).string(message.erc20Address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.enabled === true) {
            writer.uint32(24).bool(message.enabled);
        }
        if (message.contractOwner !== 0) {
            writer.uint32(32).int32(message.contractOwner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.erc20Address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.contractOwner = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            erc20Address: isSet(object.erc20Address) ? globalThis.String(object.erc20Address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            contractOwner: isSet(object.contractOwner) ? ownerFromJSON(object.contractOwner) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.erc20Address !== "") {
            obj.erc20Address = message.erc20Address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.enabled === true) {
            obj.enabled = message.enabled;
        }
        if (message.contractOwner !== 0) {
            obj.contractOwner = ownerToJSON(message.contractOwner);
        }
        return obj;
    },
    create(base) {
        return exports.TokenPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTokenPair();
        message.erc20Address = (_a = object.erc20Address) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.enabled = (_c = object.enabled) !== null && _c !== void 0 ? _c : false;
        message.contractOwner = (_d = object.contractOwner) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseRegisterCoinProposal() {
    return { title: "", description: "", metadata: [] };
}
exports.RegisterCoinProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.metadata) {
            bank_1.Metadata.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterCoinProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadata.push(bank_1.Metadata.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            metadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.metadata) ? object.metadata.map((e) => bank_1.Metadata.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.metadata) === null || _a === void 0 ? void 0 : _a.length) {
            obj.metadata = message.metadata.map((e) => bank_1.Metadata.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RegisterCoinProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRegisterCoinProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.metadata = ((_c = object.metadata) === null || _c === void 0 ? void 0 : _c.map((e) => bank_1.Metadata.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRegisterERC20Proposal() {
    return { title: "", description: "", erc20addresses: [] };
}
exports.RegisterERC20Proposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.erc20addresses) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterERC20Proposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.erc20addresses.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            erc20addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.erc20addresses)
                ? object.erc20addresses.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.erc20addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.erc20addresses = message.erc20addresses;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterERC20Proposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRegisterERC20Proposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.erc20addresses = ((_c = object.erc20addresses) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseToggleTokenConversionProposal() {
    return { title: "", description: "", token: "" };
}
exports.ToggleTokenConversionProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.token !== "") {
            writer.uint32(26).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToggleTokenConversionProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.ToggleTokenConversionProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseToggleTokenConversionProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.token = (_c = object.token) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseProposalMetadata() {
    return { metadata: [] };
}
exports.ProposalMetadata = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.metadata) {
            bank_1.Metadata.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata.push(bank_1.Metadata.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.metadata) ? object.metadata.map((e) => bank_1.Metadata.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.metadata) === null || _a === void 0 ? void 0 : _a.length) {
            obj.metadata = message.metadata.map((e) => bank_1.Metadata.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ProposalMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseProposalMetadata();
        message.metadata = ((_a = object.metadata) === null || _a === void 0 ? void 0 : _a.map((e) => bank_1.Metadata.fromPartial(e))) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=erc20.js.map