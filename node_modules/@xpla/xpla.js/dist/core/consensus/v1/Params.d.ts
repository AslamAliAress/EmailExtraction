import { JSONSerializable } from '../../../util/json';
import { Int, Numeric } from '../../../core/numeric';
import { Duration } from '../../../core/Duration';
import { BlockParams as BlockParams_pb, EvidenceParams as EvidenceParams_pb, ValidatorParams as ValidatorParams_pb, VersionParams as VersionParams_pb, HashedParams as HashedParams_pb, ConsensusParams as ConsensusParams_pb } from '@xpla/xpla.proto/tendermint/types/params';
export declare class BlockParams extends JSONSerializable<BlockParams.Amino, BlockParams.Data, BlockParams.Proto> {
    max_bytes: Int;
    max_gas: Int;
    /**
     * @param max_bytes Max block size, in bytes. must be greater than 0
     * @param max_gas Max gas per block. must be greater or equal to -1
     */
    constructor(max_bytes: Numeric.Input, max_gas: Numeric.Input);
    static fromAmino(data: BlockParams.Amino, _?: boolean): BlockParams;
    toAmino(_?: boolean): BlockParams.Amino;
    static fromData(data: BlockParams.Data, _?: boolean): BlockParams;
    toData(_?: boolean): BlockParams.Data;
    static fromProto(proto: BlockParams.Proto, _?: boolean): BlockParams;
    toProto(_?: boolean): BlockParams.Proto;
}
export declare namespace BlockParams {
    interface Amino {
        max_bytes: string | undefined;
        max_gas: string | undefined;
    }
    interface Data {
        '@type': '/tendermint.types.BlockParams';
        max_bytes: string;
        max_gas: string;
    }
    type Proto = BlockParams_pb;
}
export declare class EvidenceParams extends JSONSerializable<EvidenceParams.Amino, EvidenceParams.Data, EvidenceParams.Proto> {
    max_age_duration: Duration;
    max_age_num_blocks: Int;
    max_bytes: Int;
    /**
     * @param max_bytes Max block size, in bytes. must be greater than 0
     * @param max_gas Max gas per block. must be greater or equal to -1
     */
    constructor(max_age_num_blocks: Numeric.Input, max_age_duration: Duration, max_bytes: Numeric.Input);
    static fromAmino(data: EvidenceParams.Amino, _?: boolean): EvidenceParams;
    toAmino(_?: boolean): EvidenceParams.Amino;
    static fromData(data: EvidenceParams.Data, _?: boolean): EvidenceParams;
    toData(_?: boolean): EvidenceParams.Data;
    static fromProto(proto: EvidenceParams.Proto, _?: boolean): EvidenceParams;
    toProto(_?: boolean): EvidenceParams.Proto;
}
export declare namespace EvidenceParams {
    interface Amino {
        max_age_num_blocks: string | undefined;
        max_age_duration: string | undefined;
        max_bytes: string | undefined;
    }
    interface Data {
        '@type': '/tendermint.types.EvidenceParams';
        max_age_num_blocks: string;
        max_age_duration: object | undefined;
        max_bytes: string;
    }
    type Proto = EvidenceParams_pb;
}
export declare class ValidatorParams extends JSONSerializable<ValidatorParams.Amino, ValidatorParams.Data, ValidatorParams.Proto> {
    pub_key_types: string[];
    /**
     * @param max_bytes Max block size, in bytes. must be greater than 0
     * @param max_gas Max gas per block. must be greater or equal to -1
     */
    constructor(pub_key_types: string[]);
    static fromAmino(data: ValidatorParams.Amino, _?: boolean): ValidatorParams;
    toAmino(_?: boolean): ValidatorParams.Amino;
    static fromData(data: ValidatorParams.Data, _?: boolean): ValidatorParams;
    toData(_?: boolean): ValidatorParams.Data;
    static fromProto(proto: ValidatorParams.Proto, _?: boolean): ValidatorParams;
    toProto(_?: boolean): ValidatorParams.Proto;
}
export declare namespace ValidatorParams {
    interface Amino {
        pub_key_types: string[];
    }
    interface Data {
        '@type': '/tendermint.types.ValidatorParams';
        pub_key_types: string[];
    }
    type Proto = ValidatorParams_pb;
}
export declare class VersionParams extends JSONSerializable<VersionParams.Amino, VersionParams.Data, VersionParams.Proto> {
    app: Int;
    constructor(app: Numeric.Input);
    static fromAmino(data: VersionParams.Amino, _?: boolean): VersionParams;
    toAmino(_?: boolean): VersionParams.Amino;
    static fromData(data: VersionParams.Data, _?: boolean): VersionParams;
    toData(_?: boolean): VersionParams.Data;
    static fromProto(proto: VersionParams.Proto, _?: boolean): VersionParams;
    toProto(_?: boolean): VersionParams.Proto;
}
export declare namespace VersionParams {
    interface Amino {
        app: string | undefined;
    }
    interface Data {
        '@type': '/tendermint.types.VersionParams';
        app: string;
    }
    type Proto = VersionParams_pb;
}
export declare class HashedParams extends JSONSerializable<HashedParams.Amino, HashedParams.Data, HashedParams.Proto> {
    block_max_bytes: Int;
    block_max_gas: Int;
    constructor(block_max_bytes: Numeric.Input, block_max_gas: Numeric.Input);
    static fromAmino(data: HashedParams.Amino, _?: boolean): HashedParams;
    toAmino(_?: boolean): HashedParams.Amino;
    static fromData(data: HashedParams.Data, _?: boolean): HashedParams;
    toData(_?: boolean): HashedParams.Data;
    static fromProto(proto: HashedParams.Proto, _?: boolean): HashedParams;
    toProto(_?: boolean): HashedParams.Proto;
}
export declare namespace HashedParams {
    interface Amino {
        block_max_bytes: string | undefined;
        block_max_gas: string | undefined;
    }
    interface Data {
        '@type': '/tendermint.types.HashedParams';
        block_max_bytes: string;
        block_max_gas: string;
    }
    type Proto = HashedParams_pb;
}
export declare class ConsensusParams extends JSONSerializable<ConsensusParams.Amino, ConsensusParams.Data, ConsensusParams.Proto> {
    block: BlockParams | undefined;
    evidence: EvidenceParams | undefined;
    validator: ValidatorParams | undefined;
    version: VersionParams | undefined;
    constructor(block: BlockParams | undefined, evidence: EvidenceParams | undefined, validator: ValidatorParams | undefined, version: VersionParams | undefined);
    static fromAmino(data: ConsensusParams.Amino, _?: boolean): ConsensusParams;
    toAmino(_?: boolean): ConsensusParams.Amino;
    static fromData(data: ConsensusParams.Data, _?: boolean): ConsensusParams;
    toData(_?: boolean): ConsensusParams.Data;
    static fromProto(proto: ConsensusParams.Proto, _?: boolean): ConsensusParams;
    toProto(_?: boolean): ConsensusParams.Proto;
}
export declare namespace ConsensusParams {
    interface Amino {
        block: BlockParams.Amino | undefined;
        evidence: EvidenceParams.Amino | undefined;
        validator: ValidatorParams.Amino | undefined;
        version: VersionParams.Amino | undefined;
    }
    interface Data {
        '@type': '/tendermint.types.ConsensusParams';
        block: BlockParams.Data | undefined;
        evidence: EvidenceParams.Data | undefined;
        validator: ValidatorParams.Data | undefined;
        version: VersionParams.Data | undefined;
    }
    type Proto = ConsensusParams_pb;
}
