"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgNftSendV1B1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/nft/v1beta1/tx");
var MsgNftSendV1B1 = /** @class */ (function (_super) {
    __extends(MsgNftSendV1B1, _super);
    /**
     * @param class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
     * @param id defines the unique identification of nft
     * @param sender is the address of the owner of nft
     * @param receiver is the receiver address of nft
     */
    function MsgNftSendV1B1(class_id, id, sender, receiver) {
        var _this = _super.call(this) || this;
        _this.class_id = class_id;
        _this.id = id;
        _this.sender = sender;
        _this.receiver = receiver;
        return _this;
    }
    MsgNftSendV1B1.fromAmino = function (data, _isClassic) {
        var _a = data.value, class_id = _a.class_id, id = _a.id, sender = _a.sender, receiver = _a.receiver;
        return new MsgNftSendV1B1(class_id, id, sender, receiver);
    };
    MsgNftSendV1B1.prototype.toAmino = function (isClassic) {
        var _a = this, class_id = _a.class_id, id = _a.id, sender = _a.sender, receiver = _a.receiver;
        return {
            type: isClassic ? 'nft/MsgSend' : 'cosmos-sdk/MsgSend',
            value: {
                class_id: class_id,
                id: id,
                sender: sender,
                receiver: receiver,
            },
        };
    };
    MsgNftSendV1B1.fromData = function (data, _isClassic) {
        var class_id = data.class_id, id = data.id, sender = data.sender, receiver = data.receiver;
        return new MsgNftSendV1B1(class_id, id, sender, receiver);
    };
    MsgNftSendV1B1.prototype.toData = function (_isClassic) {
        var _a = this, class_id = _a.class_id, id = _a.id, sender = _a.sender, receiver = _a.receiver;
        return {
            '@type': '/cosmos.nft.v1beta1.MsgSend',
            class_id: class_id,
            id: id,
            sender: sender,
            receiver: receiver,
        };
    };
    MsgNftSendV1B1.fromProto = function (proto, _isClassic) {
        return new MsgNftSendV1B1(proto.classId, proto.id, proto.sender, proto.receiver);
    };
    MsgNftSendV1B1.prototype.toProto = function (_isClassic) {
        var _a = this, class_id = _a.class_id, id = _a.id, sender = _a.sender, receiver = _a.receiver;
        return tx_1.MsgSend.fromPartial({
            classId: class_id,
            id: id,
            sender: sender,
            receiver: receiver,
        });
    };
    MsgNftSendV1B1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.nft.v1beta1.MsgSend',
            value: tx_1.MsgSend.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgNftSendV1B1.unpackAny = function (msgAny, isClassic) {
        return MsgNftSendV1B1.fromProto(tx_1.MsgSend.decode(msgAny.value), isClassic);
    };
    return MsgNftSendV1B1;
}(json_1.JSONSerializable));
exports.MsgNftSendV1B1 = MsgNftSendV1B1;
//# sourceMappingURL=MsgSend.js.map