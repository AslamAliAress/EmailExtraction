import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgSend as MsgNftSendV1B1_pb } from '@xpla/xpla.proto/cosmos/nft/v1beta1/tx';
export declare class MsgNftSendV1B1 extends JSONSerializable<MsgNftSendV1B1.Amino, MsgNftSendV1B1.Data, MsgNftSendV1B1.Proto> {
    class_id: string;
    id: string;
    sender: AccAddress;
    receiver: AccAddress;
    /**
     * @param class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
     * @param id defines the unique identification of nft
     * @param sender is the address of the owner of nft
     * @param receiver is the receiver address of nft
     */
    constructor(class_id: string, id: string, sender: AccAddress, receiver: AccAddress);
    static fromAmino(data: MsgNftSendV1B1.Amino, _isClassic?: boolean): MsgNftSendV1B1;
    toAmino(isClassic?: boolean): MsgNftSendV1B1.Amino;
    static fromData(data: MsgNftSendV1B1.Data, _isClassic?: boolean): MsgNftSendV1B1;
    toData(_isClassic?: boolean): MsgNftSendV1B1.Data;
    static fromProto(proto: MsgNftSendV1B1.Proto, _isClassic?: boolean): MsgNftSendV1B1;
    toProto(_isClassic?: boolean): MsgNftSendV1B1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgNftSendV1B1;
}
export declare namespace MsgNftSendV1B1 {
    interface Amino {
        type: 'nft/MsgSend' | 'cosmos-sdk/MsgSend';
        value: {
            class_id: string;
            id: string;
            sender: AccAddress;
            receiver: AccAddress;
        };
    }
    interface Data {
        '@type': '/cosmos.nft.v1beta1.MsgSend';
        class_id: string;
        id: string;
        sender: AccAddress;
        receiver: AccAddress;
    }
    type Proto = MsgNftSendV1B1_pb;
}
