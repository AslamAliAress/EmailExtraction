"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgGroupSubmitProposalV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/group/v1/tx");
var MsgGroupSubmitProposalV1 = /** @class */ (function (_super) {
    __extends(MsgGroupSubmitProposalV1, _super);
    /**
     * @param group_policy_address is the account address of group policy
     * @param proposers are the account addresses of the proposers
     * @param metadata is any arbitrary metadata attached to the proposal
     * @param messages is a list of `sdk.Msg`s that will be executed if the proposal passes
     * @param exec defines the mode of execution of the proposal, whether it should be executed immediately on creation or not
     * @param title is the title of the proposal
     * @param summary is the summary of the proposal
     */
    function MsgGroupSubmitProposalV1(group_policy_address, proposers, metadata, messages, exec, title, summary) {
        var _this = _super.call(this) || this;
        _this.group_policy_address = group_policy_address;
        _this.proposers = proposers;
        _this.metadata = metadata;
        _this.messages = messages;
        _this.exec = exec;
        _this.title = title;
        _this.summary = summary;
        return _this;
    }
    MsgGroupSubmitProposalV1.fromAmino = function (data, _isClassic) {
        var _a = data.value, group_policy_address = _a.group_policy_address, proposers = _a.proposers, metadata = _a.metadata, messages = _a.messages, exec = _a.exec, title = _a.title, summary = _a.summary;
        return new MsgGroupSubmitProposalV1(group_policy_address, proposers, metadata, messages, exec, title, summary);
    };
    MsgGroupSubmitProposalV1.prototype.toAmino = function (isClassic) {
        var _a = this, group_policy_address = _a.group_policy_address, proposers = _a.proposers, metadata = _a.metadata, messages = _a.messages, exec = _a.exec, title = _a.title, summary = _a.summary;
        return {
            type: isClassic
                ? 'group/MsgSubmitProposal'
                : 'cosmos-sdk/MsgSubmitProposal',
            value: {
                group_policy_address: group_policy_address,
                proposers: proposers,
                metadata: metadata,
                messages: messages,
                exec: exec,
                title: title,
                summary: summary,
            },
        };
    };
    MsgGroupSubmitProposalV1.fromData = function (data, _isClassic) {
        var group_policy_address = data.group_policy_address, proposers = data.proposers, metadata = data.metadata, messages = data.messages, exec = data.exec, title = data.title, summary = data.summary;
        return new MsgGroupSubmitProposalV1(group_policy_address, proposers, metadata, messages, exec, title, summary);
    };
    MsgGroupSubmitProposalV1.prototype.toData = function (_isClassic) {
        var _a = this, group_policy_address = _a.group_policy_address, proposers = _a.proposers, metadata = _a.metadata, messages = _a.messages, exec = _a.exec, title = _a.title, summary = _a.summary;
        return {
            '@type': '/cosmos.group.v1.MsgSubmitProposal',
            group_policy_address: group_policy_address,
            proposers: proposers,
            metadata: metadata,
            messages: messages,
            exec: exec,
            title: title,
            summary: summary,
        };
    };
    MsgGroupSubmitProposalV1.fromProto = function (proto, _isClassic) {
        return new MsgGroupSubmitProposalV1(proto.groupPolicyAddress, proto.proposers, proto.metadata, proto.messages, proto.exec, proto.title, proto.summary);
    };
    MsgGroupSubmitProposalV1.prototype.toProto = function (_isClassic) {
        var _a = this, group_policy_address = _a.group_policy_address, proposers = _a.proposers, metadata = _a.metadata, messages = _a.messages, exec = _a.exec, title = _a.title, summary = _a.summary;
        return tx_1.MsgSubmitProposal.fromPartial({
            groupPolicyAddress: group_policy_address,
            proposers: proposers,
            metadata: metadata,
            messages: messages,
            exec: exec,
            title: title,
            summary: summary,
        });
    };
    MsgGroupSubmitProposalV1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgSubmitProposal',
            value: tx_1.MsgSubmitProposal.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgGroupSubmitProposalV1.unpackAny = function (msgAny, isClassic) {
        return MsgGroupSubmitProposalV1.fromProto(tx_1.MsgSubmitProposal.decode(msgAny.value), isClassic);
    };
    return MsgGroupSubmitProposalV1;
}(json_1.JSONSerializable));
exports.MsgGroupSubmitProposalV1 = MsgGroupSubmitProposalV1;
//# sourceMappingURL=MsgSubmitProposal.js.map