"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateGroupPolicyV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/group/v1/tx");
var MsgCreateGroupPolicyV1 = /** @class */ (function (_super) {
    __extends(MsgCreateGroupPolicyV1, _super);
    /**
     * @param admin is the account address of the group admin
     * @param group_id is the unique ID of the group
     * @param metadata is any arbitrary metadata attached to the group policy
     * @param decision_policy specifies the group policy's decision policy
     */
    function MsgCreateGroupPolicyV1(admin, group_id, metadata, decision_policy) {
        var _this = _super.call(this) || this;
        _this.admin = admin;
        _this.group_id = group_id;
        _this.metadata = metadata;
        _this.decision_policy = decision_policy;
        return _this;
    }
    MsgCreateGroupPolicyV1.fromAmino = function (data, _isClassic) {
        var _a = data.value, admin = _a.admin, group_id = _a.group_id, metadata = _a.metadata, decision_policy = _a.decision_policy;
        return new MsgCreateGroupPolicyV1(admin, Number.parseInt(group_id), metadata, decision_policy);
    };
    MsgCreateGroupPolicyV1.prototype.toAmino = function (isClassic) {
        var _a = this, admin = _a.admin, group_id = _a.group_id, metadata = _a.metadata, decision_policy = _a.decision_policy;
        return {
            type: isClassic
                ? 'group/MsgCreateGroupPolicy'
                : 'cosmos-sdk/MsgCreateGroupPolicy',
            value: {
                admin: admin,
                group_id: group_id.toFixed(),
                metadata: metadata,
                decision_policy: decision_policy,
            },
        };
    };
    MsgCreateGroupPolicyV1.fromData = function (data, _isClassic) {
        var admin = data.admin, group_id = data.group_id, metadata = data.metadata, decision_policy = data.decision_policy;
        return new MsgCreateGroupPolicyV1(admin, Number.parseInt(group_id), metadata, decision_policy);
    };
    MsgCreateGroupPolicyV1.prototype.toData = function (_isClassic) {
        var _a = this, admin = _a.admin, group_id = _a.group_id, metadata = _a.metadata, decision_policy = _a.decision_policy;
        return {
            '@type': '/cosmos.group.v1.MsgCreateGroupPolicy',
            admin: admin,
            group_id: group_id.toFixed(),
            metadata: metadata,
            decision_policy: decision_policy,
        };
    };
    MsgCreateGroupPolicyV1.fromProto = function (proto, _isClassic) {
        return new MsgCreateGroupPolicyV1(proto.admin, proto.groupId.toNumber(), proto.metadata, proto.decisionPolicy);
    };
    MsgCreateGroupPolicyV1.prototype.toProto = function (_isClassic) {
        var _a = this, admin = _a.admin, group_id = _a.group_id, metadata = _a.metadata, decision_policy = _a.decision_policy;
        return tx_1.MsgCreateGroupPolicy.fromPartial({
            admin: admin,
            groupId: group_id,
            metadata: metadata,
            decisionPolicy: decision_policy,
        });
    };
    MsgCreateGroupPolicyV1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgCreateGroupPolicy',
            value: tx_1.MsgCreateGroupPolicy.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgCreateGroupPolicyV1.unpackAny = function (msgAny, isClassic) {
        return MsgCreateGroupPolicyV1.fromProto(tx_1.MsgCreateGroupPolicy.decode(msgAny.value), isClassic);
    };
    return MsgCreateGroupPolicyV1;
}(json_1.JSONSerializable));
exports.MsgCreateGroupPolicyV1 = MsgCreateGroupPolicyV1;
//# sourceMappingURL=MsgCreateGroupPolicy.js.map