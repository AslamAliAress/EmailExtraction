"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUnjailV1B1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/slashing/v1beta1/tx");
/**
 * A validator can be jailed by the blockchain if misbehavior is detected, such as
 * double-signing or having missed too many vote periods in the Oracle ballot.
 *
 * This is done to protect delegators' funds from getting slashed further, until the
 * validator's issues have been addressed. A jailed validator cannot participate in
 * block rewards, and must be manually unjailed by submitting this message.
 */
var MsgUnjailV1B1 = /** @class */ (function (_super) {
    __extends(MsgUnjailV1B1, _super);
    /**
     * @param address validator's operator address
     */
    function MsgUnjailV1B1(address) {
        var _this = _super.call(this) || this;
        _this.address = address;
        return _this;
    }
    MsgUnjailV1B1.fromAmino = function (data, _isClassic) {
        var address = data.value.address;
        return new MsgUnjailV1B1(address);
    };
    MsgUnjailV1B1.prototype.toAmino = function (isClassic) {
        var address = this.address;
        return {
            type: isClassic ? 'slashing/MsgUnjail' : 'cosmos-sdk/MsgUnjail',
            value: {
                address: address,
            },
        };
    };
    MsgUnjailV1B1.fromData = function (proto, _isClassic) {
        var address = proto.address;
        return new MsgUnjailV1B1(address);
    };
    MsgUnjailV1B1.prototype.toData = function (_isClassic) {
        var address = this.address;
        return {
            '@type': '/cosmos.slashing.v1beta1.MsgUnjail',
            address: address,
        };
    };
    MsgUnjailV1B1.fromProto = function (proto, _isClassic) {
        return new MsgUnjailV1B1(proto.validatorAddr);
    };
    MsgUnjailV1B1.prototype.toProto = function (_isClassic) {
        var address = this.address;
        return tx_1.MsgUnjail.fromPartial({
            validatorAddr: address,
        });
    };
    MsgUnjailV1B1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.slashing.v1beta1.MsgUnjail',
            value: tx_1.MsgUnjail.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgUnjailV1B1.unpackAny = function (msgAny, isClassic) {
        return MsgUnjailV1B1.fromProto(tx_1.MsgUnjail.decode(msgAny.value), isClassic);
    };
    return MsgUnjailV1B1;
}(json_1.JSONSerializable));
exports.MsgUnjailV1B1 = MsgUnjailV1B1;
//# sourceMappingURL=MsgUnjail.js.map