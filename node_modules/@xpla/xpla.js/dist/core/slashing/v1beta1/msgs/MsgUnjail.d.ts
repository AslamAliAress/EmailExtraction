import { JSONSerializable } from '../../../../util/json';
import { ValAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgUnjail as MsgUnjailV1B1_pb } from '@xpla/xpla.proto/cosmos/slashing/v1beta1/tx';
/**
 * A validator can be jailed by the blockchain if misbehavior is detected, such as
 * double-signing or having missed too many vote periods in the Oracle ballot.
 *
 * This is done to protect delegators' funds from getting slashed further, until the
 * validator's issues have been addressed. A jailed validator cannot participate in
 * block rewards, and must be manually unjailed by submitting this message.
 */
export declare class MsgUnjailV1B1 extends JSONSerializable<MsgUnjailV1B1.Amino, MsgUnjailV1B1.Data, MsgUnjailV1B1.Proto> {
    address: ValAddress;
    /**
     * @param address validator's operator address
     */
    constructor(address: ValAddress);
    static fromAmino(data: MsgUnjailV1B1.Amino, _isClassic?: boolean): MsgUnjailV1B1;
    toAmino(isClassic?: boolean): MsgUnjailV1B1.Amino;
    static fromData(proto: MsgUnjailV1B1.Data, _isClassic?: boolean): MsgUnjailV1B1;
    toData(_isClassic?: boolean): MsgUnjailV1B1.Data;
    static fromProto(proto: MsgUnjailV1B1.Proto, _isClassic?: boolean): MsgUnjailV1B1;
    toProto(_isClassic?: boolean): MsgUnjailV1B1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgUnjailV1B1;
}
export declare namespace MsgUnjailV1B1 {
    interface Amino {
        type: 'slashing/MsgUnjail' | 'cosmos-sdk/MsgUnjail';
        value: {
            address: ValAddress;
        };
    }
    interface Data {
        '@type': '/cosmos.slashing.v1beta1.MsgUnjail';
        address: ValAddress;
    }
    type Proto = MsgUnjailV1B1_pb;
}
