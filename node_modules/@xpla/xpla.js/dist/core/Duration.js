"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Duration = void 0;
var json_1 = require("../util/json");
var numeric_1 = require("./numeric");
var duration_1 = require("@xpla/xpla.proto/google/protobuf/duration");
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution.
 */
var Duration = /** @class */ (function (_super) {
    __extends(Duration, _super);
    /**
     * @param seconds Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
     * @param nanos Signed fractions of a second at nanosecond resolution of the span of time. Must be from -999,999,999 to +999,999,999 inclusive.
     */
    function Duration(seconds, nanos) {
        if (nanos === void 0) { nanos = 0; }
        var _this = _super.call(this) || this;
        if (nanos < -999999999 || nanos > 999999999) {
            throw new Error('Duration.nanos must be between -999999999 and 999999999');
        }
        _this._seconds = new numeric_1.Int(seconds);
        _this._nanos = nanos;
        return _this;
    }
    Object.defineProperty(Duration.prototype, "seconds", {
        get: function () {
            return this._seconds;
        },
        set: function (seconds) {
            this._seconds = new numeric_1.Int(seconds);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "nanos", {
        get: function () {
            return this._nanos;
        },
        set: function (nanos) {
            if (nanos < -999999999 || nanos > 999999999) {
                throw new Error('Duration.nanos must be between -999999999 and 999999999');
            }
            this._nanos = nanos;
        },
        enumerable: false,
        configurable: true
    });
    Duration.fromAmino = function (data) {
        if (typeof data === 'string') {
            var dec = new numeric_1.Dec(data);
            dec = dec.div(1000000000);
            return new Duration(dec.divToInt(1), dec.mod(1).mul(1000000000).divToInt(1).toNumber());
        }
        else if (typeof data === 'object') {
            return Duration.fromData(data);
        }
        var seconds = data.seconds, nanos = data.nanos;
        return new Duration(seconds, nanos);
    };
    Duration.prototype.toAmino = function () {
        var dec = new numeric_1.Dec(this._seconds);
        dec = dec.mul(1000000000);
        dec = dec.add(this._nanos);
        return dec.divToInt(1).toFixed();
    };
    Duration.fromData = function (data) {
        var _a, _b;
        if (typeof data === 'string') {
            return Duration.fromString(data);
        }
        else if (typeof data === 'object') {
            var data_ = data;
            return new Duration((_a = data_.seconds) !== null && _a !== void 0 ? _a : '0', (_b = data_.nanos) !== null && _b !== void 0 ? _b : 0);
        }
        var seconds = data.seconds, nanos = data.nanos;
        return new Duration(seconds, nanos);
    };
    Duration.prototype.toData = function () {
        var _a = this, seconds = _a.seconds, nanos = _a.nanos;
        return {
            seconds: seconds.toFixed(),
            nanos: nanos,
        };
    };
    Duration.parse = function (str) {
        return Duration.fromString(str);
    };
    Duration.fromString = function (str) {
        var dec = new numeric_1.Dec(0);
        if (str.endsWith('ns')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.div(1000000000);
        }
        else if (str.endsWith('us')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.div(1000000);
        }
        else if (str.endsWith('ms')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.div(1000);
        }
        else if (str.endsWith('s')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 1));
        }
        else if (str.endsWith('m')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.mul(60);
        }
        else if (str.endsWith('h')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.mul(60 * 60);
        }
        else if (str.endsWith('d')) {
            dec = new numeric_1.Dec(str.substring(0, str.length - 2));
            dec = dec.mul(60 * 60 * 24);
        }
        else {
            throw new Error("failed to parse to Duration: ".concat(str));
        }
        return new Duration(dec.divToInt(1), dec.mod(1).mul(1000000000).divToInt(1).toNumber());
    };
    Duration.prototype.toString = function (unit) {
        var dec = new numeric_1.Dec(this._seconds);
        dec = dec.mul(1000000000);
        dec = dec.add(this._nanos);
        if (unit === 'ns') {
            // do nothing
        }
        else if (unit === 'us') {
            dec = dec.div(1000);
        }
        else if (unit === 'ms') {
            dec = dec.div(1000000);
        }
        else if (unit === 'm') {
            dec = dec.div(1000000000 * 60);
        }
        else if (unit === 'h') {
            dec = dec.div(1000000000 * 60 * 60);
        }
        else if (unit === 'd') {
            dec = dec.div(1000000000 * 60 * 60 * 24);
        }
        else {
            dec = dec.div(1000000000);
            unit = 's';
        }
        return "".concat(dec.toFixed()).concat(unit);
    };
    Duration.fromProto = function (data) {
        return new Duration(data.seconds.toString(), data.nanos);
    };
    Duration.prototype.toProto = function () {
        var _a = this, seconds = _a.seconds, nanos = _a.nanos;
        return duration_1.Duration.fromPartial({
            seconds: seconds.toFixed(),
            nanos: nanos,
        });
    };
    return Duration;
}(json_1.JSONSerializable));
exports.Duration = Duration;
//# sourceMappingURL=Duration.js.map