import { JSONSerializable } from '../../../../util/json';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { Metadata } from '@xpla/xpla.proto/cosmos/bank/v1beta1/bank';
import { RegisterCoinProposal as RegisterCoinProposal_pb } from '@xpla/xpla.proto/ethermint/erc20/v1/erc20';
/**
 * erc20 RegisterCoinProposal
 */
export declare class RegisterCoinProposal extends JSONSerializable<RegisterCoinProposal.Amino, RegisterCoinProposal.Data, RegisterCoinProposal.Proto> {
    title: string;
    description: string;
    metadata: Metadata[] | undefined;
    /**
     * @param title title of the proposal
     * @param description proposal description
     * @param metadata metadata of the native Cosmos coin
     */
    constructor(title: string, description: string, metadata: Metadata[] | undefined);
    static fromAmino(data: RegisterCoinProposal.Amino, _isClassic?: boolean): RegisterCoinProposal;
    toAmino(_isClassic?: boolean): RegisterCoinProposal.Amino;
    static fromData(data: RegisterCoinProposal.Data, _isClassic?: boolean): RegisterCoinProposal;
    toData(_isClassic?: boolean): RegisterCoinProposal.Data;
    static fromProto(proto: RegisterCoinProposal.Proto, _isClassic?: boolean): RegisterCoinProposal;
    toProto(_isClassic?: boolean): RegisterCoinProposal.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): RegisterCoinProposal;
}
export declare namespace RegisterCoinProposal {
    interface Amino {
        type: 'erc20/RegisterCoinProposal';
        value: {
            title: string;
            description: string;
            metadata: Metadata[] | undefined;
        };
    }
    interface Data {
        '@type': '/ethermint.erc20.v1.RegisterCoinProposal' | '/evmos.erc20.v1.RegisterCoinProposal';
        title: string;
        description: string;
        metadata: Metadata[] | undefined;
    }
    type Proto = RegisterCoinProposal_pb;
}
