import { JSONSerializable } from '../../../../util/json';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { RegisterERC20Proposal as RegisterERC20Proposal_pb } from '@xpla/xpla.proto/ethermint/erc20/v1/erc20';
/**
 * erc20 RegisterERC20Proposal
 */
export declare class RegisterERC20Proposal extends JSONSerializable<RegisterERC20Proposal.Amino, RegisterERC20Proposal.Data, RegisterERC20Proposal.Proto> {
    title: string;
    description: string;
    erc20addresses: string[];
    /**
     * @param title title of the proposal
     * @param description proposal description
     * @param erc20addresses contract addresses of ERC20 token
     */
    constructor(title: string, description: string, erc20addresses: string[]);
    static fromAmino(data: RegisterERC20Proposal.Amino, _isClassic?: boolean): RegisterERC20Proposal;
    toAmino(_isClassic?: boolean): RegisterERC20Proposal.Amino;
    static fromData(data: RegisterERC20Proposal.Data, _isClassic?: boolean): RegisterERC20Proposal;
    toData(_isClassic?: boolean): RegisterERC20Proposal.Data;
    static fromProto(proto: RegisterERC20Proposal.Proto, _isClassic?: boolean): RegisterERC20Proposal;
    toProto(_isClassic?: boolean): RegisterERC20Proposal.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): RegisterERC20Proposal;
}
export declare namespace RegisterERC20Proposal {
    interface Amino {
        type: 'erc20/RegisterERC20Proposal';
        value: {
            title: string;
            description: string;
            erc20addresses: string[];
        };
    }
    interface Data {
        '@type': '/ethermint.erc20.v1.RegisterERC20Proposal' | '/evmos.erc20.v1.RegisterERC20Proposal';
        title: string;
        description: string;
        erc20addresses: string[];
    }
    type Proto = RegisterERC20Proposal_pb;
}
