"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleTokenConversionProposal = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var erc20_1 = require("@xpla/xpla.proto/ethermint/erc20/v1/erc20");
/**
 * erc20 ToggleTokenConversionProposal
 */
var ToggleTokenConversionProposal = /** @class */ (function (_super) {
    __extends(ToggleTokenConversionProposal, _super);
    /**
     * @param title title of the proposal
     * @param description proposal description
     * @param token token identifier can be either the hex contract address of the ERC20 or the Cosmos base denomination
     */
    function ToggleTokenConversionProposal(title, description, token) {
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.description = description;
        _this.token = token;
        return _this;
    }
    ToggleTokenConversionProposal.fromAmino = function (data, _isClassic) {
        var _a = data.value, title = _a.title, description = _a.description, token = _a.token;
        return new ToggleTokenConversionProposal(title, description, token);
    };
    ToggleTokenConversionProposal.prototype.toAmino = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, token = _a.token;
        return {
            type: 'erc20/ToggleTokenConversionProposal',
            value: {
                title: title,
                description: description,
                token: token,
            },
        };
    };
    ToggleTokenConversionProposal.fromData = function (data, _isClassic) {
        var title = data.title, description = data.description, token = data.token;
        return new ToggleTokenConversionProposal(title, description, token);
    };
    ToggleTokenConversionProposal.prototype.toData = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, token = _a.token;
        return {
            '@type': '/ethermint.erc20.v1.ToggleTokenConversionProposal',
            title: title,
            description: description,
            token: token,
        };
    };
    ToggleTokenConversionProposal.fromProto = function (proto, _isClassic) {
        return new ToggleTokenConversionProposal(proto.title, proto.description, proto.token);
    };
    ToggleTokenConversionProposal.prototype.toProto = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, token = _a.token;
        return erc20_1.ToggleTokenConversionProposal.fromPartial({
            title: title,
            description: description,
            token: token,
        });
    };
    ToggleTokenConversionProposal.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/ethermint.erc20.v1.ToggleTokenConversionProposal',
            value: erc20_1.ToggleTokenConversionProposal.encode(this.toProto(isClassic)).finish(),
        });
    };
    ToggleTokenConversionProposal.unpackAny = function (msgAny, isClassic) {
        return ToggleTokenConversionProposal.fromProto(erc20_1.ToggleTokenConversionProposal.decode(msgAny.value), isClassic);
    };
    return ToggleTokenConversionProposal;
}(json_1.JSONSerializable));
exports.ToggleTokenConversionProposal = ToggleTokenConversionProposal;
//# sourceMappingURL=ToggleTokenConversionProposal.js.map