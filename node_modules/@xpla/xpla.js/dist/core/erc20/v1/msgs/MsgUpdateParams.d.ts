import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgUpdateParams as MsgUpdateERC20ParamsV1_pb } from '@xpla/xpla.proto/ethermint/erc20/v1/tx';
import { ERC20ParamsV1 } from '../Params';
export declare class MsgUpdateERC20ParamsV1 extends JSONSerializable<MsgUpdateERC20ParamsV1.Amino, MsgUpdateERC20ParamsV1.Data, MsgUpdateERC20ParamsV1.Proto> {
    authority: AccAddress;
    params: ERC20ParamsV1 | undefined;
    /**
     * @param authority is the address that controls the module
     * @param params defines the x/bank parameters to update
     */
    constructor(authority: AccAddress, params: ERC20ParamsV1 | undefined);
    static fromAmino(data: MsgUpdateERC20ParamsV1.Amino, _isClassic?: boolean): MsgUpdateERC20ParamsV1;
    toAmino(_isClassic?: boolean): MsgUpdateERC20ParamsV1.Amino;
    static fromData(data: MsgUpdateERC20ParamsV1.Data, _isClassic?: boolean): MsgUpdateERC20ParamsV1;
    toData(_isClassic?: boolean): MsgUpdateERC20ParamsV1.Data;
    static fromProto(proto: MsgUpdateERC20ParamsV1.Proto, _isClassic?: boolean): MsgUpdateERC20ParamsV1;
    toProto(_isClassic?: boolean): MsgUpdateERC20ParamsV1.Proto;
    packAny(_isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, _isClassic?: boolean): MsgUpdateERC20ParamsV1;
}
export declare namespace MsgUpdateERC20ParamsV1 {
    interface Amino {
        type: 'ethermint/erc20/MsgUpdateParams';
        value: {
            authority: AccAddress;
            params: ERC20ParamsV1.Amino | undefined;
        };
    }
    interface Data {
        '@type': '/ethermint.erc20.v1.MsgUpdateParams';
        authority: AccAddress;
        params: ERC20ParamsV1.Data | undefined;
    }
    type Proto = MsgUpdateERC20ParamsV1_pb;
}
