import { JSONSerializable } from '../../../../util/json';
import { Coin } from '../../../Coin';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgConvertCoin as MsgConvertCoinV1_pb } from '@xpla/xpla.proto/ethermint/erc20/v1/tx';
/**
 * erc20 MsgConvertCoin
 */
export declare class MsgConvertCoinV1 extends JSONSerializable<MsgConvertCoinV1.Amino, MsgConvertCoinV1.Data, MsgConvertCoinV1.Proto> {
    receiver: AccAddress;
    sender: AccAddress;
    coin: Coin | undefined;
    /**
     * @param coin Cosmos coin which denomination is registered in a token pair
     * @param receiver recipient hex address to receive ERC20 token
     * @param sender cosmos bech32 address from the owner of the given Cosmos coins
     */
    constructor(coin: Coin.Data | undefined, receiver: AccAddress, sender: AccAddress);
    static fromAmino(amino: MsgConvertCoinV1.Amino, _isClassic?: boolean): MsgConvertCoinV1;
    toAmino(_isClassic?: boolean): MsgConvertCoinV1.Amino;
    static fromData(obj: MsgConvertCoinV1.Data, _isClassic?: boolean): MsgConvertCoinV1;
    toData(_isClassic?: boolean): MsgConvertCoinV1.Data;
    static fromProto(proto: MsgConvertCoinV1.Proto, _isClassic?: boolean): MsgConvertCoinV1;
    toProto(_isClassic?: boolean): MsgConvertCoinV1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgConvertCoinV1;
}
export declare namespace MsgConvertCoinV1 {
    interface Amino {
        type: 'ethermint/MsgConvertCoin';
        value: {
            coin: Coin.Amino | undefined;
            receiver: AccAddress;
            sender: AccAddress;
        };
    }
    interface Data {
        '@type': '/ethermint.erc20.v1.MsgConvertCoin' | '/evmos.erc20.v1.MsgConvertCoin';
        coin: Coin.Data | undefined;
        receiver: AccAddress;
        sender: AccAddress;
    }
    type Proto = MsgConvertCoinV1_pb;
}
