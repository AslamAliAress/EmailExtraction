"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgConvertERC20V1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/ethermint/erc20/v1/tx");
/**
 * erc20 MsgConvertERC20
 */
var MsgConvertERC20V1 = /** @class */ (function (_super) {
    __extends(MsgConvertERC20V1, _super);
    /**
     * @param contract_address ERC20 token contract address registered in a token pair
     * @param amount amount of ERC20 tokens to convert
     * @param receiver bech32 address to receive native Cosmos coins
     * @param sender sender hex address from the owner of the given ERC20 tokens
     */
    function MsgConvertERC20V1(contract_address, amount, receiver, sender) {
        var _this = _super.call(this) || this;
        _this.contract_address = contract_address;
        _this.amount = amount;
        _this.receiver = receiver;
        _this.sender = sender;
        return _this;
    }
    MsgConvertERC20V1.fromAmino = function (amino, _isClassic) {
        var _a = amino.value, contract_address = _a.contract_address, amount = _a.amount, receiver = _a.receiver, sender = _a.sender;
        return new MsgConvertERC20V1(contract_address, amount, receiver, sender);
    };
    MsgConvertERC20V1.prototype.toAmino = function (_isClassic) {
        var _a = this, contract_address = _a.contract_address, amount = _a.amount, receiver = _a.receiver, sender = _a.sender;
        return {
            type: 'ethermint/MsgConvertERC20',
            value: {
                contract_address: contract_address,
                amount: amount,
                receiver: receiver,
                sender: sender,
            },
        };
    };
    MsgConvertERC20V1.fromData = function (obj, _isClassic) {
        var contract_address = obj.contract_address, amount = obj.amount, receiver = obj.receiver, sender = obj.sender;
        return new MsgConvertERC20V1(contract_address, amount, receiver, sender);
    };
    MsgConvertERC20V1.prototype.toData = function (_isClassic) {
        var _a = this, contract_address = _a.contract_address, amount = _a.amount, receiver = _a.receiver, sender = _a.sender;
        return {
            '@type': '/ethermint.erc20.v1.MsgConvertERC20',
            contract_address: contract_address,
            amount: amount,
            receiver: receiver,
            sender: sender,
        };
    };
    MsgConvertERC20V1.fromProto = function (proto, _isClassic) {
        return new MsgConvertERC20V1(proto.contractAddress, proto.amount, proto.receiver, proto.sender);
    };
    MsgConvertERC20V1.prototype.toProto = function (_isClassic) {
        var _a = this, contract_address = _a.contract_address, amount = _a.amount, receiver = _a.receiver, sender = _a.sender;
        return tx_1.MsgConvertERC20.fromPartial({
            contractAddress: contract_address,
            amount: amount,
            receiver: receiver,
            sender: sender,
        });
    };
    MsgConvertERC20V1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/ethermint.erc20.v1.MsgConvertERC20',
            value: tx_1.MsgConvertERC20.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgConvertERC20V1.unpackAny = function (msgAny, isClassic) {
        return MsgConvertERC20V1.fromProto(tx_1.MsgConvertERC20.decode(msgAny.value), isClassic);
    };
    return MsgConvertERC20V1;
}(json_1.JSONSerializable));
exports.MsgConvertERC20V1 = MsgConvertERC20V1;
//# sourceMappingURL=MsgConvertERC20.js.map