import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgConvertERC20 as MsgConvertERC20V1_pb } from '@xpla/xpla.proto/ethermint/erc20/v1/tx';
/**
 * erc20 MsgConvertERC20
 */
export declare class MsgConvertERC20V1 extends JSONSerializable<MsgConvertERC20V1.Amino, MsgConvertERC20V1.Data, MsgConvertERC20V1.Proto> {
    contract_address: string;
    amount: string;
    receiver: AccAddress;
    sender: string;
    /**
     * @param contract_address ERC20 token contract address registered in a token pair
     * @param amount amount of ERC20 tokens to convert
     * @param receiver bech32 address to receive native Cosmos coins
     * @param sender sender hex address from the owner of the given ERC20 tokens
     */
    constructor(contract_address: string, amount: string, receiver: AccAddress, sender: string);
    static fromAmino(amino: MsgConvertERC20V1.Amino, _isClassic?: boolean): MsgConvertERC20V1;
    toAmino(_isClassic?: boolean): MsgConvertERC20V1.Amino;
    static fromData(obj: MsgConvertERC20V1.Data, _isClassic?: boolean): MsgConvertERC20V1;
    toData(_isClassic?: boolean): MsgConvertERC20V1.Data;
    static fromProto(proto: MsgConvertERC20V1.Proto, _isClassic?: boolean): MsgConvertERC20V1;
    toProto(_isClassic?: boolean): MsgConvertERC20V1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgConvertERC20V1;
}
export declare namespace MsgConvertERC20V1 {
    interface Amino {
        type: 'ethermint/MsgConvertERC20';
        value: {
            contract_address: AccAddress;
            amount: string;
            receiver: AccAddress;
            sender: AccAddress;
        };
    }
    interface Data {
        '@type': '/ethermint.erc20.v1.MsgConvertERC20' | '/evmos.erc20.v1.MsgConvertERC20';
        contract_address: AccAddress;
        amount: string;
        receiver: AccAddress;
        sender: AccAddress;
    }
    type Proto = MsgConvertERC20V1_pb;
}
