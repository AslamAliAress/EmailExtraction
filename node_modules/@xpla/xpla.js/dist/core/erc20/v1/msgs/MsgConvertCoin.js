"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgConvertCoinV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var Coin_1 = require("../../../Coin");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/ethermint/erc20/v1/tx");
/**
 * erc20 MsgConvertCoin
 */
var MsgConvertCoinV1 = /** @class */ (function (_super) {
    __extends(MsgConvertCoinV1, _super);
    /**
     * @param coin Cosmos coin which denomination is registered in a token pair
     * @param receiver recipient hex address to receive ERC20 token
     * @param sender cosmos bech32 address from the owner of the given Cosmos coins
     */
    function MsgConvertCoinV1(coin, receiver, sender) {
        var _this = _super.call(this) || this;
        _this.receiver = receiver;
        _this.sender = sender;
        if (coin)
            _this.coin = Coin_1.Coin.fromData(coin);
        return _this;
    }
    MsgConvertCoinV1.fromAmino = function (amino, _isClassic) {
        var _a = amino.value, coin = _a.coin, receiver = _a.receiver, sender = _a.sender;
        return new MsgConvertCoinV1(coin, receiver, sender);
    };
    MsgConvertCoinV1.prototype.toAmino = function (_isClassic) {
        var _a = this, coin = _a.coin, receiver = _a.receiver, sender = _a.sender;
        return {
            type: 'ethermint/MsgConvertCoin',
            value: {
                coin: coin ? coin.toAmino() : undefined,
                receiver: receiver,
                sender: sender,
            },
        };
    };
    MsgConvertCoinV1.fromData = function (obj, _isClassic) {
        var coin = obj.coin, receiver = obj.receiver, sender = obj.sender;
        return new MsgConvertCoinV1(coin, receiver, sender);
    };
    MsgConvertCoinV1.prototype.toData = function (_isClassic) {
        var _a = this, coin = _a.coin, receiver = _a.receiver, sender = _a.sender;
        return {
            '@type': '/ethermint.erc20.v1.MsgConvertCoin',
            coin: coin ? coin.toData() : undefined,
            receiver: receiver,
            sender: sender,
        };
    };
    MsgConvertCoinV1.fromProto = function (proto, _isClassic) {
        return new MsgConvertCoinV1(proto.coin, proto.receiver, proto.sender);
    };
    MsgConvertCoinV1.prototype.toProto = function (_isClassic) {
        var _a = this, coin = _a.coin, receiver = _a.receiver, sender = _a.sender;
        return tx_1.MsgConvertCoin.fromPartial({
            coin: coin ? coin.toProto() : undefined,
            receiver: receiver,
            sender: sender,
        });
    };
    MsgConvertCoinV1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/ethermint.erc20.v1.MsgConvertCoin',
            value: tx_1.MsgConvertCoin.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgConvertCoinV1.unpackAny = function (msgAny, isClassic) {
        return MsgConvertCoinV1.fromProto(tx_1.MsgConvertCoin.decode(msgAny.value), isClassic);
    };
    return MsgConvertCoinV1;
}(json_1.JSONSerializable));
exports.MsgConvertCoinV1 = MsgConvertCoinV1;
//# sourceMappingURL=MsgConvertCoin.js.map