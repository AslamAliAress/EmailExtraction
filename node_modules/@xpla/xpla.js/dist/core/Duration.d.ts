import { JSONSerializable } from '../util/json';
import { Numeric } from './numeric';
import { Duration as Duration_pb } from '@xpla/xpla.proto/google/protobuf/duration';
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution.
 */
export declare class Duration extends JSONSerializable<Duration.Amino, Duration.Data, Duration.Proto> {
    private _seconds;
    private _nanos;
    /**
     * @param seconds Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
     * @param nanos Signed fractions of a second at nanosecond resolution of the span of time. Must be from -999,999,999 to +999,999,999 inclusive.
     */
    constructor(seconds: Numeric.Input, nanos?: number);
    get seconds(): Numeric.Output;
    set seconds(seconds: Numeric.Input);
    get nanos(): number;
    set nanos(nanos: number);
    static fromAmino(data: Duration.Amino | object | string): Duration;
    toAmino(): Duration.Amino;
    static fromData(data: Duration.Data | object | string): Duration;
    toData(): Duration.Data;
    static parse(str: string): Duration;
    static fromString(str: string): Duration;
    toString(unit?: string): string;
    static fromProto(data: Duration.Proto): Duration;
    toProto(): Duration.Proto;
}
export declare namespace Duration {
    type Amino = string;
    interface Data {
        seconds: string;
        nanos: number;
    }
    type Proto = Duration_pb;
}
