import { JSONSerializable } from '../../../../util/json';
import { Coins } from '../../../Coins';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgFundFeeCollector as MsgFundFeeCollectorV1B1_pb } from '@xpla/xpla.proto/xpla/reward/v1beta1/tx';
/**
 * A basic message for sending [[Coins]] between Xpla accounts.
 */
export declare class MsgFundFeeCollectorV1B1 extends JSONSerializable<MsgFundFeeCollectorV1B1.Amino, MsgFundFeeCollectorV1B1.Data, MsgFundFeeCollectorV1B1.Proto> {
    depositor: AccAddress;
    /**
     * value of the transaction
     */
    amount: Coins;
    /**
     * @param amount value of the transaction
     * @param depositor depositor's address
     */
    constructor(amount: Coins.Input, depositor: AccAddress);
    static fromAmino(data: MsgFundFeeCollectorV1B1.Amino, _isClassic?: boolean): MsgFundFeeCollectorV1B1;
    toAmino(_isClassic?: boolean): MsgFundFeeCollectorV1B1.Amino;
    static fromData(data: MsgFundFeeCollectorV1B1.Data, _isClassic?: boolean): MsgFundFeeCollectorV1B1;
    toData(_isClassic?: boolean): MsgFundFeeCollectorV1B1.Data;
    static fromProto(proto: MsgFundFeeCollectorV1B1.Proto, _isClassic?: boolean): MsgFundFeeCollectorV1B1;
    toProto(_isClassic?: boolean): MsgFundFeeCollectorV1B1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgFundFeeCollectorV1B1;
}
export declare namespace MsgFundFeeCollectorV1B1 {
    interface Amino {
        type: 'xpladev/MsgFundFeeCollector';
        value: {
            amount: Coins.Amino;
            depositor: AccAddress;
        };
    }
    interface Data {
        '@type': '/xpla.reward.v1beta1.MsgFundFeeCollector';
        amount: Coins.Data;
        depositor: AccAddress;
    }
    type Proto = MsgFundFeeCollectorV1B1_pb;
}
