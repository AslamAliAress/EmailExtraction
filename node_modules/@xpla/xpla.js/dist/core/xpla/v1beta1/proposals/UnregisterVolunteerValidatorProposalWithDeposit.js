"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnregisterVolunteerValidatorProposalWithDeposit = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var proposal_1 = require("@xpla/xpla.proto/xpla/volunteer/v1beta1/proposal");
/**
 * Basic proposal which describes the candidate proposition that must be put into effect
 * manually if passed. Used as a general-purpose way of discovering community's
 * sentiment / interest for an arbitrary change.
 */
var UnregisterVolunteerValidatorProposalWithDeposit = /** @class */ (function (_super) {
    __extends(UnregisterVolunteerValidatorProposalWithDeposit, _super);
    /**
     * @param title proposal's title
     * @param description proposal's description
     */
    function UnregisterVolunteerValidatorProposalWithDeposit(title, description, validatorAddress, deposit) {
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.description = description;
        _this.validatorAddress = validatorAddress;
        _this.deposit = deposit;
        return _this;
    }
    UnregisterVolunteerValidatorProposalWithDeposit.fromAmino = function (data, _isClassic) {
        var _a = data.value, title = _a.title, description = _a.description, validatorAddress = _a.validatorAddress, deposit = _a.deposit;
        return new UnregisterVolunteerValidatorProposalWithDeposit(title, description, validatorAddress, deposit);
    };
    UnregisterVolunteerValidatorProposalWithDeposit.prototype.toAmino = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorAddress = _a.validatorAddress, deposit = _a.deposit;
        return {
            type: 'xpla/UnregisterVolunteerValidatorProposalWithDeposit',
            value: {
                title: title,
                description: description,
                validatorAddress: validatorAddress,
                deposit: deposit,
            },
        };
    };
    UnregisterVolunteerValidatorProposalWithDeposit.fromData = function (proto, _isClassic) {
        var title = proto.title, description = proto.description, validatorAddress = proto.validatorAddress, deposit = proto.deposit;
        return new UnregisterVolunteerValidatorProposalWithDeposit(title, description, validatorAddress, deposit);
    };
    UnregisterVolunteerValidatorProposalWithDeposit.prototype.toData = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorAddress = _a.validatorAddress, deposit = _a.deposit;
        return {
            '@type': '/xpla.volunteer.v1beta1.UnregisterVolunteerValidatorProposalWithDeposit',
            title: title,
            description: description,
            validatorAddress: validatorAddress,
            deposit: deposit,
        };
    };
    UnregisterVolunteerValidatorProposalWithDeposit.fromProto = function (proto, _isClassic) {
        return new UnregisterVolunteerValidatorProposalWithDeposit(proto.title, proto.description, proto.validatorAddress, proto.deposit);
    };
    UnregisterVolunteerValidatorProposalWithDeposit.prototype.toProto = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorAddress = _a.validatorAddress, deposit = _a.deposit;
        return proposal_1.UnregisterVolunteerValidatorProposalWithDeposit.fromPartial({
            title: title,
            description: description,
            validatorAddress: validatorAddress,
            deposit: deposit,
        });
    };
    UnregisterVolunteerValidatorProposalWithDeposit.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/xpla.volunteer.v1beta1.UnregisterVolunteerValidatorProposalWithDeposit',
            value: proposal_1.UnregisterVolunteerValidatorProposalWithDeposit.encode(this.toProto(isClassic)).finish(),
        });
    };
    UnregisterVolunteerValidatorProposalWithDeposit.unpackAny = function (msgAny, isClassic) {
        return UnregisterVolunteerValidatorProposalWithDeposit.fromProto(proposal_1.UnregisterVolunteerValidatorProposalWithDeposit.decode(msgAny.value), isClassic);
    };
    return UnregisterVolunteerValidatorProposalWithDeposit;
}(json_1.JSONSerializable));
exports.UnregisterVolunteerValidatorProposalWithDeposit = UnregisterVolunteerValidatorProposalWithDeposit;
//# sourceMappingURL=UnregisterVolunteerValidatorProposalWithDeposit.js.map