"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterVolunteerValidatorProposal = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var proposal_1 = require("@xpla/xpla.proto/xpla/volunteer/v1beta1/proposal");
/**
 * Basic proposal which describes the candidate proposition that must be put into effect
 * manually if passed. Used as a general-purpose way of discovering community's
 * sentiment / interest for an arbitrary change.
 */
var RegisterVolunteerValidatorProposal = /** @class */ (function (_super) {
    __extends(RegisterVolunteerValidatorProposal, _super);
    /**
     * @param title proposal's title
     * @param description proposal's description
     */
    function RegisterVolunteerValidatorProposal(title, description, validatorDescription, delegatorAddress, validatorAddress, pubkey, amount) {
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.description = description;
        _this.validatorDescription = validatorDescription;
        _this.delegatorAddress = delegatorAddress;
        _this.validatorAddress = validatorAddress;
        _this.pubkey = pubkey;
        _this.amount = amount;
        return _this;
    }
    RegisterVolunteerValidatorProposal.fromAmino = function (data, _isClassic) {
        var _a = data.value, title = _a.title, description = _a.description, validatorDescription = _a.validatorDescription, delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, pubkey = _a.pubkey, amount = _a.amount;
        return new RegisterVolunteerValidatorProposal(title, description, validatorDescription, delegatorAddress, validatorAddress, pubkey, amount);
    };
    RegisterVolunteerValidatorProposal.prototype.toAmino = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorDescription = _a.validatorDescription, delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, pubkey = _a.pubkey, amount = _a.amount;
        return {
            type: 'xpla/RegisterVolunteerValidatorProposal',
            value: {
                title: title,
                description: description,
                validatorDescription: validatorDescription,
                delegatorAddress: delegatorAddress,
                validatorAddress: validatorAddress,
                pubkey: pubkey,
                amount: amount,
            },
        };
    };
    RegisterVolunteerValidatorProposal.fromData = function (proto, _isClassic) {
        var title = proto.title, description = proto.description, validatorDescription = proto.validatorDescription, delegatorAddress = proto.delegatorAddress, validatorAddress = proto.validatorAddress, pubkey = proto.pubkey, amount = proto.amount;
        return new RegisterVolunteerValidatorProposal(title, description, validatorDescription, delegatorAddress, validatorAddress, pubkey, amount);
    };
    RegisterVolunteerValidatorProposal.prototype.toData = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorDescription = _a.validatorDescription, delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, pubkey = _a.pubkey, amount = _a.amount;
        return {
            '@type': '/xpla.volunteer.v1beta1.RegisterVolunteerValidatorProposal',
            title: title,
            description: description,
            validatorDescription: validatorDescription,
            delegatorAddress: delegatorAddress,
            validatorAddress: validatorAddress,
            pubkey: pubkey,
            amount: amount,
        };
    };
    RegisterVolunteerValidatorProposal.fromProto = function (proto, _isClassic) {
        return new RegisterVolunteerValidatorProposal(proto.title, proto.description, proto.validatorDescription, proto.delegatorAddress, proto.validatorAddress, proto.pubkey, proto.amount);
    };
    RegisterVolunteerValidatorProposal.prototype.toProto = function (_isClassic) {
        var _a = this, title = _a.title, description = _a.description, validatorDescription = _a.validatorDescription, delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, pubkey = _a.pubkey, amount = _a.amount;
        return proposal_1.RegisterVolunteerValidatorProposal.fromPartial({
            title: title,
            description: description,
            validatorDescription: validatorDescription,
            delegatorAddress: delegatorAddress,
            validatorAddress: validatorAddress,
            pubkey: pubkey,
            amount: amount,
        });
    };
    RegisterVolunteerValidatorProposal.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/xpla.volunteer.v1beta1.RegisterVolunteerValidatorProposal',
            value: proposal_1.RegisterVolunteerValidatorProposal.encode(this.toProto(isClassic)).finish(),
        });
    };
    RegisterVolunteerValidatorProposal.unpackAny = function (msgAny, isClassic) {
        return RegisterVolunteerValidatorProposal.fromProto(proposal_1.RegisterVolunteerValidatorProposal.decode(msgAny.value), isClassic);
    };
    return RegisterVolunteerValidatorProposal;
}(json_1.JSONSerializable));
exports.RegisterVolunteerValidatorProposal = RegisterVolunteerValidatorProposal;
//# sourceMappingURL=RegisterVolunteerValidatorProposal.js.map