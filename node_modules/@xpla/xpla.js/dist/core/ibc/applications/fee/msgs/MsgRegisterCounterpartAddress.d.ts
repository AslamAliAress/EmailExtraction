import { JSONSerializable } from '../../../../../util/json';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgRegisterCounterpartyPayee as MsgRegisterCounterpartyAddress_pb } from '@xpla/xpla.proto/ibc/applications/fee/v1/tx';
/**
 * MsgRegisterCounterpartyAddress defines the request type for the RegisterCounterpartyAddress rpc
 */
export declare class MsgRegisterCounterpartyAddress extends JSONSerializable<any, MsgRegisterCounterpartyAddress.Data, MsgRegisterCounterpartyAddress.Proto> {
    /** unique port identifier */
    portId: string;
    /** unique channel identifier */
    channelId: string;
    /** the relayer address */
    relayer: string;
    /** the counterparty payee address */
    counterpartyPayee: string;
    constructor(
    /** unique port identifier */
    portId: string, 
    /** unique channel identifier */
    channelId: string, 
    /** the relayer address */
    relayer: string, 
    /** the counterparty payee address */
    counterpartyPayee: string);
    static fromAmino(_: any, isClassic?: boolean): MsgRegisterCounterpartyAddress;
    toAmino(isClassic?: boolean): any;
    static fromData(data: MsgRegisterCounterpartyAddress.Data, isClassic?: boolean): MsgRegisterCounterpartyAddress;
    toData(isClassic?: boolean): MsgRegisterCounterpartyAddress.Data;
    static fromProto(proto: MsgRegisterCounterpartyAddress.Proto, isClassic?: boolean): MsgRegisterCounterpartyAddress;
    toProto(isClassic?: boolean): MsgRegisterCounterpartyAddress.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgRegisterCounterpartyAddress;
}
export declare namespace MsgRegisterCounterpartyAddress {
    interface Data {
        '@type': '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee';
        portId: string;
        channelId: string;
        relayer: string;
        counterpartyPayee: string;
    }
    type Proto = MsgRegisterCounterpartyAddress_pb;
}
