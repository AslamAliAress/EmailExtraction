"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tip = void 0;
var json_1 = require("../util/json");
var Coins_1 = require("./Coins");
var tx_1 = require("@xpla/xpla.proto/cosmos/tx/v1beta1/tx");
/**
 * Tip is the tip used for meta-transactions.
 */
var Tip = /** @class */ (function (_super) {
    __extends(Tip, _super);
    /**
     * Creates a new Tip object.
     * @param amount is the amount of the tip
     * @param tipper is the address of the account paying for the tip
     */
    function Tip(amount, tipper) {
        var _this = _super.call(this) || this;
        _this.tipper = tipper;
        _this.amount = new Coins_1.Coins(amount);
        return _this;
    }
    Tip.fromAmino = function (data) {
        var amount = data.amount, tipper = data.tipper;
        return new Tip(Coins_1.Coins.fromAmino(amount), tipper);
    };
    Tip.prototype.toAmino = function () {
        return {
            amount: this.amount.toAmino(),
            tipper: this.tipper,
        };
    };
    Tip.fromData = function (data) {
        return new Tip(Coins_1.Coins.fromData(data.amount), data.tipper);
    };
    Tip.prototype.toData = function () {
        var _a = this, amount = _a.amount, tipper = _a.tipper;
        return {
            amount: amount.toData(),
            tipper: tipper,
        };
    };
    Tip.fromProto = function (proto) {
        return new Tip(Coins_1.Coins.fromProto(proto.amount), proto.tipper);
    };
    Tip.prototype.toProto = function () {
        var _a = this, amount = _a.amount, tipper = _a.tipper;
        return tx_1.Tip.fromPartial({
            amount: amount.toProto(),
            tipper: tipper,
        });
    };
    return Tip;
}(json_1.JSONSerializable));
exports.Tip = Tip;
//# sourceMappingURL=Tip.js.map