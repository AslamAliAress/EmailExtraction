"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignDocDirectAux = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../util/json");
var tx_1 = require("@xpla/xpla.proto/cosmos/tx/v1beta1/tx");
/**
 * A sign message is a data structure that is used to create a [[StdSignature]] to be later
 * appended to the list of signatures in an [[StdTx]]. Essentially, it contains all the
 * information needed to sign and build a transaction, and can be described as an
 * "unsigned transaction."
 */
var SignDocDirectAux = /** @class */ (function (_super) {
    __extends(SignDocDirectAux, _super);
    /**
     *
     * @param body_bytes is protobuf serialization of a TxBody that matches the representation in TxRaw
     * @param public_key is the public key of the signing account
     * @param chain_id is the identifier of the chain this transaction targets
     * @param account_number is the account number of the account in state
     * @param sequence is the sequence number of the signing account
     * @param tip is the optional tip used for transactions fees paid in another denom
     */
    function SignDocDirectAux(body_bytes, public_key, chain_id, account_number, sequence, tip) {
        var _this = _super.call(this) || this;
        _this.body_bytes = body_bytes;
        _this.public_key = public_key;
        _this.chain_id = chain_id;
        _this.account_number = account_number;
        _this.sequence = sequence;
        _this.tip = tip;
        return _this;
    }
    SignDocDirectAux.prototype.toAmino = function (_isClassic) {
        var _a = this, body_bytes = _a.body_bytes, public_key = _a.public_key, chain_id = _a.chain_id, account_number = _a.account_number, sequence = _a.sequence, tip = _a.tip;
        return {
            body_bytes: body_bytes,
            public_key: public_key,
            chain_id: chain_id,
            account_number: account_number,
            sequence: sequence,
            tip: tip,
        };
    };
    SignDocDirectAux.prototype.toData = function (_isClassic) {
        var _a = this, body_bytes = _a.body_bytes, public_key = _a.public_key, chain_id = _a.chain_id, account_number = _a.account_number, sequence = _a.sequence, tip = _a.tip;
        return {
            body_bytes: body_bytes,
            public_key: public_key,
            chain_id: chain_id,
            account_number: account_number,
            sequence: sequence,
            tip: tip,
        };
    };
    SignDocDirectAux.prototype.toProto = function (_isClassic) {
        var _a = this, body_bytes = _a.body_bytes, public_key = _a.public_key, chain_id = _a.chain_id, account_number = _a.account_number, sequence = _a.sequence, tip = _a.tip;
        return tx_1.SignDocDirectAux.fromPartial({
            bodyBytes: body_bytes,
            publicKey: public_key,
            chainId: chain_id,
            accountNumber: account_number,
            sequence: sequence,
            tip: tip,
        });
    };
    SignDocDirectAux.prototype.toUnSignedTx = function () {
        throw new Error('Not supported yet');
    };
    SignDocDirectAux.prototype.toBytes = function (isClassic) {
        return tx_1.SignDocDirectAux.encode(this.toProto(isClassic)).finish();
    };
    return SignDocDirectAux;
}(json_1.JSONSerializable));
exports.SignDocDirectAux = SignDocDirectAux;
//# sourceMappingURL=SignDocDirectAux.js.map