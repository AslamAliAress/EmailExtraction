import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Coins } from '../../../Coins';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgExecuteContract as MsgExecuteContractV1_pb } from '@xpla/xpla.proto/cosmwasm/wasm/v1/tx';
export declare class MsgExecuteContractV1 extends JSONSerializable<MsgExecuteContractV1.Amino, MsgExecuteContractV1.Data, MsgExecuteContractV1.Proto> {
    sender: AccAddress;
    contract: AccAddress;
    execute_msg: object | string;
    coins: Coins;
    /**
     * @param sender contract user
     * @param contract contract address
     * @param execute_msg HandleMsg to pass as arguments for contract invocation
     * @param coins coins to be sent to contract
     */
    constructor(sender: AccAddress, contract: AccAddress, execute_msg: object | string, coins?: Coins.Input);
    static fromAmino(data: MsgExecuteContractV1.Amino, _isClassic?: boolean): MsgExecuteContractV1;
    toAmino(_isClassic?: boolean): MsgExecuteContractV1.Amino;
    static fromProto(proto: MsgExecuteContractV1.Proto, _isClassic?: boolean): MsgExecuteContractV1;
    toProto(_isClassic?: boolean): MsgExecuteContractV1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgExecuteContractV1;
    static fromData(data: MsgExecuteContractV1.Data, _isClassic?: boolean): MsgExecuteContractV1;
    toData(_isClassic?: boolean): MsgExecuteContractV1.Data;
}
export declare namespace MsgExecuteContractV1 {
    interface Amino {
        type: 'wasm/MsgExecuteContract';
        value: {
            sender: AccAddress;
            contract: AccAddress;
            msg: object | string;
            funds: Coins.Amino;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgExecuteContract';
        sender: AccAddress;
        contract: AccAddress;
        msg: object | string;
        funds: Coins.Data;
    }
    type Proto = MsgExecuteContractV1_pb;
}
