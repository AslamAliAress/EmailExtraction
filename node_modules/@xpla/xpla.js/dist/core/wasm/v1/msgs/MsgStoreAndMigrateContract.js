"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgStoreAndMigrateContractV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var AccessConfig_1 = require("../AccessConfig");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmwasm/wasm/v1/tx");
var MsgStoreAndMigrateContractV1 = /** @class */ (function (_super) {
    __extends(MsgStoreAndMigrateContractV1, _super);
    /**
     * @param authority is the address of the governance account
     * @param wasm_byte_code can be raw or gzip compressed
     * @param instantiate_permission to apply on contract creation, optional
     * @param contract contract address to be migrated from
     * @param migrate_msg JSON message to configure the migrate state of the contract
     */
    function MsgStoreAndMigrateContractV1(authority, wasm_byte_code, instantiate_permission, contract, migrate_msg // json object or string
    ) {
        var _this = _super.call(this) || this;
        _this.authority = authority;
        _this.wasm_byte_code = wasm_byte_code;
        _this.instantiate_permission = instantiate_permission;
        _this.contract = contract;
        _this.migrate_msg = migrate_msg;
        return _this;
    }
    MsgStoreAndMigrateContractV1.fromAmino = function (data, _isClassic) {
        var _a = data.value, authority = _a.authority, wasm_byte_code = _a.wasm_byte_code, instantiate_permission = _a.instantiate_permission, contract = _a.contract, msg = _a.msg;
        return new MsgStoreAndMigrateContractV1(authority, wasm_byte_code, instantiate_permission
            ? AccessConfig_1.AccessConfig.fromAmino(instantiate_permission)
            : undefined, contract, msg);
    };
    MsgStoreAndMigrateContractV1.prototype.toAmino = function (_isClassic) {
        var _a = this, authority = _a.authority, wasm_byte_code = _a.wasm_byte_code, instantiate_permission = _a.instantiate_permission, contract = _a.contract, migrate_msg = _a.migrate_msg;
        return {
            type: 'wasm/MsgStoreAndMigrateContract',
            value: {
                authority: authority,
                wasm_byte_code: wasm_byte_code,
                instantiate_permission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toAmino(),
                contract: contract,
                msg: (0, json_1.removeNull)(migrate_msg),
            },
        };
    };
    MsgStoreAndMigrateContractV1.fromProto = function (proto, _isClassic) {
        return new MsgStoreAndMigrateContractV1(proto.authority, Buffer.from(proto.wasmByteCode).toString('base64'), proto.instantiatePermission
            ? AccessConfig_1.AccessConfig.fromProto(proto.instantiatePermission)
            : undefined, proto.contract, JSON.parse(Buffer.from(proto.msg).toString('utf-8')));
    };
    MsgStoreAndMigrateContractV1.prototype.toProto = function (_isClassic) {
        var _a = this, authority = _a.authority, wasm_byte_code = _a.wasm_byte_code, instantiate_permission = _a.instantiate_permission, contract = _a.contract, migrate_msg = _a.migrate_msg;
        return tx_1.MsgStoreAndMigrateContract.fromPartial({
            authority: authority,
            wasmByteCode: Buffer.from(wasm_byte_code, 'base64'),
            instantiatePermission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toProto(),
            contract: contract,
            msg: Buffer.from(JSON.stringify(migrate_msg), 'utf-8'),
        });
    };
    MsgStoreAndMigrateContractV1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract',
            value: tx_1.MsgStoreAndMigrateContract.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgStoreAndMigrateContractV1.unpackAny = function (msgAny, isClassic) {
        return MsgStoreAndMigrateContractV1.fromProto(tx_1.MsgStoreAndMigrateContract.decode(msgAny.value), isClassic);
    };
    MsgStoreAndMigrateContractV1.fromData = function (data, _isClassic) {
        var authority = data.authority, wasm_byte_code = data.wasm_byte_code, instantiate_permission = data.instantiate_permission, contract = data.contract, msg = data.msg;
        return new MsgStoreAndMigrateContractV1(authority, wasm_byte_code, instantiate_permission
            ? AccessConfig_1.AccessConfig.fromData(instantiate_permission)
            : undefined, contract, msg);
    };
    MsgStoreAndMigrateContractV1.prototype.toData = function (_isClassic) {
        var _a = this, authority = _a.authority, wasm_byte_code = _a.wasm_byte_code, instantiate_permission = _a.instantiate_permission, contract = _a.contract, migrate_msg = _a.migrate_msg;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract',
            authority: authority,
            wasm_byte_code: wasm_byte_code,
            instantiate_permission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toData(),
            contract: contract,
            msg: (0, json_1.removeNull)(migrate_msg),
        };
    };
    return MsgStoreAndMigrateContractV1;
}(json_1.JSONSerializable));
exports.MsgStoreAndMigrateContractV1 = MsgStoreAndMigrateContractV1;
//# sourceMappingURL=MsgStoreAndMigrateContract.js.map