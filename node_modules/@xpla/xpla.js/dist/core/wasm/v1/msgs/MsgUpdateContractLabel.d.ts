import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgUpdateContractLabel as MsgUpdateContractLabelV1_pb } from '@xpla/xpla.proto/cosmwasm/wasm/v1/tx';
export declare class MsgUpdateContractLabelV1 extends JSONSerializable<MsgUpdateContractLabelV1.Amino, MsgUpdateContractLabelV1.Data, MsgUpdateContractLabelV1.Proto> {
    sender: AccAddress;
    new_label: string;
    contract: AccAddress;
    /**
     * @param sender is the that actor that signed the messages
     * @param new_label string to be set
     * @param contract is the address of the smart contract
     */
    constructor(sender: AccAddress, new_label: string, contract: AccAddress);
    static fromAmino(data: MsgUpdateContractLabelV1.Amino, _isClassic?: boolean): MsgUpdateContractLabelV1;
    toAmino(_isClassic?: boolean): MsgUpdateContractLabelV1.Amino;
    static fromProto(proto: MsgUpdateContractLabelV1.Proto, _isClassic?: boolean): MsgUpdateContractLabelV1;
    toProto(_isClassic?: boolean): MsgUpdateContractLabelV1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgUpdateContractLabelV1;
    static fromData(data: MsgUpdateContractLabelV1.Data, _isClassic?: boolean): MsgUpdateContractLabelV1;
    toData(_isClassic?: boolean): MsgUpdateContractLabelV1.Data;
}
export declare namespace MsgUpdateContractLabelV1 {
    interface Amino {
        type: 'wasm/MsgUpdateContractLabel';
        value: {
            sender: AccAddress;
            new_label: string;
            contract: AccAddress;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgUpdateContractLabel';
        sender: AccAddress;
        new_label: string;
        contract: AccAddress;
    }
    type Proto = MsgUpdateContractLabelV1_pb;
}
