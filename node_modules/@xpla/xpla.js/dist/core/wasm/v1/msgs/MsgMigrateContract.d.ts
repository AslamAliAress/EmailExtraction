import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgMigrateContract as MsgMigrateContractV1_pb } from '@xpla/xpla.proto/cosmwasm/wasm/v1/tx';
export declare class MsgMigrateContractV1 extends JSONSerializable<MsgMigrateContractV1.Amino, MsgMigrateContractV1.Data, MsgMigrateContractV1.Proto> {
    admin: AccAddress;
    contract: AccAddress;
    new_code_id: number;
    migrate_msg: object | string;
    /**
     * @param admin contract admin
     * @param contract contract address to be migrated from
     * @param new_code_id reference to the new code on the blockchain
     * @param migrate_msg JSON message to configure the migrate state of the contract
     */
    constructor(admin: AccAddress, contract: AccAddress, new_code_id: number, migrate_msg: object | string);
    static fromAmino(data: MsgMigrateContractV1.Amino, _isClassic?: boolean): MsgMigrateContractV1;
    toAmino(_isClassic?: boolean): MsgMigrateContractV1.Amino;
    static fromProto(proto: MsgMigrateContractV1.Proto, _isClassic?: boolean): MsgMigrateContractV1;
    toProto(_isClassic?: boolean): MsgMigrateContractV1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgMigrateContractV1;
    static fromData(data: MsgMigrateContractV1.Data, _isClassic?: boolean): MsgMigrateContractV1;
    toData(_isClassic?: boolean): MsgMigrateContractV1.Data;
}
export declare namespace MsgMigrateContractV1 {
    interface Amino {
        type: 'wasm/MsgMigrateContract';
        value: {
            sender: AccAddress;
            contract: AccAddress;
            code_id: string;
            msg: object | string;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgMigrateContract';
        sender: AccAddress;
        contract: AccAddress;
        code_id: string;
        msg: object | string;
    }
    type Proto = MsgMigrateContractV1_pb;
}
