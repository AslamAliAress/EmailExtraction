"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgInstantiateContract2V1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var Coins_1 = require("../../../Coins");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmwasm/wasm/v1/tx");
var MsgInstantiateContract2V1 = /** @class */ (function (_super) {
    __extends(MsgInstantiateContract2V1, _super);
    /**
     * @param sender is the that actor that signed the messages
     * @param admin is an optional address that can execute migrations
     * @param code_id is the reference to the stored WASM code
     * @param label is metadata to be stored with a contract instance
     * @param msg json encoded message to be passed to the contract on instantiation
     * @param funds coins that are transferred to the contract on instantiation
     * @param salt is an arbitrary value provided by the sender. Size can be 1 to 64
     * @param fix_msg include the msg value into the hash for the predictable address. Default is false
     */
    function MsgInstantiateContract2V1(sender, admin, code_id, label, msg, funds, salt, fix_msg) {
        if (funds === void 0) { funds = {}; }
        var _this = _super.call(this) || this;
        _this.sender = sender;
        _this.admin = admin;
        _this.code_id = code_id;
        _this.label = label;
        _this.msg = msg;
        _this.salt = salt;
        _this.fix_msg = fix_msg;
        _this.funds = new Coins_1.Coins(funds);
        return _this;
    }
    MsgInstantiateContract2V1.fromAmino = function (data, _isClassic) {
        var _a = data.value, sender = _a.sender, admin = _a.admin, code_id = _a.code_id, label = _a.label, msg = _a.msg, funds = _a.funds, salt = _a.salt, fix_msg = _a.fix_msg;
        return new MsgInstantiateContract2V1(sender, admin, Number.parseInt(code_id), label, msg, Coins_1.Coins.fromAmino(funds), salt, fix_msg);
    };
    MsgInstantiateContract2V1.prototype.toAmino = function (_isClassic) {
        var _a = this, sender = _a.sender, admin = _a.admin, code_id = _a.code_id, label = _a.label, msg = _a.msg, funds = _a.funds, salt = _a.salt, fix_msg = _a.fix_msg;
        return {
            type: 'wasm/MsgInstantiateContract2',
            value: {
                sender: sender,
                admin: admin,
                code_id: code_id.toFixed(),
                label: label,
                msg: (0, json_1.removeNull)(msg),
                funds: funds.toAmino(),
                salt: (0, json_1.removeNull)(salt),
                fix_msg: fix_msg,
            },
        };
    };
    MsgInstantiateContract2V1.fromProto = function (proto, _isClassic) {
        return new MsgInstantiateContract2V1(proto.sender, proto.admin != null && proto.admin !== '' ? proto.admin : undefined, proto.codeId.toNumber(), proto.label, JSON.parse(Buffer.from(proto.msg).toString('utf-8')), Coins_1.Coins.fromProto(proto.funds), Buffer.from(proto.salt).toString('hex'), proto.fixMsg);
    };
    MsgInstantiateContract2V1.prototype.toProto = function (_isClassic) {
        var _a = this, sender = _a.sender, admin = _a.admin, code_id = _a.code_id, label = _a.label, msg = _a.msg, funds = _a.funds, salt = _a.salt, fix_msg = _a.fix_msg;
        return tx_1.MsgInstantiateContract2.fromPartial({
            sender: sender,
            admin: admin,
            codeId: code_id,
            label: label,
            msg: Buffer.from(JSON.stringify(msg), 'utf-8'),
            funds: funds.toProto(),
            salt: Buffer.from(salt, 'hex'),
            fixMsg: fix_msg,
        });
    };
    MsgInstantiateContract2V1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgInstantiateContract2',
            value: tx_1.MsgInstantiateContract2.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgInstantiateContract2V1.unpackAny = function (msgAny, isClassic) {
        return MsgInstantiateContract2V1.fromProto(tx_1.MsgInstantiateContract2.decode(msgAny.value), isClassic);
    };
    MsgInstantiateContract2V1.fromData = function (data, _isClassic) {
        var sender = data.sender, admin = data.admin, code_id = data.code_id, label = data.label, msg = data.msg, funds = data.funds, salt = data.salt, fix_msg = data.fix_msg;
        return new MsgInstantiateContract2V1(sender, admin != null && admin !== '' ? admin : undefined, Number.parseInt(code_id), label, msg, Coins_1.Coins.fromData(funds), salt, fix_msg);
    };
    MsgInstantiateContract2V1.prototype.toData = function (_isClassic) {
        var _a = this, sender = _a.sender, admin = _a.admin, code_id = _a.code_id, label = _a.label, msg = _a.msg, funds = _a.funds, salt = _a.salt, fix_msg = _a.fix_msg;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgInstantiateContract2',
            sender: sender,
            admin: admin || '',
            code_id: code_id.toFixed(),
            label: label,
            msg: (0, json_1.removeNull)(msg),
            funds: funds.toData(),
            salt: salt,
            fix_msg: fix_msg,
        };
    };
    return MsgInstantiateContract2V1;
}(json_1.JSONSerializable));
exports.MsgInstantiateContract2V1 = MsgInstantiateContract2V1;
//# sourceMappingURL=MsgInstantiateContract2.js.map