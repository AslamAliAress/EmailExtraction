import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Coins } from '../../../Coins';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgInstantiateContract2 as MsgInstantiateContract2V1_pb } from '@xpla/xpla.proto/cosmwasm/wasm/v1/tx';
export declare class MsgInstantiateContract2V1 extends JSONSerializable<MsgInstantiateContract2V1.Amino, MsgInstantiateContract2V1.Data, MsgInstantiateContract2V1.Proto> {
    sender: AccAddress;
    admin: AccAddress | undefined;
    code_id: number;
    label: string;
    msg: object | string;
    salt: string;
    fix_msg: boolean;
    funds: Coins;
    /**
     * @param sender is the that actor that signed the messages
     * @param admin is an optional address that can execute migrations
     * @param code_id is the reference to the stored WASM code
     * @param label is metadata to be stored with a contract instance
     * @param msg json encoded message to be passed to the contract on instantiation
     * @param funds coins that are transferred to the contract on instantiation
     * @param salt is an arbitrary value provided by the sender. Size can be 1 to 64
     * @param fix_msg include the msg value into the hash for the predictable address. Default is false
     */
    constructor(sender: AccAddress, admin: AccAddress | undefined, code_id: number, label: string, msg: object | string, funds: Coins.Input | undefined, salt: string, fix_msg: boolean);
    static fromAmino(data: MsgInstantiateContract2V1.Amino, _isClassic?: boolean): MsgInstantiateContract2V1;
    toAmino(_isClassic?: boolean): MsgInstantiateContract2V1.Amino;
    static fromProto(proto: MsgInstantiateContract2V1.Proto, _isClassic?: boolean): MsgInstantiateContract2V1;
    toProto(_isClassic?: boolean): MsgInstantiateContract2V1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgInstantiateContract2V1;
    static fromData(data: MsgInstantiateContract2V1.Data, _isClassic?: boolean): MsgInstantiateContract2V1;
    toData(_isClassic?: boolean): MsgInstantiateContract2V1.Data;
}
export declare namespace MsgInstantiateContract2V1 {
    interface Amino {
        type: 'wasm/MsgInstantiateContract2';
        value: {
            sender: AccAddress;
            admin?: AccAddress;
            code_id: string;
            label: string;
            msg: object | string;
            funds: Coins.Amino;
            salt: string;
            fix_msg: boolean;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgInstantiateContract2';
        sender: AccAddress;
        admin: AccAddress;
        code_id: string;
        label: string;
        msg: object | string;
        funds: Coins.Data;
        salt: string;
        fix_msg: boolean;
    }
    type Proto = MsgInstantiateContract2V1_pb;
}
