"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fee = void 0;
var json_1 = require("../util/json");
var Coins_1 = require("./Coins");
var numeric_1 = require("./numeric");
var tx_1 = require("@xpla/xpla.proto/cosmos/tx/v1beta1/tx");
/**
 * A transaction must include a fee, otherwise it will be rejected.
 */
var Fee = /** @class */ (function (_super) {
    __extends(Fee, _super);
    /**
     * Creates a new Fee object.
     * @param gas gas limit
     * @param amount amount to be paid to validator
     */
    function Fee(gas_limit, amount, payer, granter) {
        var _this = _super.call(this) || this;
        _this.gas_limit = gas_limit;
        _this.payer = payer;
        _this.granter = granter;
        _this.amount = new Coins_1.Coins(amount);
        if (payer && payer.length < 1)
            payer = undefined;
        if (granter && granter.length < 1)
            granter = undefined;
        return _this;
    }
    Fee.fromAmino = function (data) {
        var gas = data.gas, amount = data.amount, payer = data.payer, granter = data.granter;
        return new Fee(Number.parseInt(gas), Coins_1.Coins.fromAmino(amount), payer, granter);
    };
    Fee.prototype.toAmino = function () {
        var _a = this, gas_limit = _a.gas_limit, amount = _a.amount, payer = _a.payer, granter = _a.granter;
        return {
            gas: new numeric_1.Int(gas_limit).toString(),
            amount: amount.toAmino(),
            payer: payer,
            granter: granter,
        };
    };
    Fee.fromData = function (data) {
        return new Fee(Number.parseInt(data.gas_limit), Coins_1.Coins.fromData(data.amount), data.payer, data.granter);
    };
    Fee.prototype.toData = function () {
        var _a = this, gas_limit = _a.gas_limit, amount = _a.amount, payer = _a.payer, granter = _a.granter;
        return {
            gas_limit: gas_limit.toFixed(),
            amount: amount.toData(),
            granter: granter,
            payer: payer,
        };
    };
    Fee.fromProto = function (proto) {
        return new Fee(proto.gasLimit.toNumber(), Coins_1.Coins.fromProto(proto.amount), proto.payer.length > 0 ? proto.payer : undefined, proto.granter.length > 0 ? proto.granter : undefined);
    };
    Fee.prototype.toProto = function () {
        var _a = this, gas_limit = _a.gas_limit, amount = _a.amount, payer = _a.payer, granter = _a.granter;
        return tx_1.Fee.fromPartial({
            gasLimit: gas_limit,
            amount: amount.toProto(),
            granter: granter,
            payer: payer,
        });
    };
    /**
     * Gets the minimum gas prices implied by the fee. Minimum gas prices are `fee amount / gas`.
     */
    Fee.prototype.gasPrices = function () {
        return this.amount.toDecCoins().div(this.gas_limit);
    };
    return Fee;
}(json_1.JSONSerializable));
exports.Fee = Fee;
//# sourceMappingURL=Fee.js.map