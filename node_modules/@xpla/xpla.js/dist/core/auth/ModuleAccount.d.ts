import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
import { BaseAccount } from './BaseAccount';
import { ModuleAccount as ModuleAccount_pb } from '@xpla/xpla.proto/cosmos/auth/v1beta1/auth';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
/**
 * Stores information about an account fetched from the blockchain.
 */
export declare class ModuleAccount extends JSONSerializable<ModuleAccount.Amino, ModuleAccount.Data, ModuleAccount.Proto> {
    base_account: BaseAccount | undefined;
    name: string;
    permissions: string[];
    /**
     * Creates a new Account object, holding information about a basic account.
     *
     * @param base_account
     * @param name
     * @param permissions
     */
    constructor(base_account: BaseAccount | undefined, name: string, permissions: string[]);
    get address(): AccAddress | undefined;
    hasPermission(permission: string): boolean;
    toAmino(isClassic?: boolean): ModuleAccount.Amino;
    static fromAmino(data: ModuleAccount.Amino, _isClassic?: boolean): ModuleAccount;
    static fromData(data: ModuleAccount.Data, _isClassic?: boolean): ModuleAccount;
    toData(_isClassic?: boolean): ModuleAccount.Data;
    static fromProto(proto: ModuleAccount.Proto, _isClassic?: boolean): ModuleAccount;
    toProto(_isClassic?: boolean): ModuleAccount.Proto;
    packAny(_isClassic?: boolean): Any;
    static unpackAny(pubkeyAny: Any, _isClassic?: boolean): ModuleAccount;
}
export declare namespace ModuleAccount {
    interface Amino {
        type: 'cosmos-sdk/ModuleAccount';
        value: {
            base_account: BaseAccount.Amino | undefined;
            name: string;
            permissions: string[];
        };
    }
    interface Data {
        '@type': '/cosmos.auth.v1beta1.ModuleAccount';
        base_account: BaseAccount.Data | undefined;
        name: string;
        permissions: string[];
    }
    type Proto = ModuleAccount_pb;
}
