"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitEvidence = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/evidence/v1beta1/tx");
/**
 * A basic message for sending [[Coins]] between Xpla accounts.
 */
var MsgSubmitEvidence = /** @class */ (function (_super) {
    __extends(MsgSubmitEvidence, _super);
    /**
     * @param from_address sender's address
     * @param to_address recipient's address
     * @param amount value of the transaction
     */
    function MsgSubmitEvidence(submitter, evidence) {
        var _this = _super.call(this) || this;
        _this.submitter = submitter;
        _this.evidence = evidence;
        return _this;
    }
    MsgSubmitEvidence.fromAmino = function (data, _isClassic) {
        var _a = data.value, submitter = _a.submitter, evidence = _a.evidence;
        return new MsgSubmitEvidence(submitter, evidence);
    };
    MsgSubmitEvidence.prototype.toAmino = function (isClassic) {
        var _a = this, submitter = _a.submitter, evidence = _a.evidence;
        return {
            type: isClassic
                ? 'bank/MsgSubmitEvidence'
                : 'cosmos-sdk/MsgSubmitEvidence',
            value: {
                submitter: submitter,
                evidence: evidence,
            },
        };
    };
    MsgSubmitEvidence.fromData = function (data, _isClassic) {
        var submitter = data.submitter, evidence = data.evidence;
        return new MsgSubmitEvidence(submitter, evidence);
    };
    MsgSubmitEvidence.prototype.toData = function (_isClassic) {
        var _a = this, submitter = _a.submitter, evidence = _a.evidence;
        return {
            '@type': '/cosmos.bank.v1beta1.MsgSubmitEvidence',
            submitter: submitter,
            evidence: evidence,
        };
    };
    MsgSubmitEvidence.fromProto = function (proto, _isClassic) {
        return new MsgSubmitEvidence(proto.submitter, proto.evidence);
    };
    MsgSubmitEvidence.prototype.toProto = function (_isClassic) {
        var _a = this, submitter = _a.submitter, evidence = _a.evidence;
        return tx_1.MsgSubmitEvidence.fromPartial({
            submitter: submitter,
            evidence: evidence,
        });
    };
    MsgSubmitEvidence.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.bank.v1beta1.MsgSubmitEvidence',
            value: tx_1.MsgSubmitEvidence.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgSubmitEvidence.unpackAny = function (msgAny, isClassic) {
        return MsgSubmitEvidence.fromProto(tx_1.MsgSubmitEvidence.decode(msgAny.value), isClassic);
    };
    return MsgSubmitEvidence;
}(json_1.JSONSerializable));
exports.MsgSubmitEvidence = MsgSubmitEvidence;
//# sourceMappingURL=MsgSubmitEvidence.js.map