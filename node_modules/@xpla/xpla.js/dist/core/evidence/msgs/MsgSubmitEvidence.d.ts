import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgSubmitEvidence as MsgSubmitEvidence_pb } from '@xpla/xpla.proto/cosmos/evidence/v1beta1/tx';
/**
 * A basic message for sending [[Coins]] between Xpla accounts.
 */
export declare class MsgSubmitEvidence extends JSONSerializable<MsgSubmitEvidence.Amino, MsgSubmitEvidence.Data, MsgSubmitEvidence.Proto> {
    submitter: AccAddress;
    evidence?: Any | undefined;
    /**
     * @param from_address sender's address
     * @param to_address recipient's address
     * @param amount value of the transaction
     */
    constructor(submitter: AccAddress, evidence?: Any | undefined);
    static fromAmino(data: MsgSubmitEvidence.Amino, _isClassic?: boolean): MsgSubmitEvidence;
    toAmino(isClassic?: boolean): MsgSubmitEvidence.Amino;
    static fromData(data: MsgSubmitEvidence.Data, _isClassic?: boolean): MsgSubmitEvidence;
    toData(_isClassic?: boolean): MsgSubmitEvidence.Data;
    static fromProto(proto: MsgSubmitEvidence.Proto, _isClassic?: boolean): MsgSubmitEvidence;
    toProto(_isClassic?: boolean): MsgSubmitEvidence.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgSubmitEvidence;
}
export declare namespace MsgSubmitEvidence {
    interface Amino {
        type: 'bank/MsgSubmitEvidence' | 'cosmos-sdk/MsgSubmitEvidence';
        value: {
            submitter: AccAddress;
            evidence: Any | undefined;
        };
    }
    interface Data {
        '@type': '/cosmos.bank.v1beta1.MsgSubmitEvidence';
        submitter: AccAddress;
        evidence: Any | undefined;
    }
    type Proto = MsgSubmitEvidence_pb;
}
