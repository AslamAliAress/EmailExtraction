import { JSONSerializable } from '../../../../util/json';
import { Coins } from '../../../Coins';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgMultiSend as MsgMultiSendV1B1_pb } from '@xpla/xpla.proto/cosmos/bank/v1beta1/tx';
import { Input as InputV1B1_pb, Output as OutputV1B1_pb } from '@xpla/xpla.proto/cosmos/bank/v1beta1/bank';
/**
 * If you have multiple senders and/or multiple recipients, you can use MsgMultiSend,
 * which can batch together the senders and recipients in one message to save on gas
 * fees.
 *
 * Specify the senders and recipients and their corresponding deposit contribution /
 * receiving amounts with [[MsgMultiSend.Input]] or [[MsgMultiSend.Output]].
 *
 * Example:
 *
 * ```ts
 * import { MsgMultiSend } from "@xpla/xpla.js";
 *
 * const inputs: MsgMultiSend.Input[] = [
 *    new MsgMultiSend.Input(
 *      'xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axf6p',
 *      {
 *        ukrw: 123123,
 *      })
 *    ),
 *    new MsgMultiSend.Input('xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfad', [
 *      new Coin('axpla', 123123),
 *    ]),
 *  ];
 *   const outputs: MsgMultiSend.Output[] = [
 *    new MsgMultiSend.Output(
 *      'xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfad',
 *        {
 *          ukrw: 123123,
 *        }
 *    ),
 *    new MsgMultiSend.Output('xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfga',
 *      {
 *        uluna: 123123,
 *      }
 *    ),
 *  ];
 *  const multisend = new MsgMultiSend(inputs, outputs);
 * ```
 */
export declare class MsgMultiSendV1B1 extends JSONSerializable<MsgMultiSendV1B1.Amino, MsgMultiSendV1B1.Data, MsgMultiSendV1B1.Proto> {
    inputs: MsgMultiSendV1B1.Input[];
    outputs: MsgMultiSendV1B1.Output[];
    /**
     * @param inputs inputs
     * @param outputs outputs
     */
    constructor(inputs: MsgMultiSendV1B1.Input[], outputs: MsgMultiSendV1B1.Output[]);
    static fromAmino(data: MsgMultiSendV1B1.Amino, _isClassic?: boolean): MsgMultiSendV1B1;
    toAmino(isClassic?: boolean): MsgMultiSendV1B1.Amino;
    static fromData(data: MsgMultiSendV1B1.Data, _isClassic?: boolean): MsgMultiSendV1B1;
    toData(_isClassic?: boolean): MsgMultiSendV1B1.Data;
    static fromProto(proto: MsgMultiSendV1B1.Proto, _isClassic?: boolean): MsgMultiSendV1B1;
    toProto(_isClassic?: boolean): MsgMultiSendV1B1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgMultiSendV1B1;
}
export declare namespace MsgMultiSendV1B1 {
    interface Amino {
        readonly type: 'bank/MsgMultiSend' | 'cosmos-sdk/MsgMultiSend';
        value: {
            inputs: Input.Amino[];
            outputs: Output.Amino[];
        };
    }
    interface Data {
        '@type': '/cosmos.bank.v1beta1.MsgMultiSend';
        inputs: Input.Data[];
        outputs: Output.Data[];
    }
    type Proto = MsgMultiSendV1B1_pb;
    class Input extends JSONSerializable<Input.Amino, Input.Data, Input.Proto> {
        address: AccAddress;
        /**
         * Value of the transaction
         */
        coins: Coins;
        /**
         * @param address address
         * @param coinsInput coins-compatible input
         */
        constructor(address: AccAddress, coinsInput: Coins.Input);
        toAmino(_isClassic?: boolean): Input.Amino;
        static fromAmino(data: Input.Amino, _isClassic?: boolean): Input;
        toData(_isClassic?: boolean): Input.Data;
        static fromData(data: Input.Data, _isClassic?: boolean): Input;
        toProto(_isClassic?: boolean): Input.Proto;
        static fromProto(proto: Input.Proto, _isClassic?: boolean): Input;
    }
    class Output extends JSONSerializable<Output.Amino, Output.Data, Output.Proto> {
        address: AccAddress;
        /**
         * Value of the transaction
         */
        coins: Coins;
        /**
         * @param address address
         * @param coinsOutput coins-compatible input
         */
        constructor(address: AccAddress, coinsInput: Coins.Input);
        toAmino(_isClassic?: boolean): Output.Amino;
        static fromAmino(data: Output.Amino, _isClassic?: boolean): Output;
        toData(_isClassic?: boolean): Output.Data;
        static fromData(data: Output.Data, _isClassic?: boolean): Output;
        toProto(_isClassic?: boolean): Output.Proto;
        static fromProto(proto: Output.Proto, _isClassic?: boolean): Output;
    }
    namespace Input {
        interface Amino {
            address: AccAddress;
            coins: Coins.Amino;
        }
        interface Data {
            address: AccAddress;
            coins: Coins.Data;
        }
        type Proto = InputV1B1_pb;
    }
    namespace Output {
        interface Amino {
            address: AccAddress;
            coins: Coins.Amino;
        }
        interface Data {
            address: AccAddress;
            coins: Coins.Data;
        }
        type Proto = OutputV1B1_pb;
    }
}
