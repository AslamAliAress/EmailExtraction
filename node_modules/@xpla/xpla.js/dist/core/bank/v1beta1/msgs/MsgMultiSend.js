"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgMultiSendV1B1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var Coins_1 = require("../../../Coins");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/cosmos/bank/v1beta1/tx");
var bank_1 = require("@xpla/xpla.proto/cosmos/bank/v1beta1/bank");
/**
 * If you have multiple senders and/or multiple recipients, you can use MsgMultiSend,
 * which can batch together the senders and recipients in one message to save on gas
 * fees.
 *
 * Specify the senders and recipients and their corresponding deposit contribution /
 * receiving amounts with [[MsgMultiSend.Input]] or [[MsgMultiSend.Output]].
 *
 * Example:
 *
 * ```ts
 * import { MsgMultiSend } from "@xpla/xpla.js";
 *
 * const inputs: MsgMultiSend.Input[] = [
 *    new MsgMultiSend.Input(
 *      'xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axf6p',
 *      {
 *        ukrw: 123123,
 *      })
 *    ),
 *    new MsgMultiSend.Input('xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfad', [
 *      new Coin('axpla', 123123),
 *    ]),
 *  ];
 *   const outputs: MsgMultiSend.Output[] = [
 *    new MsgMultiSend.Output(
 *      'xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfad',
 *        {
 *          ukrw: 123123,
 *        }
 *    ),
 *    new MsgMultiSend.Output('xpla105rz2q5a4w7nv7239tl9c4px5cjy7axx3axfga',
 *      {
 *        uluna: 123123,
 *      }
 *    ),
 *  ];
 *  const multisend = new MsgMultiSend(inputs, outputs);
 * ```
 */
var MsgMultiSendV1B1 = /** @class */ (function (_super) {
    __extends(MsgMultiSendV1B1, _super);
    /**
     * @param inputs inputs
     * @param outputs outputs
     */
    function MsgMultiSendV1B1(inputs, outputs) {
        var _this = _super.call(this) || this;
        _this.inputs = inputs;
        _this.outputs = outputs;
        return _this;
    }
    MsgMultiSendV1B1.fromAmino = function (data, _isClassic) {
        var _a = data.value, inputs = _a.inputs, outputs = _a.outputs;
        return new MsgMultiSendV1B1(inputs.map(function (i) { return MsgMultiSendV1B1.Input.fromAmino(i); }), outputs.map(function (o) { return MsgMultiSendV1B1.Output.fromAmino(o); }));
    };
    MsgMultiSendV1B1.prototype.toAmino = function (isClassic) {
        var _a = this, inputs = _a.inputs, outputs = _a.outputs;
        return {
            type: isClassic ? 'bank/MsgMultiSend' : 'cosmos-sdk/MsgMultiSend',
            value: {
                inputs: inputs.map(function (i) { return i.toAmino(); }),
                outputs: outputs.map(function (o) { return o.toAmino(); }),
            },
        };
    };
    MsgMultiSendV1B1.fromData = function (data, _isClassic) {
        var inputs = data.inputs, outputs = data.outputs;
        return new MsgMultiSendV1B1(inputs.map(function (i) { return MsgMultiSendV1B1.Input.fromData(i); }), outputs.map(function (o) { return MsgMultiSendV1B1.Output.fromData(o); }));
    };
    MsgMultiSendV1B1.prototype.toData = function (_isClassic) {
        var _a = this, inputs = _a.inputs, outputs = _a.outputs;
        return {
            '@type': '/cosmos.bank.v1beta1.MsgMultiSend',
            inputs: inputs.map(function (i) { return i.toData(); }),
            outputs: outputs.map(function (o) { return o.toData(); }),
        };
    };
    MsgMultiSendV1B1.fromProto = function (proto, _isClassic) {
        return new MsgMultiSendV1B1(proto.inputs.map(function (i) { return MsgMultiSendV1B1.Input.fromProto(i); }), proto.outputs.map(function (o) { return MsgMultiSendV1B1.Output.fromProto(o); }));
    };
    MsgMultiSendV1B1.prototype.toProto = function (_isClassic) {
        var _a = this, inputs = _a.inputs, outputs = _a.outputs;
        return tx_1.MsgMultiSend.fromPartial({
            inputs: inputs.map(function (i) { return i.toProto(); }),
            outputs: outputs.map(function (i) { return i.toProto(); }),
        });
    };
    MsgMultiSendV1B1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.bank.v1beta1.MsgMultiSend',
            value: tx_1.MsgMultiSend.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgMultiSendV1B1.unpackAny = function (msgAny, isClassic) {
        return MsgMultiSendV1B1.fromProto(tx_1.MsgMultiSend.decode(msgAny.value), isClassic);
    };
    return MsgMultiSendV1B1;
}(json_1.JSONSerializable));
exports.MsgMultiSendV1B1 = MsgMultiSendV1B1;
(function (MsgMultiSendV1B1) {
    var Input = /** @class */ (function (_super) {
        __extends(Input, _super);
        /**
         * @param address address
         * @param coinsInput coins-compatible input
         */
        function Input(address, coinsInput) {
            var _this = _super.call(this) || this;
            _this.address = address;
            _this.coins = new Coins_1.Coins(coinsInput);
            return _this;
        }
        Input.prototype.toAmino = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return {
                address: address,
                coins: coins.toAmino(),
            };
        };
        Input.fromAmino = function (data, _isClassic) {
            var address = data.address, coins = data.coins;
            return new Input(address, Coins_1.Coins.fromAmino(coins));
        };
        Input.prototype.toData = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return {
                address: address,
                coins: coins.toData(),
            };
        };
        Input.fromData = function (data, _isClassic) {
            var address = data.address, coins = data.coins;
            return new Input(address, Coins_1.Coins.fromData(coins));
        };
        Input.prototype.toProto = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return bank_1.Input.fromPartial({
                address: address,
                coins: coins.toProto(),
            });
        };
        Input.fromProto = function (proto, _isClassic) {
            return new Input(proto.address, Coins_1.Coins.fromProto(proto.coins));
        };
        return Input;
    }(json_1.JSONSerializable));
    MsgMultiSendV1B1.Input = Input;
    var Output = /** @class */ (function (_super) {
        __extends(Output, _super);
        /**
         * @param address address
         * @param coinsOutput coins-compatible input
         */
        function Output(address, coinsInput) {
            var _this = _super.call(this) || this;
            _this.address = address;
            _this.coins = new Coins_1.Coins(coinsInput);
            return _this;
        }
        Output.prototype.toAmino = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return {
                address: address,
                coins: coins.toAmino(),
            };
        };
        Output.fromAmino = function (data, _isClassic) {
            var address = data.address, coins = data.coins;
            return new Output(address, Coins_1.Coins.fromAmino(coins));
        };
        Output.prototype.toData = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return {
                address: address,
                coins: coins.toData(),
            };
        };
        Output.fromData = function (data, _isClassic) {
            var address = data.address, coins = data.coins;
            return new Output(address, Coins_1.Coins.fromData(coins));
        };
        Output.prototype.toProto = function (_isClassic) {
            var _a = this, address = _a.address, coins = _a.coins;
            return bank_1.Output.fromPartial({
                address: address,
                coins: coins.toProto(),
            });
        };
        Output.fromProto = function (proto, _isClassic) {
            return new Output(proto.address, Coins_1.Coins.fromProto(proto.coins));
        };
        return Output;
    }(json_1.JSONSerializable));
    MsgMultiSendV1B1.Output = Output;
})(MsgMultiSendV1B1 = exports.MsgMultiSendV1B1 || (exports.MsgMultiSendV1B1 = {}));
exports.MsgMultiSendV1B1 = MsgMultiSendV1B1;
//# sourceMappingURL=MsgMultiSend.js.map