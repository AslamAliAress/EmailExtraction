import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgSignData as MsgSignData_pb } from '@xpla/xpla.proto/offchain/msg';
export declare class MsgSignData extends JSONSerializable<MsgSignData.Amino, MsgSignData.Data, MsgSignData.Proto> {
    signer: AccAddress;
    raw_data: Uint8Array;
    /**
     * @param signer is the bech32 representation of the signer's account address
     * @param data represents the raw bytes of the content that is signed (text, json, etc)
     */
    constructor(signer: AccAddress, raw_data: Uint8Array);
    static fromAmino(data: MsgSignData.Amino, _isClassic?: boolean): MsgSignData;
    toAmino(_isClassic?: boolean): MsgSignData.Amino;
    static fromData(data: MsgSignData.Data, _isClassic?: boolean): MsgSignData;
    toData(_isClassic?: boolean): MsgSignData.Data;
    static fromProto(proto: MsgSignData.Proto, _isClassic?: boolean): MsgSignData;
    toProto(_isClassic?: boolean): MsgSignData.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgSignData;
}
export declare namespace MsgSignData {
    interface Amino {
        type: 'xpla/MsgSignData';
        value: {
            signer: AccAddress;
            raw_data: Uint8Array;
        };
    }
    interface Data {
        '@type': '/xpla.offchain.auth.MsgSignData';
        signer: AccAddress;
        raw_data: Uint8Array;
    }
    type Proto = MsgSignData_pb;
}
