"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSignData = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var msg_1 = require("@xpla/xpla.proto/offchain/msg");
var MsgSignData = /** @class */ (function (_super) {
    __extends(MsgSignData, _super);
    /**
     * @param signer is the bech32 representation of the signer's account address
     * @param data represents the raw bytes of the content that is signed (text, json, etc)
     */
    function MsgSignData(signer, raw_data) {
        var _this = _super.call(this) || this;
        _this.signer = signer;
        _this.raw_data = raw_data;
        return _this;
    }
    MsgSignData.fromAmino = function (data, _isClassic) {
        var _a = data.value, signer = _a.signer, raw_data = _a.raw_data;
        return new MsgSignData(signer, raw_data);
    };
    MsgSignData.prototype.toAmino = function (_isClassic) {
        var _a = this, signer = _a.signer, raw_data = _a.raw_data;
        return {
            type: 'xpla/MsgSignData',
            value: {
                signer: signer,
                raw_data: raw_data,
            },
        };
    };
    MsgSignData.fromData = function (data, _isClassic) {
        var signer = data.signer, raw_data = data.raw_data;
        return new MsgSignData(signer, raw_data);
    };
    MsgSignData.prototype.toData = function (_isClassic) {
        var _a = this, signer = _a.signer, raw_data = _a.raw_data;
        return {
            '@type': '/xpla.offchain.auth.MsgSignData',
            signer: signer,
            raw_data: raw_data,
        };
    };
    MsgSignData.fromProto = function (proto, _isClassic) {
        return new MsgSignData(proto.signer, proto.data);
    };
    MsgSignData.prototype.toProto = function (_isClassic) {
        var _a = this, signer = _a.signer, raw_data = _a.raw_data;
        return msg_1.MsgSignData.fromPartial({
            signer: signer,
            data: raw_data,
        });
    };
    MsgSignData.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/xpla.offchain.auth.MsgSignData',
            value: msg_1.MsgSignData.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgSignData.unpackAny = function (msgAny, isClassic) {
        return MsgSignData.fromProto(msg_1.MsgSignData.decode(msgAny.value), isClassic);
    };
    return MsgSignData;
}(json_1.JSONSerializable));
exports.MsgSignData = MsgSignData;
//# sourceMappingURL=MsgSignData.js.map