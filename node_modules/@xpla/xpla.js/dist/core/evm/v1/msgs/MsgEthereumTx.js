"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgEthereumTxV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../../util/json");
var any_1 = require("@xpla/xpla.proto/google/protobuf/any");
var tx_1 = require("@xpla/xpla.proto/ethermint/evm/v1/tx");
/**
 * evm MsgEthereumTx
 */
var MsgEthereumTxV1 = /** @class */ (function (_super) {
    __extends(MsgEthereumTxV1, _super);
    /**
     * @param data inner transaction data
     * @param size DEPRECATED: encoded storage size of the transaction
     * @param hash transaction hash in hex format
     * @param from ethereum signer address in hex format
     */
    function MsgEthereumTxV1(hash, from, size, data) {
        var _this = _super.call(this) || this;
        _this.hash = hash;
        _this.from = from;
        _this.size = size;
        _this.data = data;
        return _this;
    }
    MsgEthereumTxV1.fromAmino = function (amino, _isClassic) {
        var _a = amino.value, hash = _a.hash, from = _a.from, size = _a.size, data = _a.data;
        return new MsgEthereumTxV1(hash, from, size, data);
    };
    MsgEthereumTxV1.prototype.toAmino = function (_isClassic) {
        var _a = this, hash = _a.hash, from = _a.from, size = _a.size, data = _a.data;
        return {
            type: 'ethermint/MsgEthereumTx',
            value: {
                hash: hash,
                from: from,
                size: size,
                data: data,
            },
        };
    };
    MsgEthereumTxV1.fromData = function (obj, _isClassic) {
        var hash = obj.hash, from = obj.from, size = obj.size, data = obj.data;
        return new MsgEthereumTxV1(hash, from, size, data);
    };
    MsgEthereumTxV1.prototype.toData = function (_isClassic) {
        var _a = this, hash = _a.hash, from = _a.from, size = _a.size, data = _a.data;
        return {
            '@type': '/ethermint.evm.v1.MsgEthereumTx',
            hash: hash,
            from: from,
            size: size,
            data: data,
        };
    };
    MsgEthereumTxV1.fromProto = function (proto, _isClassic) {
        return new MsgEthereumTxV1(proto.hash, proto.from, proto.size, proto.data);
    };
    MsgEthereumTxV1.prototype.toProto = function (_isClassic) {
        var _a = this, hash = _a.hash, from = _a.from, size = _a.size, data = _a.data;
        return tx_1.MsgEthereumTx.fromPartial({
            data: data,
            size: size,
            hash: hash,
            from: from,
        });
    };
    MsgEthereumTxV1.prototype.packAny = function (isClassic) {
        return any_1.Any.fromPartial({
            typeUrl: '/ethermint.evm.v1.MsgEthereumTx',
            value: tx_1.MsgEthereumTx.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgEthereumTxV1.unpackAny = function (msgAny, isClassic) {
        return MsgEthereumTxV1.fromProto(tx_1.MsgEthereumTx.decode(msgAny.value), isClassic);
    };
    return MsgEthereumTxV1;
}(json_1.JSONSerializable));
exports.MsgEthereumTxV1 = MsgEthereumTxV1;
//# sourceMappingURL=MsgEthereumTx.js.map