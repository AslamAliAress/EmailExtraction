import { JSONSerializable } from '../../../../util/json';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { MsgEthereumTx as MsgEthereumTxV1_pb } from '@xpla/xpla.proto/ethermint/evm/v1/tx';
/**
 * evm MsgEthereumTx
 */
export declare class MsgEthereumTxV1 extends JSONSerializable<MsgEthereumTxV1.Amino, MsgEthereumTxV1.Data, MsgEthereumTxV1.Proto> {
    hash: string;
    from: string;
    size: number;
    data: Any | undefined;
    /**
     * @param data inner transaction data
     * @param size DEPRECATED: encoded storage size of the transaction
     * @param hash transaction hash in hex format
     * @param from ethereum signer address in hex format
     */
    constructor(hash: string, from: string, size: number, data: Any | undefined);
    static fromAmino(amino: MsgEthereumTxV1.Amino, _isClassic?: boolean): MsgEthereumTxV1;
    toAmino(_isClassic?: boolean): MsgEthereumTxV1.Amino;
    static fromData(obj: MsgEthereumTxV1.Data, _isClassic?: boolean): MsgEthereumTxV1;
    toData(_isClassic?: boolean): MsgEthereumTxV1.Data;
    static fromProto(proto: MsgEthereumTxV1.Proto, _isClassic?: boolean): MsgEthereumTxV1;
    toProto(_isClassic?: boolean): MsgEthereumTxV1.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgEthereumTxV1;
}
export declare namespace MsgEthereumTxV1 {
    interface Amino {
        type: 'ethermint/MsgEthereumTx';
        value: {
            data: Any | undefined;
            size: number;
            hash: string;
            from: string;
        };
    }
    interface Data {
        '@type': '/ethermint.evm.v1.MsgEthereumTx';
        data: Any | undefined;
        size: number;
        hash: string;
        from: string;
    }
    type Proto = MsgEthereumTxV1_pb;
}
