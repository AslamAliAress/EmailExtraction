import { JSONSerializable } from '../../../util/json';
import { Dec } from '../../numeric';
import { AccAddress, ValAddress } from '../../bech32';
import { Coin } from '../../Coin';
import { DelegationResponse as DelegationResponseV1B1_pb } from '@xpla/xpla.proto/cosmos/staking/v1beta1/staking';
/**
 * Stores information about the status of a delegation between a delegator and validator, fetched from the blockchain.
 */
export declare class DelegationV1B1 extends JSONSerializable<DelegationV1B1.Amino, DelegationV1B1.Data, DelegationV1B1.Proto> {
    delegator_address: AccAddress;
    validator_address: ValAddress;
    shares: Dec;
    balance: Coin;
    /**
     * @param delegator_address 	delegator's account address
     * @param validator_address 	validator's operator address
     * @param shares 	delegator's shares
     * @param balance balance of the delegation
     */
    constructor(delegator_address: AccAddress, validator_address: ValAddress, shares: Dec, balance: Coin);
    static fromAmino(data: DelegationV1B1.Amino): DelegationV1B1;
    toAmino(): DelegationV1B1.Amino;
    static fromData(data: DelegationV1B1.Data): DelegationV1B1;
    toData(): DelegationV1B1.Data;
    static fromProto(proto: DelegationV1B1.Proto): DelegationV1B1;
    toProto(): DelegationV1B1.Proto;
}
export declare namespace DelegationV1B1 {
    interface Amino {
        delegation: {
            delegator_address: AccAddress;
            validator_address: ValAddress;
            shares: string;
        };
        balance: Coin.Amino;
    }
    interface Data {
        delegation: {
            delegator_address: AccAddress;
            validator_address: ValAddress;
            shares: string;
        };
        balance: Coin.Data;
    }
    type Proto = DelegationResponseV1B1_pb;
}
