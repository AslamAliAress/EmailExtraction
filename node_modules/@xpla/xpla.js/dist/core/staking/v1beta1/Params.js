"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingParamsV1B1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../util/json");
var core_1 = require("../../../core");
var staking_1 = require("@xpla/xpla.proto/cosmos/staking/v1beta1/staking");
var StakingParamsV1B1 = /** @class */ (function (_super) {
    __extends(StakingParamsV1B1, _super);
    /**
     * @param unbonding_time is the time duration of unbonding
     * @param max_validators is the maximum number of validators
     * @param max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)
     * @param historical_entries is the number of historical entries to persist
     * @param bond_denom defines the bondable coin denomination
     * @param min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
     */
    function StakingParamsV1B1(unbonding_time, max_validators, max_entries, historical_entries, bond_denom, min_commission_rate) {
        var _this = _super.call(this) || this;
        _this.unbonding_time = unbonding_time;
        _this.max_validators = max_validators;
        _this.max_entries = max_entries;
        _this.historical_entries = historical_entries;
        _this.bond_denom = bond_denom;
        _this.min_commission_rate = new core_1.Dec(min_commission_rate);
        return _this;
    }
    StakingParamsV1B1.fromAmino = function (data, _) {
        var unbonding_time = data.unbonding_time, max_validators = data.max_validators, max_entries = data.max_entries, historical_entries = data.historical_entries, bond_denom = data.bond_denom, min_commission_rate = data.min_commission_rate;
        return new StakingParamsV1B1(unbonding_time ? core_1.Duration.fromAmino(unbonding_time) : undefined, max_validators !== null && max_validators !== void 0 ? max_validators : 0, max_entries !== null && max_entries !== void 0 ? max_entries : 0, historical_entries !== null && historical_entries !== void 0 ? historical_entries : 0, bond_denom !== null && bond_denom !== void 0 ? bond_denom : '', min_commission_rate !== null && min_commission_rate !== void 0 ? min_commission_rate : '');
    };
    StakingParamsV1B1.prototype.toAmino = function (_) {
        var _a = this, unbonding_time = _a.unbonding_time, max_validators = _a.max_validators, max_entries = _a.max_entries, historical_entries = _a.historical_entries, bond_denom = _a.bond_denom, min_commission_rate = _a.min_commission_rate;
        var res = {
            unbonding_time: unbonding_time ? unbonding_time.toAmino() : undefined,
            max_validators: max_validators,
            max_entries: max_entries,
            historical_entries: historical_entries,
            bond_denom: bond_denom,
            min_commission_rate: min_commission_rate.toFixed(),
        };
        return res;
    };
    StakingParamsV1B1.fromData = function (data, _) {
        var unbonding_time = data.unbonding_time, max_validators = data.max_validators, max_entries = data.max_entries, historical_entries = data.historical_entries, bond_denom = data.bond_denom, min_commission_rate = data.min_commission_rate;
        return new StakingParamsV1B1(unbonding_time ? core_1.Duration.fromData(unbonding_time) : undefined, max_validators, max_entries, historical_entries, bond_denom, min_commission_rate);
    };
    StakingParamsV1B1.prototype.toData = function (_) {
        var _a = this, unbonding_time = _a.unbonding_time, max_validators = _a.max_validators, max_entries = _a.max_entries, historical_entries = _a.historical_entries, bond_denom = _a.bond_denom, min_commission_rate = _a.min_commission_rate;
        var res = {
            '@type': '/cosmos.staking.v1beta1.Params',
            unbonding_time: unbonding_time ? unbonding_time.toData() : undefined,
            max_validators: max_validators,
            max_entries: max_entries,
            historical_entries: historical_entries,
            bond_denom: bond_denom,
            min_commission_rate: min_commission_rate.toFixed(),
        };
        return res;
    };
    StakingParamsV1B1.fromProto = function (proto, _) {
        return new StakingParamsV1B1(proto.unbondingTime ? core_1.Duration.fromProto(proto.unbondingTime) : undefined, proto.maxValidators, proto.maxEntries, proto.historicalEntries, proto.bondDenom, proto.minCommissionRate);
    };
    StakingParamsV1B1.prototype.toProto = function (_) {
        var _a = this, unbonding_time = _a.unbonding_time, max_validators = _a.max_validators, max_entries = _a.max_entries, historical_entries = _a.historical_entries, bond_denom = _a.bond_denom, min_commission_rate = _a.min_commission_rate;
        return staking_1.Params.fromPartial({
            unbondingTime: unbonding_time ? unbonding_time.toProto() : undefined,
            maxValidators: max_validators,
            maxEntries: max_entries,
            historicalEntries: historical_entries,
            bondDenom: bond_denom,
            minCommissionRate: min_commission_rate.toFixed(),
        });
    };
    return StakingParamsV1B1;
}(json_1.JSONSerializable));
exports.StakingParamsV1B1 = StakingParamsV1B1;
//# sourceMappingURL=Params.js.map