"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Msg = void 0;
var auth_1 = require("./auth");
var bank_1 = require("./bank");
var consensus_1 = require("./consensus");
var msgs_1 = require("./distribution/v1beta1/msgs");
var erc20_1 = require("./erc20");
var evm_1 = require("./evm");
var msgs_2 = require("./feegrant/msgs");
var gov_1 = require("./gov");
var group_1 = require("./group");
var mint_1 = require("./mint");
var nft_1 = require("./nft");
var msgs_3 = require("./authz/msgs");
var slashing_1 = require("./slashing");
var staking_1 = require("./staking");
var vesting_1 = require("./vesting");
var upgrade_1 = require("./upgrade");
var wasm_1 = require("./wasm");
var transfer_1 = require("./ibc/applications/transfer");
var client_1 = require("./ibc/msgs/client");
var connection_1 = require("./ibc/msgs/connection");
var channel_1 = require("./ibc/msgs/channel");
var crisis_1 = require("./crisis");
var xpla_1 = require("./xpla");
var Msg;
(function (Msg) {
    function fromAmino(data, isClassic) {
        switch (data.type) {
            // auth
            case 'cosmos-sdk/x/auth/MsgUpdateParams':
                return auth_1.MsgUpdateAuthParamsV1B1.fromAmino(data, isClassic);
            // bank
            case 'bank/MsgSend':
            case 'cosmos-sdk/MsgSend':
                if (data.value.class_id !== undefined)
                    // nft/MsgSend
                    return nft_1.MsgNftSendV1B1.fromAmino(data, isClassic);
                return bank_1.MsgSendV1B1.fromAmino(data, isClassic);
            case 'bank/MsgMultiSend':
            case 'cosmos-sdk/MsgMultiSend':
                return bank_1.MsgMultiSendV1B1.fromAmino(data, isClassic);
            case 'bank/MsgSetSendEnabled':
            case 'cosmos-sdk/MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabledV1B1.fromAmino(data, isClassic);
            case 'bank/MsgUpdateParams':
            case 'cosmos-sdk/x/bank/MsgUpdateParams':
                return bank_1.MsgUpdateBankParamsV1B1.fromAmino(data, isClassic);
            // consensus
            case 'cosmos-sdk/x/consensus/MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParamsV1B1.fromAmino(data, isClassic);
            // distribution
            case 'distribution/MsgModifyWithdrawAddress':
            case 'cosmos-sdk/MsgModifyWithdrawAddress':
                return msgs_1.MsgSetWithdrawAddressV1B1.fromAmino(data, isClassic);
            case 'distribution/MsgWithdrawDelegationReward':
            case 'cosmos-sdk/MsgWithdrawDelegationReward':
                return msgs_1.MsgWithdrawDelegatorRewardV1B1.fromAmino(data, isClassic);
            case 'distribution/MsgWithdrawValidatorCommission':
            case 'cosmos-sdk/MsgWithdrawValCommission':
                return msgs_1.MsgWithdrawValidatorCommissionV1B1.fromAmino(data, isClassic);
            case 'distribution/MsgFundCommunityPool':
            case 'cosmos-sdk/MsgFundCommunityPool':
                return msgs_1.MsgFundCommunityPoolV1B1.fromAmino(data, isClassic);
            case 'distribution/MsgCommunityPoolSpend':
            case 'cosmos-sdk/distr/MsgCommunityPoolSpend':
                return msgs_1.MsgCommunityPoolSpendV1B1.fromAmino(data, isClassic);
            case 'distribution/MsgUpdateParams':
            case 'cosmos-sdk/distribution/MsgUpdateParams':
                return msgs_1.MsgUpdateDistributionParamsV1B1.fromAmino(data, isClassic);
            // feegrant
            case 'feegrant/MsgGrantAllowance':
            case 'cosmos-sdk/MsgGrantAllowance':
                return msgs_2.MsgGrantAllowance.fromAmino(data, isClassic);
            case 'feegrant/MsgRevokeAllowance':
            case 'cosmos-sdk/MsgRevokeAllowance':
                return msgs_2.MsgRevokeAllowance.fromAmino(data, isClassic);
            // gov
            case 'gov/MsgDeposit':
            case 'cosmos-sdk/MsgDeposit':
                return gov_1.MsgDepositV1B1.fromAmino(data, isClassic);
            case 'gov/MsgSubmitProposal':
            case 'cosmos-sdk/MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1B1.fromAmino(data, isClassic);
            case 'cosmos-sdk/v1/MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1.fromAmino(data);
            case 'gov/MsgVote':
            case 'cosmos-sdk/MsgVote':
                if (data.value.metadata !== undefined)
                    // group/MsgVote
                    return group_1.MsgGroupVoteV1.fromAmino(data, isClassic);
                return gov_1.MsgVoteV1B1.fromAmino(data, isClassic);
            case 'gov/MsgVoteWeighted':
            case 'cosmos-sdk/MsgVoteWeighted':
                return gov_1.MsgVoteWeightedV1B1.fromAmino(data, isClassic);
            case 'cosmos-sdk/v1/MsgExecLegacyContent':
                return gov_1.MsgExecLegacyContentV1.fromAmino(data, isClassic);
            case 'cosmos-sdk/x/gov/v1/MsgUpdateParams':
                return gov_1.MsgUpdateGovParamsV1.fromAmino(data, isClassic);
            // group
            case 'group/MsgCreateGroup':
            case 'cosmos-sdk/MsgCreateGroup':
                return group_1.MsgCreateGroupV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupMembers':
            case 'cosmos-sdk/MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembersV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupAdmin':
            case 'cosmos-sdk/MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdminV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupMetadata':
            case 'cosmos-sdk/MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadataV1.fromAmino(data, isClassic);
            case 'group/MsgCreateGroupPolicy':
            case 'cosmos-sdk/MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicyV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupPolicyAdmin':
            case 'cosmos-sdk/MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdminV1.fromAmino(data, isClassic);
            case 'group/MsgCreateGroupWithPolicy':
            case 'cosmos-sdk/MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicyV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupPolicyDecisionPolicy':
            case 'cosmos-sdk/MsgUpdateGroupPolicyDecisionPolicy':
                return group_1.MsgUpdateGroupPolicyDecisionPolicyV1.fromAmino(data, isClassic);
            case 'group/MsgUpdateGroupPolicyMetadata':
            case 'cosmos-sdk/MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadataV1.fromAmino(data, isClassic);
            case 'group/MsgSubmitProposal':
                return group_1.MsgGroupSubmitProposalV1.fromAmino(data, isClassic);
            case 'group/MsgWithdrawProposal':
            case 'cosmos-sdk/MsgWithdrawProposal':
                return group_1.MsgGroupWithdrawProposalV1.fromAmino(data, isClassic);
            case 'group/MsgVote':
                return group_1.MsgGroupVoteV1.fromAmino(data, isClassic);
            case 'group/MsgExec':
                return group_1.MsgGroupExecV1.fromAmino(data, isClassic);
            case 'group/MsgLeaveGroup':
            case 'cosmos-sdk/MsgLeaveGroup':
                return group_1.MsgLeaveGroupV1.fromAmino(data, isClassic);
            // mint
            case 'cosmos-sdk/x/mint/MsgUpdateParams':
                return mint_1.MsgUpdateMintParamsV1B1.fromAmino(data, isClassic);
            // nft
            case 'nft/MsgSend':
                return nft_1.MsgNftSendV1B1.fromAmino(data, isClassic);
            // msgauth
            case 'msgauth/MsgGrantAuthorization':
            case 'cosmos-sdk/MsgGrant':
                return msgs_3.MsgGrantAuthorization.fromAmino(data, isClassic);
            case 'msgauth/MsgRevokeAuthorization':
            case 'cosmos-sdk/MsgRevoke':
                return msgs_3.MsgRevokeAuthorization.fromAmino(data, isClassic);
            case 'msgauth/MsgExecAuthorized':
            case 'cosmos-sdk/MsgExec':
                if (data.value.executor !== undefined)
                    // group/MsgExec
                    return group_1.MsgGroupExecV1.fromAmino(data, isClassic);
                return msgs_3.MsgExecAuthorized.fromAmino(data, isClassic);
            // slashing
            case 'slashing/MsgUnjail':
            case 'cosmos-sdk/MsgUnjail':
                return slashing_1.MsgUnjailV1B1.fromAmino(data, isClassic);
            case 'cosmos-sdk/x/slashing/MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParamsV1B1.fromAmino(data, isClassic);
            // staking
            case 'staking/MsgDelegate':
            case 'cosmos-sdk/MsgDelegate':
                return staking_1.MsgDelegateV1B1.fromAmino(data, isClassic);
            case 'staking/MsgUndelegate':
            case 'cosmos-sdk/MsgUndelegate':
                return staking_1.MsgUndelegateV1B1.fromAmino(data, isClassic);
            case 'staking/MsgBeginRedelegate':
            case 'cosmos-sdk/MsgBeginRedelegate':
                return staking_1.MsgBeginRedelegateV1B1.fromAmino(data, isClassic);
            case 'staking/MsgCreateValidator':
            case 'cosmos-sdk/MsgCreateValidator':
                return staking_1.MsgCreateValidatorV1B1.fromAmino(data, isClassic);
            case 'staking/MsgEditValidator':
            case 'cosmos-sdk/MsgEditValidator':
                return staking_1.MsgEditValidatorV1B1.fromAmino(data, isClassic);
            case 'staking/MsgCancelUnbondingDelegation':
            case 'cosmos-sdk/MsgCancelUnbondingDelegation':
                return staking_1.MsgCancelUnbondingDelegationV1B1.fromAmino(data, isClassic);
            case 'cosmos-sdk/MsgUpdateStakingParams':
                return staking_1.MsgUpdateStakingParamsV1B1.fromAmino(data, isClassic);
            // vesting
            case 'vesting/MsgCreateVestingAccount':
            case 'cosmos-sdk/MsgCreateVestingAccount':
                return vesting_1.MsgCreateVestingAccountV1B1.fromAmino(data, isClassic);
            case 'vesting/MsgCreatePermanentLockedAccount':
            case 'cosmos-sdk/MsgCreatePermanentLockedAccount':
                return vesting_1.MsgCreatePermanentLockedAccountV1B1.fromAmino(data, isClassic);
            case 'vesting/MsgCreatePeriodicVestingAccount':
            case 'cosmos-sdk/MsgCreatePeriodicVestingAccount':
                return vesting_1.MsgCreatePeriodicVestingAccountV1B1.fromAmino(data, isClassic);
            // upgrade
            case 'upgrade/MsgSoftwareUpgrade':
            case 'cosmos-sdk/MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgradeV1B1.fromAmino(data, isClassic);
            case 'upgrade/MsgCancelUpgrade':
            case 'cosmos-sdk/MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgradeV1B1.fromAmino(data, isClassic);
            // wasm
            case 'wasm/MsgStoreCode':
                return wasm_1.MsgStoreCodeV1.fromAmino(data, isClassic);
            case 'wasm/MsgInstantiateContract':
                return wasm_1.MsgInstantiateContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgInstantiateContract2':
                return wasm_1.MsgInstantiateContract2V1.fromAmino(data, isClassic);
            case 'wasm/MsgExecuteContract':
                return wasm_1.MsgExecuteContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgMigrateContract':
                return wasm_1.MsgMigrateContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgUpdateAdmin':
                return wasm_1.MsgUpdateContractAdminV1.fromAmino(data, isClassic);
            case 'wasm/MsgClearContractAdmin':
            case 'wasm/MsgClearAdmin':
                return wasm_1.MsgClearContractAdminV1.fromAmino(data, isClassic);
            case 'wasm/MsgSudoContract':
                return wasm_1.MsgSudoContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgPinCodes':
                return wasm_1.MsgPinCodesV1.fromAmino(data, isClassic);
            case 'wasm/MsgUnpinCodes':
                return wasm_1.MsgUnpinCodesV1.fromAmino(data, isClassic);
            case 'wasm/MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddressesV1.fromAmino(data, isClassic);
            case 'wasm/MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddressesV1.fromAmino(data, isClassic);
            case 'wasm/MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContractV1.fromAmino(data, isClassic);
            case 'wasm/MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabelV1.fromAmino(data, isClassic);
            case 'wasm/MsgUpdateParamsV1':
                return wasm_1.MsgUpdateWasmParamsV1.fromAmino(data, isClassic);
            case 'wasm/MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfigV1.fromAmino(data, isClassic);
            // ibc-transfer
            case 'cosmos-sdk/MsgTransfer':
                return transfer_1.MsgTransfer.fromAmino(data, isClassic);
            // crisis
            case 'crisis/MsgVerifyInvariant':
            case 'cosmos-sdk/MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.fromAmino(data, isClassic);
            // erc20
            case 'ethermint/MsgConvertCoin':
                return erc20_1.MsgConvertCoinV1.fromAmino(data);
            case 'ethermint/MsgConvertERC20':
                return erc20_1.MsgConvertERC20V1.fromAmino(data);
            case 'ethermint/erc20/MsgUpdateParams':
                return erc20_1.MsgUpdateERC20ParamsV1.fromAmino(data);
            // evm
            case 'ethermint/MsgEthereumTx':
                return evm_1.MsgEthereumTxV1.fromAmino(data);
            case 'ethermint/MsgUpdateParams':
                return evm_1.MsgUpdateEvmParamsV1.fromAmino(data);
            // xpla
            case 'xpladev/MsgFundFeeCollector':
                return xpla_1.MsgFundFeeCollectorV1B1.fromAmino(data);
            case 'xpladev/reward/MsgUpdateParams':
                return xpla_1.MsgUpdateRewardParamsV1B1.fromAmino(data);
            default:
                throw Error("not supported msg ".concat(data['type']));
        }
    }
    Msg.fromAmino = fromAmino;
    function fromData(data, isClassic) {
        switch (data['@type']) {
            // auth
            case '/cosmos.auth.v1beta1.MsgUpdateParams':
                return auth_1.MsgUpdateAuthParamsV1B1.fromData(data, isClassic);
            // bank
            case '/cosmos.bank.v1beta1.MsgSend':
                return bank_1.MsgSendV1B1.fromData(data, isClassic);
            case '/cosmos.bank.v1beta1.MsgMultiSend':
                return bank_1.MsgMultiSendV1B1.fromData(data, isClassic);
            case '/cosmos.bank.v1beta1.MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabledV1B1.fromData(data, isClassic);
            case '/cosmos.bank.v1beta1.MsgUpdateParams':
                return bank_1.MsgUpdateBankParamsV1B1.fromData(data, isClassic);
            // consensus
            case '/cosmos.consensus.v1.MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParamsV1B1.fromData(data, isClassic);
            // distribution
            case '/cosmos.distribution.v1beta1.MsgSetWithdrawAddress':
                return msgs_1.MsgSetWithdrawAddressV1B1.fromData(data, isClassic);
            case '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward':
                return msgs_1.MsgWithdrawDelegatorRewardV1B1.fromData(data, isClassic);
            case '/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission':
                return msgs_1.MsgWithdrawValidatorCommissionV1B1.fromData(data, isClassic);
            case '/cosmos.distribution.v1beta1.MsgFundCommunityPool':
                return msgs_1.MsgFundCommunityPoolV1B1.fromData(data, isClassic);
            case '/cosmos.distribution.v1beta1.MsgCommunityPoolSpend':
                return msgs_1.MsgCommunityPoolSpendV1B1.fromData(data, isClassic);
            case '/cosmos.distribution.v1beta1.MsgUpdateParams':
                return msgs_1.MsgUpdateDistributionParamsV1B1.fromData(data, isClassic);
            // feegrant
            case '/cosmos.feegrant.v1beta1.MsgGrantAllowance':
                return msgs_2.MsgGrantAllowance.fromData(data, isClassic);
            case '/cosmos.feegrant.v1beta1.MsgRevokeAllowance':
                return msgs_2.MsgRevokeAllowance.fromData(data, isClassic);
            // gov
            case '/cosmos.gov.v1beta1.MsgDeposit':
                return gov_1.MsgDepositV1B1.fromData(data, isClassic);
            case '/cosmos.gov.v1beta1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1B1.fromData(data, isClassic);
            case '/cosmos.gov.v1beta1.MsgVote':
                return gov_1.MsgVoteV1B1.fromData(data, isClassic);
            case '/cosmos.gov.v1beta1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedV1B1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgDeposit':
                return gov_1.MsgDepositV1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgVote':
                return gov_1.MsgVoteV1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedV1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgExecLegacyContent':
                return gov_1.MsgExecLegacyContentV1.fromData(data, isClassic);
            case '/cosmos.gov.v1.MsgUpdateParams':
                return gov_1.MsgUpdateGovParamsV1.fromData(data, isClassic);
            // group
            case '/cosmos.group.v1.MsgCreateGroup':
                return group_1.MsgCreateGroupV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembersV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdminV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadataV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicyV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdminV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicyV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy':
                return group_1.MsgUpdateGroupPolicyDecisionPolicyV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadataV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgSubmitProposal':
                return group_1.MsgGroupSubmitProposalV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgWithdrawProposal':
                return group_1.MsgGroupWithdrawProposalV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgVote':
                return group_1.MsgGroupVoteV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgExec':
                return group_1.MsgGroupExecV1.fromData(data, isClassic);
            case '/cosmos.group.v1.MsgLeaveGroup':
                return group_1.MsgLeaveGroupV1.fromData(data, isClassic);
            // mint
            case '/cosmos.mint.v1beta1.MsgUpdateParams':
                return mint_1.MsgUpdateMintParamsV1B1.fromData(data, isClassic);
            // nft
            case '/cosmos.nft.v1beta1.MsgSend':
                return nft_1.MsgNftSendV1B1.fromData(data, isClassic);
            // authz
            case '/cosmos.authz.v1beta1.MsgGrant':
                return msgs_3.MsgGrantAuthorization.fromData(data, isClassic);
            case '/cosmos.authz.v1beta1.MsgRevoke':
                return msgs_3.MsgRevokeAuthorization.fromData(data, isClassic);
            case '/cosmos.authz.v1beta1.MsgExec':
                return msgs_3.MsgExecAuthorized.fromData(data, isClassic);
            // slashing
            case '/cosmos.slashing.v1beta1.MsgUnjail':
                return slashing_1.MsgUnjailV1B1.fromData(data, isClassic);
            case '/cosmos.slashing.v1beta1.MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParamsV1B1.fromData(data, isClassic);
            // staking
            case '/cosmos.staking.v1beta1.MsgDelegate':
                return staking_1.MsgDelegateV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgUndelegate':
                return staking_1.MsgUndelegateV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgBeginRedelegate':
                return staking_1.MsgBeginRedelegateV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgCreateValidator':
                return staking_1.MsgCreateValidatorV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgEditValidator':
                return staking_1.MsgEditValidatorV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation':
                return staking_1.MsgCancelUnbondingDelegationV1B1.fromData(data, isClassic);
            case '/cosmos.staking.v1beta1.MsgUpdateParams':
                return staking_1.MsgUpdateStakingParamsV1B1.fromData(data, isClassic);
            // vesting
            case '/cosmos.vesting.v1beta1.MsgCreateVestingAccount':
                return vesting_1.MsgCreateVestingAccountV1B1.fromData(data, isClassic);
            case '/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount':
                return vesting_1.MsgCreatePermanentLockedAccountV1B1.fromData(data, isClassic);
            case '/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount':
                return vesting_1.MsgCreatePeriodicVestingAccountV1B1.fromData(data, isClassic);
            // upgrade
            case '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgradeV1B1.fromData(data, isClassic);
            case '/cosmos.upgrade.v1beta1.MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgradeV1B1.fromData(data, isClassic);
            // wasm
            case '/cosmwasm.wasm.v1.MsgStoreCode':
                return wasm_1.MsgStoreCodeV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract':
                return wasm_1.MsgInstantiateContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgExecuteContract':
                return wasm_1.MsgExecuteContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgMigrateContract':
                return wasm_1.MsgMigrateContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateAdmin':
                return wasm_1.MsgUpdateContractAdminV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgClearAdmin':
                return wasm_1.MsgClearContractAdminV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgSudoContract':
                return wasm_1.MsgSudoContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgPinCodes':
                return wasm_1.MsgPinCodesV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgUnpinCodes':
                return wasm_1.MsgUnpinCodesV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddressesV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddressesV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContractV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabelV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateParams':
                return wasm_1.MsgUpdateWasmParamsV1.fromData(data, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfigV1.fromData(data, isClassic);
            // ibc-transfer
            case '/ibc.applications.transfer.v1.MsgTransfer':
                return transfer_1.MsgTransfer.fromData(data, isClassic);
            // ibc-client
            case '/ibc.core.client.v1.MsgCreateClient':
                return client_1.MsgCreateClient.fromData(data, isClassic);
            case '/ibc.core.client.v1.MsgUpdateClient':
                return client_1.MsgUpdateClient.fromData(data, isClassic);
            case '/ibc.core.client.v1.MsgUpgradeClient':
                return client_1.MsgUpgradeClient.fromData(data, isClassic);
            case '/ibc.core.client.v1.MsgSubmitMisbehaviour':
                return client_1.MsgSubmitMisbehaviour.fromData(data, isClassic);
            // ibc-connection
            case '/ibc.core.connection.v1.MsgConnectionOpenInit':
                return connection_1.MsgConnectionOpenInit.fromData(data, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenTry':
                return connection_1.MsgConnectionOpenTry.fromData(data, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':
                return connection_1.MsgConnectionOpenConfirm.fromData(data, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenAck':
                return connection_1.MsgConnectionOpenAck.fromData(data, isClassic);
            // ibc-channel
            case '/ibc.core.channel.v1.MsgChannelOpenInit':
                return channel_1.MsgChannelOpenInit.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenTry':
                return channel_1.MsgChannelOpenTry.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':
                return channel_1.MsgChannelOpenConfirm.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenAck':
                return channel_1.MsgChannelOpenAck.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgChannelCloseInit':
                return channel_1.MsgChannelCloseInit.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgChannelCloseConfirm':
                return channel_1.MsgChannelCloseConfirm.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgRecvPacket':
                return channel_1.MsgRecvPacket.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgAcknowledgement':
                return channel_1.MsgAcknowledgement.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgTimeout':
                return channel_1.MsgTimeout.fromData(data, isClassic);
            case '/ibc.core.channel.v1.MsgTimeoutOnClose':
                return channel_1.MsgTimeoutOnClose.fromData(data, isClassic);
            // crisis
            case '/cosmos.crisis.v1beta1.MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.fromData(data, isClassic);
            // erc20
            case '/ethermint.erc20.v1.MsgConvertCoin':
            case '/evmos.erc20.v1.MsgConvertCoin':
                return erc20_1.MsgConvertCoinV1.fromData(data);
            case '/ethermint.erc20.v1.MsgConvertERC20':
            case '/evmos.erc20.v1.MsgConvertERC20':
                return erc20_1.MsgConvertERC20V1.fromData(data);
            // evm
            case '/ethermint.evm.v1.MsgEthereumTx':
                return evm_1.MsgEthereumTxV1.fromData(data);
            // xpla
            case '/xpla.reward.v1beta1.MsgFundFeeCollector':
                return xpla_1.MsgFundFeeCollectorV1B1.fromData(data);
            case '/xpla.reward.v1beta1.MsgUpdateParams':
                return xpla_1.MsgUpdateRewardParamsV1B1.fromData(data);
            default:
                throw Error("not supported msg ".concat(data['@type']));
        }
    }
    Msg.fromData = fromData;
    function fromProto(proto, isClassic) {
        switch (proto.typeUrl) {
            // auth
            case '/cosmos.auth.v1beta1.MsgUpdateParams':
                return auth_1.MsgUpdateAuthParamsV1B1.unpackAny(proto, isClassic);
            // bank
            case '/cosmos.bank.v1beta1.MsgSend':
                return bank_1.MsgSendV1B1.unpackAny(proto, isClassic);
            case '/cosmos.bank.v1beta1.MsgMultiSend':
                return bank_1.MsgMultiSendV1B1.unpackAny(proto, isClassic);
            case '/cosmos.bank.v1beta1.MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabledV1B1.unpackAny(proto, isClassic);
            case '/cosmos.bank.v1beta1.MsgUpdateParams':
                return bank_1.MsgUpdateBankParamsV1B1.unpackAny(proto, isClassic);
            // consensus
            case '/cosmos.consensus.v1.MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParamsV1B1.unpackAny(proto, isClassic);
            // distribution
            case '/cosmos.distribution.v1beta1.MsgSetWithdrawAddress':
                return msgs_1.MsgSetWithdrawAddressV1B1.unpackAny(proto, isClassic);
            case '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward':
                return msgs_1.MsgWithdrawDelegatorRewardV1B1.unpackAny(proto, isClassic);
            case '/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission':
                return msgs_1.MsgWithdrawValidatorCommissionV1B1.unpackAny(proto, isClassic);
            case '/cosmos.distribution.v1beta1.MsgFundCommunityPool':
                return msgs_1.MsgFundCommunityPoolV1B1.unpackAny(proto, isClassic);
            case '/cosmos.distribution.v1beta1.MsgCommunityPoolSpend':
                return msgs_1.MsgCommunityPoolSpendV1B1.unpackAny(proto, isClassic);
            case '/cosmos.distribution.v1beta1.MsgUpdateParams':
                return msgs_1.MsgUpdateDistributionParamsV1B1.unpackAny(proto, isClassic);
            // feegrant
            case '/cosmos.feegrant.v1beta1.MsgGrantAllowance':
                return msgs_2.MsgGrantAllowance.unpackAny(proto, isClassic);
            case '/cosmos.feegrant.v1beta1.MsgRevokeAllowance':
                return msgs_2.MsgRevokeAllowance.unpackAny(proto, isClassic);
            // gov
            case '/cosmos.gov.v1beta1.MsgDeposit':
                return gov_1.MsgDepositV1B1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1beta1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1B1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1beta1.MsgVote':
                return gov_1.MsgVoteV1B1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1beta1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedV1B1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgDeposit':
                return gov_1.MsgDepositV1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalV1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgVote':
                return gov_1.MsgVoteV1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedV1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgExecLegacyContent':
                return gov_1.MsgExecLegacyContentV1.unpackAny(proto, isClassic);
            case '/cosmos.gov.v1.MsgUpdateParams':
                return gov_1.MsgUpdateGovParamsV1.unpackAny(proto, isClassic);
            // group
            case '/cosmos.group.v1.MsgCreateGroup':
                return group_1.MsgCreateGroupV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembersV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdminV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadataV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicyV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdminV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicyV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy':
                return group_1.MsgUpdateGroupPolicyDecisionPolicyV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadataV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgSubmitProposal':
                return group_1.MsgGroupSubmitProposalV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgWithdrawProposal':
                return group_1.MsgGroupWithdrawProposalV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgVote':
                return group_1.MsgGroupVoteV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgExec':
                return group_1.MsgGroupExecV1.unpackAny(proto, isClassic);
            case '/cosmos.group.v1.MsgLeaveGroup':
                return group_1.MsgLeaveGroupV1.unpackAny(proto, isClassic);
            // mint
            case '/cosmos.mint.v1beta1.MsgUpdateParams':
                return mint_1.MsgUpdateMintParamsV1B1.unpackAny(proto, isClassic);
            // nft
            case '/cosmos.nft.v1beta1.MsgSend':
                return nft_1.MsgNftSendV1B1.unpackAny(proto, isClassic);
            // authz
            case '/cosmos.authz.v1beta1.MsgGrant':
                return msgs_3.MsgGrantAuthorization.unpackAny(proto, isClassic);
            case '/cosmos.authz.v1beta1.MsgRevoke':
                return msgs_3.MsgRevokeAuthorization.unpackAny(proto, isClassic);
            case '/cosmos.authz.v1beta1.MsgExec':
                return msgs_3.MsgExecAuthorized.unpackAny(proto, isClassic);
            // slashing
            case '/cosmos.slashing.v1beta1.MsgUnjail':
                return slashing_1.MsgUnjailV1B1.unpackAny(proto, isClassic);
            case '/cosmos.slashing.v1beta1.MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParamsV1B1.unpackAny(proto, isClassic);
            // staking
            case '/cosmos.staking.v1beta1.MsgDelegate':
                return staking_1.MsgDelegateV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgUndelegate':
                return staking_1.MsgUndelegateV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgBeginRedelegate':
                return staking_1.MsgBeginRedelegateV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgCreateValidator':
                return staking_1.MsgCreateValidatorV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgEditValidator':
                return staking_1.MsgEditValidatorV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation':
                return staking_1.MsgCancelUnbondingDelegationV1B1.unpackAny(proto, isClassic);
            case '/cosmos.staking.v1beta1.MsgUpdateParams':
                return staking_1.MsgUpdateStakingParamsV1B1.unpackAny(proto, isClassic);
            // vesting
            case '/cosmos.vesting.v1beta1.MsgCreateVestingAccount':
                return vesting_1.MsgCreateVestingAccountV1B1.unpackAny(proto, isClassic);
            case '/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount':
                return vesting_1.MsgCreatePermanentLockedAccountV1B1.unpackAny(proto, isClassic);
            case '/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount':
                return vesting_1.MsgCreatePeriodicVestingAccountV1B1.unpackAny(proto, isClassic);
            // upgrade
            case '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgradeV1B1.unpackAny(proto, isClassic);
            case '/cosmos.upgrade.v1beta1.MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgradeV1B1.unpackAny(proto, isClassic);
            // wasm
            case '/cosmwasm.wasm.v1.MsgStoreCode':
                return wasm_1.MsgStoreCodeV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract':
                return wasm_1.MsgInstantiateContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgExecuteContract':
                return wasm_1.MsgExecuteContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1beta1.MsgMigrateContract':
                return wasm_1.MsgMigrateContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1beta1.MsgUpdateAdmin':
                return wasm_1.MsgUpdateContractAdminV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgClearAdmin':
                return wasm_1.MsgClearContractAdminV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgSudoContract':
                return wasm_1.MsgSudoContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgPinCodes':
                return wasm_1.MsgPinCodesV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgUnpinCodes':
                return wasm_1.MsgUnpinCodesV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddressesV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddressesV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContractV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabelV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateParams':
                return wasm_1.MsgUpdateWasmParamsV1.unpackAny(proto, isClassic);
            case '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfigV1.unpackAny(proto, isClassic);
            // ibc-transfer
            case '/ibc.applications.transfer.v1.MsgTransfer':
                return transfer_1.MsgTransfer.unpackAny(proto, isClassic);
            // ibc-client
            case '/ibc.core.client.v1.MsgCreateClient':
                return client_1.MsgCreateClient.unpackAny(proto, isClassic);
            case '/ibc.core.client.v1.MsgUpdateClient':
                return client_1.MsgUpdateClient.unpackAny(proto, isClassic);
            case '/ibc.core.client.v1.MsgUpgradeClient':
                return client_1.MsgUpgradeClient.unpackAny(proto, isClassic);
            case '/ibc.core.client.v1.MsgSubmitMisbehaviour':
                return client_1.MsgSubmitMisbehaviour.unpackAny(proto, isClassic);
            // ibc-connection
            case '/ibc.core.connection.v1.MsgConnectionOpenInit':
                return connection_1.MsgConnectionOpenInit.unpackAny(proto, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenTry':
                return connection_1.MsgConnectionOpenTry.unpackAny(proto, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':
                return connection_1.MsgConnectionOpenConfirm.unpackAny(proto, isClassic);
            case '/ibc.core.connection.v1.MsgConnectionOpenAck':
                return connection_1.MsgConnectionOpenAck.unpackAny(proto, isClassic);
            // ibc-channel
            case '/ibc.core.channel.v1.MsgChannelOpenInit':
                return channel_1.MsgChannelOpenInit.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenTry':
                return channel_1.MsgChannelOpenTry.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':
                return channel_1.MsgChannelOpenConfirm.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgChannelOpenAck':
                return channel_1.MsgChannelOpenAck.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgChannelCloseInit':
                return channel_1.MsgChannelCloseInit.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgChannelCloseConfirm':
                return channel_1.MsgChannelCloseConfirm.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgRecvPacket':
                return channel_1.MsgRecvPacket.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgAcknowledgement':
                return channel_1.MsgAcknowledgement.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgTimeout':
                return channel_1.MsgTimeout.unpackAny(proto, isClassic);
            case '/ibc.core.channel.v1.MsgTimeoutOnClose':
                return channel_1.MsgTimeoutOnClose.unpackAny(proto, isClassic);
            // crisis
            case '/cosmos.crisis.v1beta1.MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.unpackAny(proto, isClassic);
            // erc20
            case '/ethermint.erc20.v1.MsgConvertCoin':
            case '/evmos.erc20.v1.MsgConvertCoin':
                return erc20_1.MsgConvertCoinV1.unpackAny(proto);
            case '/ethermint.erc20.v1.MsgConvertERC20':
            case '/evmos.erc20.v1.MsgConvertERC20':
                return erc20_1.MsgConvertERC20V1.unpackAny(proto);
            // evm
            case '/ethermint.evm.v1.MsgEthereumTx':
                return evm_1.MsgEthereumTxV1.unpackAny(proto);
            // xpla
            case '/xpla.reward.v1beta1.MsgFundFeeCollector':
                return xpla_1.MsgFundFeeCollectorV1B1.unpackAny(proto);
            case '/xpla.reward.v1beta1.MsgUpdateParams':
                return xpla_1.MsgUpdateRewardParamsV1B1.unpackAny(proto);
            default:
                throw Error("not supported msg ".concat(proto.typeUrl));
        }
    }
    Msg.fromProto = fromProto;
})(Msg = exports.Msg || (exports.Msg = {}));
//# sourceMappingURL=Msg.js.map