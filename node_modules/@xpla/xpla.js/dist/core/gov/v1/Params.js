"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GovParamsV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var json_1 = require("../../../util/json");
var Coins_1 = require("../../Coins");
var numeric_1 = require("../../numeric");
var Duration_1 = require("../../../core/Duration");
var gov_1 = require("@xpla/xpla.proto/cosmos/gov/v1/gov");
var GovParamsV1 = /** @class */ (function (_super) {
    __extends(GovParamsV1, _super);
    /**
     * @param min_deposit Minimum deposit for a proposal to enter voting period
     * @param max_deposit_period Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months
     * @param voting_period Duration of the voting period
     * @param quorum Minimum percentage of total stake needed to vote for a result to be considered valid
     * @param threshold Minimum proportion of Yes votes for proposal to pass. Default value: 0.5
     * @param veto_threshold Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3
     * @param min_initial_deposit_ratio The ratio representing the proportion of the deposit value that must be paid at proposal submission
     * @param burn_vote_quorum burn deposits if a proposal does not meet quorum
     * @param burn_proposal_deposit_prevote burn deposits if the proposal does not enter voting period
     * @param burn_vote_veto burn deposits if quorum with vote type no_veto is met
     */
    function GovParamsV1(min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto) {
        var _this = _super.call(this) || this;
        _this.max_deposit_period = max_deposit_period;
        _this.voting_period = voting_period;
        _this.burn_vote_quorum = burn_vote_quorum;
        _this.burn_proposal_deposit_prevote = burn_proposal_deposit_prevote;
        _this.burn_vote_veto = burn_vote_veto;
        _this.min_deposit = new Coins_1.Coins(min_deposit);
        _this.quorum = new numeric_1.Dec(quorum);
        _this.threshold = new numeric_1.Dec(threshold);
        _this.veto_threshold = new numeric_1.Dec(veto_threshold);
        _this.min_initial_deposit_ratio = new numeric_1.Dec(min_initial_deposit_ratio);
        return _this;
    }
    GovParamsV1.fromAmino = function (data, _) {
        var min_deposit = data.min_deposit, max_deposit_period = data.max_deposit_period, voting_period = data.voting_period, quorum = data.quorum, threshold = data.threshold, veto_threshold = data.veto_threshold, min_initial_deposit_ratio = data.min_initial_deposit_ratio, burn_vote_quorum = data.burn_vote_quorum, burn_proposal_deposit_prevote = data.burn_proposal_deposit_prevote, burn_vote_veto = data.burn_vote_veto;
        return new GovParamsV1(Coins_1.Coins.fromAmino(min_deposit), max_deposit_period ? Duration_1.Duration.fromAmino(max_deposit_period) : undefined, voting_period ? Duration_1.Duration.fromAmino(voting_period) : undefined, quorum !== null && quorum !== void 0 ? quorum : '', threshold !== null && threshold !== void 0 ? threshold : '', veto_threshold !== null && veto_threshold !== void 0 ? veto_threshold : '', min_initial_deposit_ratio !== null && min_initial_deposit_ratio !== void 0 ? min_initial_deposit_ratio : '', burn_vote_quorum !== null && burn_vote_quorum !== void 0 ? burn_vote_quorum : false, burn_proposal_deposit_prevote !== null && burn_proposal_deposit_prevote !== void 0 ? burn_proposal_deposit_prevote : false, burn_vote_veto !== null && burn_vote_veto !== void 0 ? burn_vote_veto : false);
    };
    GovParamsV1.prototype.toAmino = function (_) {
        var _a = this, min_deposit = _a.min_deposit, max_deposit_period = _a.max_deposit_period, voting_period = _a.voting_period, quorum = _a.quorum, threshold = _a.threshold, veto_threshold = _a.veto_threshold, min_initial_deposit_ratio = _a.min_initial_deposit_ratio, burn_vote_quorum = _a.burn_vote_quorum, burn_proposal_deposit_prevote = _a.burn_proposal_deposit_prevote, burn_vote_veto = _a.burn_vote_veto;
        var res = {
            min_deposit: min_deposit.toAmino(),
            max_deposit_period: max_deposit_period
                ? max_deposit_period.toAmino()
                : undefined,
            voting_period: voting_period ? voting_period.toAmino() : undefined,
            quorum: quorum.toFixed(),
            threshold: threshold.toFixed(),
            veto_threshold: veto_threshold.toFixed(),
            min_initial_deposit_ratio: min_initial_deposit_ratio.toFixed(),
            burn_vote_quorum: burn_vote_quorum ? burn_vote_quorum : undefined,
            burn_proposal_deposit_prevote: burn_proposal_deposit_prevote
                ? burn_proposal_deposit_prevote
                : undefined,
            burn_vote_veto: burn_vote_veto ? burn_vote_veto : undefined,
        };
        return res;
    };
    GovParamsV1.fromData = function (data, _) {
        var min_deposit = data.min_deposit, max_deposit_period = data.max_deposit_period, voting_period = data.voting_period, quorum = data.quorum, threshold = data.threshold, veto_threshold = data.veto_threshold, min_initial_deposit_ratio = data.min_initial_deposit_ratio, burn_vote_quorum = data.burn_vote_quorum, burn_proposal_deposit_prevote = data.burn_proposal_deposit_prevote, burn_vote_veto = data.burn_vote_veto;
        return new GovParamsV1(Coins_1.Coins.fromData(min_deposit), max_deposit_period ? Duration_1.Duration.fromData(max_deposit_period) : undefined, voting_period ? Duration_1.Duration.fromData(voting_period) : undefined, quorum, threshold, veto_threshold, min_initial_deposit_ratio, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto);
    };
    GovParamsV1.prototype.toData = function (_) {
        var _a = this, min_deposit = _a.min_deposit, max_deposit_period = _a.max_deposit_period, voting_period = _a.voting_period, quorum = _a.quorum, threshold = _a.threshold, veto_threshold = _a.veto_threshold, min_initial_deposit_ratio = _a.min_initial_deposit_ratio, burn_vote_quorum = _a.burn_vote_quorum, burn_proposal_deposit_prevote = _a.burn_proposal_deposit_prevote, burn_vote_veto = _a.burn_vote_veto;
        var res = {
            '@type': '/cosmos.gov.v1.Params',
            min_deposit: min_deposit.toData(),
            max_deposit_period: max_deposit_period
                ? max_deposit_period.toData()
                : undefined,
            voting_period: voting_period ? voting_period.toData() : undefined,
            quorum: quorum.toFixed(),
            threshold: threshold.toFixed(),
            veto_threshold: veto_threshold.toFixed(),
            min_initial_deposit_ratio: min_initial_deposit_ratio.toFixed(),
            burn_vote_quorum: burn_vote_quorum,
            burn_proposal_deposit_prevote: burn_proposal_deposit_prevote,
            burn_vote_veto: burn_vote_veto,
        };
        return res;
    };
    GovParamsV1.fromProto = function (proto, _) {
        return new GovParamsV1(Coins_1.Coins.fromProto(proto.minDeposit), proto.maxDepositPeriod
            ? Duration_1.Duration.fromProto(proto.maxDepositPeriod)
            : undefined, proto.votingPeriod ? Duration_1.Duration.fromProto(proto.votingPeriod) : undefined, proto.quorum, proto.threshold, proto.vetoThreshold, proto.minInitialDepositRatio, proto.burnVoteQuorum, proto.burnProposalDepositPrevote, proto.burnVoteVeto);
    };
    GovParamsV1.prototype.toProto = function (_) {
        var _a = this, min_deposit = _a.min_deposit, max_deposit_period = _a.max_deposit_period, voting_period = _a.voting_period, quorum = _a.quorum, threshold = _a.threshold, veto_threshold = _a.veto_threshold, min_initial_deposit_ratio = _a.min_initial_deposit_ratio, burn_vote_quorum = _a.burn_vote_quorum, burn_proposal_deposit_prevote = _a.burn_proposal_deposit_prevote, burn_vote_veto = _a.burn_vote_veto;
        return gov_1.Params.fromPartial({
            minDeposit: min_deposit.toProto(),
            maxDepositPeriod: max_deposit_period
                ? max_deposit_period.toProto()
                : undefined,
            votingPeriod: voting_period ? voting_period.toProto() : undefined,
            quorum: quorum.toFixed(),
            threshold: threshold.toFixed(),
            vetoThreshold: veto_threshold.toFixed(),
            minInitialDepositRatio: min_initial_deposit_ratio.toFixed(),
            burnVoteQuorum: burn_vote_quorum,
            burnProposalDepositPrevote: burn_proposal_deposit_prevote,
            burnVoteVeto: burn_vote_veto,
        });
    };
    return GovParamsV1;
}(json_1.JSONSerializable));
exports.GovParamsV1 = GovParamsV1;
//# sourceMappingURL=Params.js.map