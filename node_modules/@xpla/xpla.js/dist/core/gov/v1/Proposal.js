"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalV1 = void 0;
var Coins_1 = require("../../Coins");
var numeric_1 = require("../../numeric");
var json_1 = require("../../../util/json");
var gov_1 = require("@xpla/xpla.proto/cosmos/gov/v1/gov");
var Msg_1 = require("../../Msg");
var msgs_1 = require("./msgs");
/**
 * Stores information pertaining to a submitted proposal, such as its status and time of
 * the voting period
 */
var ProposalV1 = /** @class */ (function (_super) {
    __extends(ProposalV1, _super);
    /**
     *
     * @param id proposal's ID
     * @param messages messages are the arbitrary messages to be executed if the proposal passes
     * @param status proposal's status
     * @param final_tally_result tally result
     * @param submit_time time proposal was submitted and deposit period started
     * @param deposit_end_time time deposit period will end
     * @param total_deposit amount of coins deposited by all users
     * @param voting_start_time time voting period will start
     * @param voting_end_time time voting period will end
     * @param metadata metadata is any arbitrary metadata attached to the proposal
     * @param title title of the proposal
     * @param summary short summary of the proposal
     * @param proposer address of the proposal sumbitter
     */
    function ProposalV1(id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, metadata, title, summary, proposer) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this) || this;
        _this.id = id;
        _this.messages = messages;
        _this.status = status;
        _this.final_tally_result = final_tally_result;
        _this.submit_time = submit_time;
        _this.deposit_end_time = deposit_end_time;
        _this.total_deposit = total_deposit;
        _this.voting_start_time = voting_start_time;
        _this.voting_end_time = voting_end_time;
        _this.metadata = metadata;
        _this.title = title;
        _this.summary = summary;
        _this.proposer = proposer;
        //HACK: If the first message in messages is in legacy format and the content of summary is empty or the same as title, the description of the legacy content is imported into summary.
        if ((_this.summary.length < 1 || _this.summary === _this.title) &&
            messages.length > 0 &&
            messages[0] instanceof msgs_1.MsgExecLegacyContentV1) {
            _this.summary = (_b = (_a = messages[0].content) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : '';
        }
        return _this;
    }
    ProposalV1.fromAmino = function (data, _isClassic) {
        var id = data.id, messages = data.messages, status = data.status, final_tally_result = data.final_tally_result, submit_time = data.submit_time, deposit_end_time = data.deposit_end_time, total_deposit = data.total_deposit, voting_start_time = data.voting_start_time, voting_end_time = data.voting_end_time, metadata = data.metadata, title = data.title, summary = data.summary, proposer = data.proposer;
        return new ProposalV1(Number.parseInt(id), messages.map(function (m) { return Msg_1.Msg.fromAmino(m); }), status, {
            yes: new numeric_1.Int(final_tally_result.yes || 0),
            no: new numeric_1.Int(final_tally_result.no || 0),
            abstain: new numeric_1.Int(final_tally_result.abstain || 0),
            no_with_veto: new numeric_1.Int(final_tally_result.no_with_veto || 0),
        }, new Date(submit_time), new Date(deposit_end_time), Coins_1.Coins.fromAmino(total_deposit), new Date(voting_start_time), new Date(voting_end_time), metadata, title, summary, proposer);
    };
    ProposalV1.prototype.toAmino = function (_isClassic) {
        var _a, _b;
        var _c = this, status = _c.status, final_tally_result = _c.final_tally_result;
        //HACK: If the first message in messages is in legacy format, the title and description of the legacy content have the substance, so the title is taken from the legacy content and the summary has the same value as the title.
        if (this.messages.length > 0 &&
            this.messages[0] instanceof msgs_1.MsgExecLegacyContentV1) {
            this.summary = this.title = (_b = (_a = this.messages[0].content) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : this.title;
        }
        return {
            id: this.id.toFixed(),
            messages: this.messages.map(function (m) { return m.toAmino(); }),
            status: status,
            final_tally_result: {
                yes: final_tally_result.yes.toFixed(),
                no: final_tally_result.no.toFixed(),
                abstain: final_tally_result.abstain.toFixed(),
                no_with_veto: final_tally_result.no_with_veto.toFixed(),
            },
            submit_time: this.submit_time.toISOString(),
            deposit_end_time: this.deposit_end_time.toISOString(),
            total_deposit: this.total_deposit.toAmino(),
            voting_start_time: this.voting_start_time.toISOString(),
            voting_end_time: this.voting_end_time.toISOString(),
            metadata: this.metadata,
            title: this.title,
            summary: this.summary,
            proposer: this.proposer,
        };
    };
    ProposalV1.fromData = function (data, _isClassic) {
        var id = data.id, messages = data.messages, status = data.status, final_tally_result = data.final_tally_result, submit_time = data.submit_time, deposit_end_time = data.deposit_end_time, total_deposit = data.total_deposit, voting_start_time = data.voting_start_time, voting_end_time = data.voting_end_time, metadata = data.metadata, title = data.title, summary = data.summary, proposer = data.proposer;
        return new ProposalV1(Number.parseInt(id), messages.map(function (m) { return Msg_1.Msg.fromData(m); }), (0, gov_1.proposalStatusFromJSON)(status), {
            yes: new numeric_1.Int((final_tally_result === null || final_tally_result === void 0 ? void 0 : final_tally_result.yes) || 0),
            no: new numeric_1.Int((final_tally_result === null || final_tally_result === void 0 ? void 0 : final_tally_result.no) || 0),
            abstain: new numeric_1.Int((final_tally_result === null || final_tally_result === void 0 ? void 0 : final_tally_result.abstain) || 0),
            no_with_veto: new numeric_1.Int((final_tally_result === null || final_tally_result === void 0 ? void 0 : final_tally_result.no_with_veto) || 0),
        }, new Date(submit_time), new Date(deposit_end_time), Coins_1.Coins.fromData(total_deposit), new Date(voting_start_time), new Date(voting_end_time), metadata, title, summary, proposer);
    };
    ProposalV1.prototype.toData = function (_isClassic) {
        var _a, _b, _c, _d;
        var _e = this, status = _e.status, final_tally_result = _e.final_tally_result;
        //HACK: If the first message in messages is in legacy format, the title and description of the legacy content have the substance, so the title is taken from the legacy content and the summary has the same value as the title.
        if (this.messages.length > 0 &&
            this.messages[0] instanceof msgs_1.MsgExecLegacyContentV1) {
            this.title = (_b = (_a = this.messages[0].content) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : this.title;
            this.summary = (_d = (_c = this.messages[0].content) === null || _c === void 0 ? void 0 : _c.description) !== null && _d !== void 0 ? _d : this.summary;
        }
        return {
            id: this.id.toFixed(),
            messages: this.messages.map(function (m) { return m.toData(); }),
            status: (0, gov_1.proposalStatusToJSON)(status),
            final_tally_result: {
                yes: final_tally_result.yes.toString(),
                no: final_tally_result.no.toString(),
                abstain: final_tally_result.abstain.toString(),
                no_with_veto: final_tally_result.no_with_veto.toString(),
            },
            submit_time: this.submit_time.toISOString(),
            deposit_end_time: this.deposit_end_time.toISOString(),
            total_deposit: this.total_deposit.toData(),
            voting_start_time: this.voting_start_time.toISOString(),
            voting_end_time: this.voting_end_time.toISOString(),
            metadata: this.metadata,
            title: this.title,
            summary: this.summary,
            proposer: this.proposer,
        };
    };
    ProposalV1.fromProto = function (data, _isClassic) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return new ProposalV1(data.id.toNumber(), data.messages.map(function (m) { return Msg_1.Msg.fromProto(m); }), data.status, {
            yes: new numeric_1.Int((_b = (_a = data.finalTallyResult) === null || _a === void 0 ? void 0 : _a.yesCount) !== null && _b !== void 0 ? _b : 0),
            no: new numeric_1.Int((_d = (_c = data.finalTallyResult) === null || _c === void 0 ? void 0 : _c.noCount) !== null && _d !== void 0 ? _d : 0),
            abstain: new numeric_1.Int((_f = (_e = data.finalTallyResult) === null || _e === void 0 ? void 0 : _e.abstainCount) !== null && _f !== void 0 ? _f : 0),
            no_with_veto: new numeric_1.Int((_h = (_g = data.finalTallyResult) === null || _g === void 0 ? void 0 : _g.noWithVetoCount) !== null && _h !== void 0 ? _h : 0),
        }, data.submitTime, data.depositEndTime, Coins_1.Coins.fromProto(data.totalDeposit), data.votingStartTime, data.votingEndTime, data.metadata, data.title, data.summary, data.proposer);
    };
    ProposalV1.prototype.toProto = function (_isClassic) {
        var _a, _b;
        var _c = this, status = _c.status, final_tally_result = _c.final_tally_result;
        var ftr;
        if (final_tally_result) {
            ftr = gov_1.TallyResult.fromPartial({
                yesCount: final_tally_result.yes.toString(),
                noCount: final_tally_result.no.toString(),
                abstainCount: final_tally_result.abstain.toString(),
                noWithVetoCount: final_tally_result.no_with_veto.toString(),
            });
        }
        //HACK: If the first message in messages is in legacy format, the title and description of the legacy content have the substance, so the title is taken from the legacy content and the summary has the same value as the title.
        if (this.messages.length > 0 &&
            this.messages[0] instanceof msgs_1.MsgExecLegacyContentV1) {
            this.summary = this.title = (_b = (_a = this.messages[0].content) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : this.title;
        }
        return gov_1.Proposal.fromPartial({
            id: this.id,
            messages: this.messages.map(function (m) { return m.packAny(); }),
            status: status,
            finalTallyResult: ftr,
            submitTime: this.submit_time,
            depositEndTime: this.deposit_end_time,
            totalDeposit: this.total_deposit.toProto(),
            votingEndTime: this.voting_end_time,
            votingStartTime: this.voting_start_time,
            metadata: this.metadata,
            title: this.title,
            summary: this.summary,
            proposer: this.proposer,
        });
    };
    return ProposalV1;
}(json_1.JSONSerializable));
exports.ProposalV1 = ProposalV1;
(function (ProposalV1) {
    ProposalV1.Status = gov_1.ProposalStatus;
})(ProposalV1 = exports.ProposalV1 || (exports.ProposalV1 = {}));
exports.ProposalV1 = ProposalV1;
//# sourceMappingURL=Proposal.js.map