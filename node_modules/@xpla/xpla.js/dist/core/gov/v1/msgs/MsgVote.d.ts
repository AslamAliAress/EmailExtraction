import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@xpla/xpla.proto/google/protobuf/any';
import { VoteOption } from '@xpla/xpla.proto/cosmos/gov/v1/gov';
import { MsgVote as MsgVoteV1_pb } from '@xpla/xpla.proto/cosmos/gov/v1/tx';
/**
 * Vote for a proposal
 */
export declare class MsgVoteV1 extends JSONSerializable<MsgVoteV1.Amino, MsgVoteV1.Data, MsgVoteV1.Proto> {
    proposal_id: number;
    voter: AccAddress;
    option: VoteOption;
    metadata: string;
    /**
     * @param proposal_id defines the unique id of the proposal
     * @param voter is the voter address for the proposal
     * @param option defines the vote option
     * @param metadata is any arbitrary metadata attached to the Vote
     */
    constructor(proposal_id: number, voter: AccAddress, option: VoteOption, metadata: string);
    static fromAmino(data: MsgVoteV1.Amino, _isClassic?: boolean): MsgVoteV1;
    toAmino(isClassic?: boolean): MsgVoteV1.Amino;
    static fromData(data: MsgVoteV1.Data, _isClassic?: boolean): MsgVoteV1;
    toData(_isClassic?: boolean): MsgVoteV1.Data;
    static fromProto(proto: MsgVoteV1.Proto, _isClassic?: boolean): MsgVoteV1;
    toProto(_isClassic?: boolean): MsgVoteV1.Proto;
    packAny(_isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, _isClassic?: boolean): MsgVoteV1;
}
export declare namespace MsgVoteV1 {
    interface Amino {
        type: 'gov/MsgVote' | 'cosmos-sdk/MsgVote';
        value: {
            proposal_id: string;
            voter: AccAddress;
            option: VoteOption;
            metadata: string;
        };
    }
    interface Data {
        '@type': '/cosmos.gov.v1.MsgVote';
        proposal_id: string;
        voter: AccAddress;
        option: VoteOption;
        metadata: string;
    }
    type Proto = MsgVoteV1_pb;
}
