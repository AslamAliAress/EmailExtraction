import { Coins } from '../../Coins';
import { Int } from '../../numeric';
import { JSONSerializable } from '../../../util/json';
import { Proposal as ProposalV1_pb, ProposalStatus } from '@xpla/xpla.proto/cosmos/gov/v1/gov';
import { Msg } from '../../Msg';
import { AccAddress } from '../../../core/bech32';
/**
 * Stores information pertaining to a submitted proposal, such as its status and time of
 * the voting period
 */
export declare class ProposalV1 extends JSONSerializable<ProposalV1.Amino, ProposalV1.Data, ProposalV1.Proto> {
    id: number;
    messages: Msg[];
    status: ProposalStatus;
    final_tally_result: ProposalV1.FinalTallyResult;
    submit_time: Date;
    deposit_end_time: Date;
    total_deposit: Coins;
    voting_start_time: Date;
    voting_end_time: Date;
    metadata: string;
    title: string;
    summary: string;
    proposer: AccAddress;
    /**
     *
     * @param id proposal's ID
     * @param messages messages are the arbitrary messages to be executed if the proposal passes
     * @param status proposal's status
     * @param final_tally_result tally result
     * @param submit_time time proposal was submitted and deposit period started
     * @param deposit_end_time time deposit period will end
     * @param total_deposit amount of coins deposited by all users
     * @param voting_start_time time voting period will start
     * @param voting_end_time time voting period will end
     * @param metadata metadata is any arbitrary metadata attached to the proposal
     * @param title title of the proposal
     * @param summary short summary of the proposal
     * @param proposer address of the proposal sumbitter
     */
    constructor(id: number, messages: Msg[], status: ProposalStatus, final_tally_result: ProposalV1.FinalTallyResult, submit_time: Date, deposit_end_time: Date, total_deposit: Coins, voting_start_time: Date, voting_end_time: Date, metadata: string, title: string, summary: string, proposer: AccAddress);
    static fromAmino(data: ProposalV1.Amino, _isClassic?: boolean): ProposalV1;
    toAmino(_isClassic?: boolean): ProposalV1.Amino;
    static fromData(data: ProposalV1.Data, _isClassic?: boolean): ProposalV1;
    toData(_isClassic?: boolean): ProposalV1.Data;
    static fromProto(data: ProposalV1.Proto, _isClassic?: boolean): ProposalV1;
    toProto(_isClassic?: boolean): ProposalV1.Proto;
}
export declare namespace ProposalV1 {
    const Status: typeof ProposalStatus;
    type Status = ProposalStatus;
    interface FinalTallyResult {
        yes: Int;
        abstain: Int;
        no: Int;
        no_with_veto: Int;
    }
    interface Amino {
        messages: Msg.Amino[];
        id: string;
        status: number;
        final_tally_result: {
            yes: string;
            abstain: string;
            no: string;
            no_with_veto: string;
        };
        submit_time: string;
        deposit_end_time: string;
        total_deposit: Coins.Amino;
        voting_start_time: string;
        voting_end_time: string;
        metadata: string;
        title: string;
        summary: string;
        proposer: string;
    }
    interface Data {
        messages: Msg.Data[];
        id: string;
        status: string;
        final_tally_result: {
            yes: string;
            abstain: string;
            no: string;
            no_with_veto: string;
        };
        submit_time: string;
        deposit_end_time: string;
        total_deposit: Coins.Data;
        voting_start_time: string;
        voting_end_time: string;
        metadata: string;
        title: string;
        summary: string;
        proposer: string;
    }
    type Proto = ProposalV1_pb;
}
