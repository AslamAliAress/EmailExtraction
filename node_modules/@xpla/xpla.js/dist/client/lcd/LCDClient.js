"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDClient = void 0;
var APIRequester_1 = require("./APIRequester");
var api_1 = require("./api");
var LCDUtils_1 = require("./LCDUtils");
var Wallet_1 = require("./Wallet");
var DEFAULT_LCD_OPTIONS = {
    gasAdjustment: 1.75,
};
// isClassic network: true
// forked network : false
var DEFAULT_NETWORK_TYPE_BY_CHAIN_ID = {
    default: false,
    'dimension_37-1': false,
    'cube_47-5': false,
};
var DEFAULT_GAS_PRICES_BY_CHAIN_ID = {
    default: {
        axpla: 850000000000,
    },
    'dimension_37-1': {
        axpla: 850000000000,
    },
    'cube_47-5': {
        axpla: 850000000000,
    },
};
/**
 * An object repesenting a connection to a xplad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient, Coin } from 'xpla.js';
 *
 * const xpla = new LCDClient({
 *    URL: "https://cube-lcd.xpla.dev",
 *    chainID: "cube_47-5"
 * });
 * ```
 */
var LCDClient = /** @class */ (function () {
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param config LCD configuration
     */
    function LCDClient(config) {
        this.config = __assign(__assign(__assign({}, DEFAULT_LCD_OPTIONS), { gasPrices: DEFAULT_GAS_PRICES_BY_CHAIN_ID[config.chainID] ||
                DEFAULT_GAS_PRICES_BY_CHAIN_ID['default'], isClassic: DEFAULT_NETWORK_TYPE_BY_CHAIN_ID[config.chainID] ||
                DEFAULT_NETWORK_TYPE_BY_CHAIN_ID['default'] }), config);
        this.apiRequester = new APIRequester_1.APIRequester(this.config.URL);
        // instantiate APIs
        this.auth = new api_1.AuthAPI(this);
        this.authz = new api_1.AuthzAPI(this);
        this.bank = new api_1.BankAPI(this);
        this.consensus = new api_1.ConsensusAPI(this);
        this.distribution = new api_1.DistributionAPI(this);
        this.erc20 = new api_1.ERC20API(this);
        this.evm = new api_1.EvmAPI(this);
        this.feeGrant = new api_1.FeeGrantAPI(this);
        this.gov = new api_1.GovAPI(this);
        this.mint = new api_1.MintAPI(this);
        this.slashing = new api_1.SlashingAPI(this);
        this.staking = new api_1.StakingAPI(this);
        this.tendermint = new api_1.TendermintAPI(this);
        this.wasm = new api_1.WasmAPI(this);
        this.xpla = new api_1.XplaAPI(this);
        this.tx = new api_1.TxAPI(this);
        this.ibc = new api_1.IbcAPI(this);
        this.ibcTransfer = new api_1.IbcTransferAPI(this);
        this.utils = new LCDUtils_1.LCDUtils(this);
    }
    /** Creates a new wallet with the Key. */
    LCDClient.prototype.wallet = function (key) {
        key.evm = false;
        return new Wallet_1.Wallet(this, key);
    };
    LCDClient.prototype.info = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.tendermint.nodeInfo()];
            });
        });
    };
    LCDClient.prototype.baseConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.apiRequester.get('/cosmos/base/node/v1beta1/config', {})];
            });
        });
    };
    LCDClient.prototype.parameterKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.apiRequester
                        .get('/cosmos/params/v1beta1/subspaces', {})
                        .then(function (d) { return d.subspaces; })];
            });
        });
    };
    LCDClient.prototype.parameter = function (subspace, key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.apiRequester
                        .get('/cosmos/params/v1beta1/params', {
                        subspace: subspace,
                        key: key,
                    })
                        .then(function (d) { return d.param; })];
            });
        });
    };
    LCDClient.prototype.getGasPrices = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.config.gasPrices) {
                    return [2 /*return*/, Promise.reject(this.config.gasPrices)];
                }
                return [2 /*return*/, Promise.resolve(this.config.gasPrices)];
            });
        });
    };
    return LCDClient;
}());
exports.LCDClient = LCDClient;
//# sourceMappingURL=LCDClient.js.map