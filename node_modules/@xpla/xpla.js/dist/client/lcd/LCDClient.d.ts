import { APIRequester } from './APIRequester';
import { AuthAPI, BankAPI, ConsensusAPI, DistributionAPI, ERC20API, EvmAPI, FeeGrantAPI, GovAPI, MintAPI, AuthzAPI, SlashingAPI, StakingAPI, TendermintAPI, WasmAPI, XplaAPI, TxAPI, IbcTransferAPI, IbcAPI } from './api';
import { LCDUtils } from './LCDUtils';
import { Wallet } from './Wallet';
import { Numeric } from '../../core/numeric';
import { Coins } from '../../core/Coins';
import { Key } from '../../key';
export interface LCDClientConfig {
    /**
     * The base URL to which LCD requests will be made.
     */
    URL: string;
    /**
     * Chain ID of the blockchain to connect to.
     */
    chainID: string;
    /**
     * Coins representing the default gas prices to use for fee estimation.
     */
    gasPrices?: Coins.Input;
    /**
     * Number presenting the default gas adjustment value to use for fee estimation.
     */
    gasAdjustment?: Numeric.Input;
    /**
     * is it connected to forked network?
     */
    isClassic?: boolean;
}
/**
 * An object repesenting a connection to a xplad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient, Coin } from 'xpla.js';
 *
 * const xpla = new LCDClient({
 *    URL: "https://cube-lcd.xpla.dev",
 *    chainID: "cube_47-5"
 * });
 * ```
 */
export declare class LCDClient {
    config: LCDClientConfig;
    apiRequester: APIRequester;
    auth: AuthAPI;
    bank: BankAPI;
    consensus: ConsensusAPI;
    distribution: DistributionAPI;
    erc20: ERC20API;
    evm: EvmAPI;
    feeGrant: FeeGrantAPI;
    gov: GovAPI;
    mint: MintAPI;
    authz: AuthzAPI;
    slashing: SlashingAPI;
    staking: StakingAPI;
    tendermint: TendermintAPI;
    wasm: WasmAPI;
    xpla: XplaAPI;
    tx: TxAPI;
    ibc: IbcAPI;
    ibcTransfer: IbcTransferAPI;
    utils: LCDUtils;
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param config LCD configuration
     */
    constructor(config: LCDClientConfig);
    /** Creates a new wallet with the Key. */
    wallet(key: Key): Wallet;
    info(): Promise<any>;
    baseConfig(): Promise<any>;
    parameterKeys(): Promise<any>;
    parameter(subspace: string, key: string): Promise<any>;
    getGasPrices(): Promise<Coins>;
}
