import { BaseAPI } from './BaseAPI';
import { ProposalV1, AccAddress, Coins, Dec, Int, Deposit, VoteV1, Tx, GovParamsV1 } from '../../../core';
import { APIParams, Pagination, PaginationOptions } from '../APIRequester';
import { LCDClient } from '../LCDClient';
export interface GovParams {
    deposit_params: DepositParams;
    voting_params: VotingParams;
    tally_params: TallyParams;
}
export interface DepositParams {
    min_deposit: Coins;
    max_deposit_period: number;
}
export interface VotingParams {
    voting_period: number;
}
export interface TallyParams {
    quorum: Dec;
    threshold: Dec;
    veto_threshold: Dec;
}
export interface Tally {
    yes: Int;
    no: Int;
    abstain: Int;
    no_with_veto: Int;
}
export declare namespace Tally {
    interface Data {
        yes_count: string;
        no_count: string;
        abstain_count: string;
        no_with_veto_count: string;
    }
}
export declare class GovAPI extends BaseAPI {
    lcd: LCDClient;
    constructor(lcd: LCDClient);
    /**
     * Gets all proposals.
     */
    proposals(params?: Partial<PaginationOptions & APIParams>): Promise<[ProposalV1[], Pagination]>;
    /**
     * Get a specific proposal by its ID
     * @param proposalId proposal's ID
     */
    proposal(proposalId: number, params?: APIParams): Promise<ProposalV1>;
    /**
     * Get the proposal's proposer
     * @param proposalId proposal's ID
     */
    proposer(proposalId: number): Promise<AccAddress>;
    /**
     * Get the proposal's initial deposit
     * @param proposalId proposal's ID
     */
    initialDeposit(proposalId: number): Promise<Coins>;
    /**
     * Get the deposits for a proposal
     * @param proposalId proposal's ID
     */
    deposits(proposalId: number, _params?: Partial<PaginationOptions & APIParams>): Promise<[Deposit[], Pagination]>;
    searchProposalCreationTx(proposalId: number): Promise<Tx.Data>;
    /**
     * Get the current votes for a proposal
     * @param proposalId proposal's ID
     */
    votes(proposalId: number, _params?: Partial<PaginationOptions & APIParams>): Promise<[VoteV1[], Pagination]>;
    /**
     * Gets the current tally for a proposal.
     * @param proposalId proposal's ID
     */
    tally(proposalId: number, params?: APIParams): Promise<Tally>;
    /** Gets the Gov module's current parameters  */
    parameters(params?: APIParams): Promise<GovParamsV1>;
    /** Gets the Gov module's deposit parameters */
    depositParameters(params?: APIParams): Promise<DepositParams>;
    /** Gets the Gov module's voting parameters */
    votingParameters(params?: APIParams): Promise<VotingParams>;
    /** Gets teh Gov module's tally parameters */
    tallyParameters(params?: APIParams): Promise<TallyParams>;
}
