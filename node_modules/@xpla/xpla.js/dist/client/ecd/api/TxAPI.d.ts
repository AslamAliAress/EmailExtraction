import { EvmAPI } from './BaseAPI';
import { EvmAddress } from '../../../core/eip55';
import { EvmTx, EvmTxInfo, EvmMessage } from '../msgs/EvmTx';
import { ECDClient } from '../ECDClient';
import { EvmWallet } from '../EvmWallet';
import { Key, RawKey } from '../../../key';
export interface CreateEvmTxOptions {
    msgs: EvmMessage[];
    gasLimit?: string;
    gasPrice?: string;
}
export declare class EvmTxAPI extends EvmAPI {
    ecd: ECDClient;
    constructor(ecd: ECDClient);
    get(hash: string): Promise<EvmTx>;
    toParams(tx: EvmTx): any;
    fromParams(params: any): EvmTx;
    create(by: EvmAddress, options: CreateEvmTxOptions & {
        sequence?: number;
    }): Promise<EvmTx>;
    getGasPrices(): Promise<{
        [denom: string]: string;
    }>;
    estimateGas(tx: EvmTx): Promise<string>;
    private _broadcast;
    /**
     * Broadcast the transaction using "sync" mode, then wait for its inclusion in a block.
     *
     * This method polls txInfo using the txHash to confirm the transaction's execution.
     *
     * @param tx      transaction to broadcast
     * @param timeout time in milliseconds to wait for transaction to be included in a block. defaults to 30000
     */
    broadcast(tx: EvmTx, timeout?: number): Promise<EvmTxInfo>;
    /**
     * NOTE: This is not a synchronous function and is unconventionally named. This function
     * can be await as it returns a `Promise`.
     *
     * Broadcast the transaction using the "sync" mode, returning after CheckTx() is performed.
     * @param tx transaction to broadcast
     */
    broadcastSync(tx: EvmTx): Promise<string>;
    /**
     * Looks up a transaction on the blockchain, addressed by its hash
     * @param txHash transaction's hash
     */
    txInfo(hash: string): Promise<EvmTxInfo>;
    sign(signer: EvmWallet | Key | RawKey, tx: EvmTx): Promise<EvmTx>;
}
