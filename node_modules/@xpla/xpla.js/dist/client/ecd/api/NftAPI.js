"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmNftAPI = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
var BaseAPI_1 = require("./BaseAPI");
var ECDClient_1 = require("../ECDClient");
var EvmNftAPI = /** @class */ (function (_super) {
    __extends(EvmNftAPI, _super);
    function EvmNftAPI(ecd) {
        var _this = _super.call(this, ecd.apiRequester) || this;
        _this.ecd = ecd;
        return _this;
    }
    EvmNftAPI.prototype.name = function (contract) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0x06fdde03', // keccak256('name()') to 4 bytes
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['string'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.symbol = function (contract) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0x95d89b41', // keccak256('symbol()') to 4 bytes
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['string'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.decimals = function (_contract) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, 0];
            });
        });
    };
    EvmNftAPI.prototype.totalSupply = function (contract) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0x18160ddd', // keccak256('totalSupply()') to 4 bytes
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['bignumber'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.balanceOf = function (contract, address) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0x70a08231' + // keccak256('balanceOf(address)') to 4 bytes
                                ECDClient_1.ECDClient.dataFromParams(['address'], [address]).toString('hex'),
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['bignumber'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.ownerOf = function (contract, tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0x6352211e' + // keccak256('ownerOf(uint256)') to 4 bytes
                                ECDClient_1.ECDClient.dataFromParams(['bignumber'], [tokenId.toString()]).toString('hex'),
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['address'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.tokenId = function (contract, index, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            var _this = this;
            return __generator(this, function (_a) {
                params = [];
                if (owner) {
                    params.push({
                        to: contract,
                        data: '0x2f745c59' + // keccak256('tokenOfOwnerByIndex(address,uint256)') to 4 bytes
                            ECDClient_1.ECDClient.dataFromParams(['address', 'number'], [owner, index]).toString('hex'),
                    });
                }
                else {
                    params.push({
                        to: contract,
                        data: '0x4f6ccce7' + // keccak256('tokenByIndex(uint256)') to 4 bytes
                            ECDClient_1.ECDClient.dataFromParams(['bignumber'], [index]).toString('hex'),
                    });
                }
                params.push('latest');
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', params)
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['bignumber'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.tokenURI = function (contract, tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.e
                        .post(this.ecd.config.id, 'eth_call', [
                        {
                            to: contract,
                            data: '0xc87b56dd' + // keccak256('tokenURI(uint256)') to 4 bytes
                                ECDClient_1.ECDClient.dataFromParams(['bignumber'], [tokenId.toString()]).toString('hex'),
                        },
                        'latest',
                    ])
                        .then(function (response) {
                        var _a;
                        if (_this.e.isError(response)) {
                            throw _this.e.getError(response);
                        }
                        var data = ECDClient_1.ECDClient.bufferFromHex((_a = response.result) !== null && _a !== void 0 ? _a : '0');
                        var params = ECDClient_1.ECDClient.dataToParams(['string'], data);
                        return params[0];
                    })];
            });
        });
    };
    EvmNftAPI.prototype.tokens = function (contract, owner, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var amount, count, pageNo, pageLimit, offset, start, end, next_key, total, tokens, i, tokenId, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.balanceOf(contract, owner)];
                    case 1:
                        amount = _a.sent();
                        count = amount.toNumber();
                        pageNo = 1;
                        pageLimit = 10;
                        offset = 0;
                        if (params['pagination.key']) {
                            pageNo = parseInt(params['pagination.key']);
                        }
                        if (params['pagination.limit']) {
                            pageLimit = parseInt(params['pagination.limit']);
                        }
                        if (params['pagination.offset']) {
                            offset = parseInt(params['pagination.offset']);
                        }
                        else {
                            offset = (pageNo - 1) * pageLimit;
                        }
                        start = offset <= count ? offset : count;
                        end = start + pageLimit <= count ? start + pageLimit : count;
                        next_key = end < count ? (pageNo + 1).toString() : null;
                        total = count;
                        tokens = [];
                        i = start;
                        _a.label = 2;
                    case 2:
                        if (!(i < end)) return [3 /*break*/, 7];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.tokenId(contract, i, owner)];
                    case 4:
                        tokenId = _a.sent();
                        tokens.push(tokenId.toNumber());
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        throw new Error(e_1.message);
                    case 6:
                        ++i;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/, [tokens, { next_key: next_key, total: total }]];
                }
            });
        });
    };
    EvmNftAPI.prototype.tokensAll = function (contract, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var amount, count, pageNo, pageLimit, offset, start, end, next_key, total, tokens, i, tokenId, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.totalSupply(contract)];
                    case 1:
                        amount = _a.sent();
                        count = amount.toNumber();
                        pageNo = 1;
                        pageLimit = 10;
                        offset = 0;
                        if (params['pagination.key']) {
                            pageNo = parseInt(params['pagination.key']);
                        }
                        if (params['pagination.limit']) {
                            pageLimit = parseInt(params['pagination.limit']);
                        }
                        if (params['pagination.offset']) {
                            offset = parseInt(params['pagination.offset']);
                        }
                        else {
                            offset = (pageNo - 1) * pageLimit;
                        }
                        start = offset <= count ? offset : count;
                        end = start + pageLimit <= count ? start + pageLimit : count;
                        next_key = end < count ? (pageNo + 1).toString() : null;
                        total = count;
                        tokens = [];
                        i = start;
                        _a.label = 2;
                    case 2:
                        if (!(i < end)) return [3 /*break*/, 7];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.tokenId(contract, i)];
                    case 4:
                        tokenId = _a.sent();
                        tokens.push(tokenId.toNumber());
                        return [3 /*break*/, 6];
                    case 5:
                        e_2 = _a.sent();
                        throw new Error(e_2.message);
                    case 6:
                        ++i;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/, [tokens, { next_key: next_key, total: total }]];
                }
            });
        });
    };
    return EvmNftAPI;
}(BaseAPI_1.EvmAPI));
exports.EvmNftAPI = EvmNftAPI;
//# sourceMappingURL=NftAPI.js.map