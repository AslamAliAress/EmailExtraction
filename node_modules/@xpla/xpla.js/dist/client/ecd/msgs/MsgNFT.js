"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmMintNft = exports.EvmSendNft = void 0;
var core_1 = require("../../../core");
var EvmTx_1 = require("./EvmTx");
var ECDClient_1 = require("../ECDClient");
/**
 * A basic message for sending [[Coins]] between Xpla accounts.
 */
var EvmSendNft = /** @class */ (function (_super) {
    __extends(EvmSendNft, _super);
    /**
     * @param contract erc721 token contract address
     * @param from_address sender's address
     * @param to_address recipient's address
     * @param id NFT's ID
     */
    function EvmSendNft(contract, from_address, to_address, id) {
        var _this = _super.call(this) || this;
        _this.contract = contract;
        _this.from_address = from_address;
        _this.to_address = to_address;
        _this.id = id;
        return _this;
    }
    EvmSendNft.prototype.tx = function () {
        var tx = {};
        tx.type = 0;
        tx.from = this.from_address;
        tx.to = this.contract;
        tx.value = core_1.Numeric.parse(0);
        tx.data = Buffer.from('42842e0e' + // keccak256('safeTransferFrom(address,address,uint256)') to 4 bytes
            ECDClient_1.ECDClient.dataFromParams(['address', 'address', 'bignumber'], [this.from_address, this.to_address, this.id.toString()]).toString('hex'), 'hex');
        return tx;
    };
    return EvmSendNft;
}(EvmTx_1.EvmMessage));
exports.EvmSendNft = EvmSendNft;
var EvmMintNft = /** @class */ (function (_super) {
    __extends(EvmMintNft, _super);
    /**
     * @param contract erc20 token contract address
     * @param owner_address contract owner's address
     * @param to_address recipient's address
     * @param id NFT's ID
     * @param uri NFT's data URI
     */
    function EvmMintNft(contract, owner_address, to_address, id, uri) {
        var _this = _super.call(this) || this;
        _this.contract = contract;
        _this.owner_address = owner_address;
        _this.to_address = to_address;
        _this.id = id;
        _this.uri = uri;
        return _this;
    }
    EvmMintNft.prototype.tx = function () {
        var tx = {};
        tx.type = 0;
        tx.from = this.owner_address;
        tx.to = this.contract;
        tx.value = core_1.Numeric.parse(0);
        tx.data = Buffer.from('cd279c7c' + // keccak256('safeMint(address,uint256,string)') to 4 bytes
            ECDClient_1.ECDClient.dataFromParams(['address', 'bignumber', 'string'], [this.to_address, this.id.toString(), this.uri]).toString('hex'), 'hex');
        return tx;
    };
    return EvmMintNft;
}(EvmTx_1.EvmMessage));
exports.EvmMintNft = EvmMintNft;
//# sourceMappingURL=MsgNFT.js.map