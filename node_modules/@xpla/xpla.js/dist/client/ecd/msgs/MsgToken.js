"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmMintToken = exports.EvmSendToken = void 0;
var core_1 = require("../../../core");
var EvmTx_1 = require("./EvmTx");
var ECDClient_1 = require("../ECDClient");
/**
 * A basic message for sending [[Coins]] between Xpla accounts.
 */
var EvmSendToken = /** @class */ (function (_super) {
    __extends(EvmSendToken, _super);
    /**
     * @param contract erc20 token contract address
     * @param from_address sender's address
     * @param to_address recipient's address
     * @param amount value of the transaction
     */
    function EvmSendToken(contract, from_address, to_address, amount) {
        var _this = _super.call(this) || this;
        _this.contract = contract;
        _this.from_address = from_address;
        _this.to_address = to_address;
        _this.amount = amount;
        return _this;
    }
    EvmSendToken.prototype.tx = function () {
        var tx = {};
        tx.type = 0;
        tx.from = this.from_address;
        tx.to = this.contract;
        tx.value = core_1.Numeric.parse(0);
        tx.data = Buffer.from('a9059cbb' + // keccak256('transfer(address,uint256)') to 4 bytes
            ECDClient_1.ECDClient.dataFromParams(['address', 'bignumber'], [this.to_address, this.amount.toString()]).toString('hex'), 'hex');
        return tx;
    };
    return EvmSendToken;
}(EvmTx_1.EvmMessage));
exports.EvmSendToken = EvmSendToken;
var EvmMintToken = /** @class */ (function (_super) {
    __extends(EvmMintToken, _super);
    /**
     * @param contract erc20 token contract address
     * @param owner_address contract owner's address
     * @param to_address recipient's address
     * @param amount value of the transaction
     */
    function EvmMintToken(contract, owner_address, to_address, amount) {
        var _this = _super.call(this) || this;
        _this.contract = contract;
        _this.owner_address = owner_address;
        _this.to_address = to_address;
        _this.amount = amount;
        return _this;
    }
    EvmMintToken.prototype.tx = function () {
        var tx = {};
        tx.type = 0;
        tx.from = this.owner_address;
        tx.to = this.contract;
        tx.value = core_1.Numeric.parse(0);
        tx.data = Buffer.from('40c10f19' + // keccak256('mint(address,uint256)') to 4 bytes
            ECDClient_1.ECDClient.dataFromParams(['address', 'bignumber'], [this.to_address, this.amount.toString()]).toString('hex'), 'hex');
        return tx;
    };
    return EvmMintToken;
}(EvmTx_1.EvmMessage));
exports.EvmMintToken = EvmMintToken;
//# sourceMappingURL=MsgToken.js.map