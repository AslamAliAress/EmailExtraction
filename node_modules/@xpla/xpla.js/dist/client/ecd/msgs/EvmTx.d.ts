/// <reference types="node" />
import { Numeric } from '../../../core/numeric';
import { EvmAddress } from '../../../core/eip55';
export declare type EvmTx = {
    chainId?: null | number;
    blockHash?: null | string;
    blockNumber?: null | Numeric.Output;
    from?: null | EvmAddress;
    gasLimit?: null | Numeric.Output;
    gasPrice?: null | Numeric.Output;
    hash?: null | string;
    input?: null | string;
    nonce?: null | Numeric.Output;
    to?: null | EvmAddress;
    transactionIndex?: null | Numeric.Output;
    value?: null | Numeric.Output;
    data?: null | Buffer;
    type?: null | number;
    v?: null | number;
    r?: null | Buffer;
    s?: null | Buffer;
    accessList?: null | string[];
};
export declare class EvmTxInfo {
    blockHash: string;
    blockNumber: number;
    from: string;
    to: string;
    contractAddress: string | null;
    cumulativeGasUsed: number;
    effectiveGasPrice: number;
    gasUsed: number;
    transactionHash: string;
    transactionIndex: number;
    type: number;
    logs: any[];
    logsBloom: any;
    root: string;
    status: number;
    constructor(blockHash: string, blockNumber: number, from: string, to: string, contractAddress: string | null, cumulativeGasUsed: number, effectiveGasPrice: number, gasUsed: number, transactionHash: string, transactionIndex: number, type: number, logs: any[], logsBloom: any, root: string, status: number);
    static fromData(data: any): EvmTxInfo;
}
export declare abstract class EvmMessage {
    abstract tx(): EvmTx;
}
