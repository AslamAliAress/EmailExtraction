/// <reference types="node" />
import { EVMRequester } from './APIRequester';
import { EvmAuthAPI, EvmTxAPI, EvmBankAPI, EvmTokenAPI, EvmNftAPI } from './api';
import { EvmWallet } from './EvmWallet';
import { Key } from '../../key';
import { EvmAddress } from '../../core';
export interface ECDClientConfig {
    /**
     * The base URL to which EVM LCD requests will be made.
     */
    URL: string;
    /**
     * Chain ID of the blockchain to connect to.
     */
    chainID: string;
    id: number;
}
/**
 * An object repesenting a connection to a xplad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { ECDClient, Coin } from 'xpla.js';
 *
 * const xpla = new ECDClient({
 *    URL: "https://cube-evm-rpc.xpla.dev",
 *    chainID: "cube_47-5",
 *    id: ECDClient.getIDfromChainID("cube_47-5")
 * });
 * ```
 */
export declare class ECDClient {
    static getIDfromChainID(chainID: string): number;
    static bufferFromHex(hex: string): Buffer;
    static unpadBuffer(d: Buffer): Buffer;
    static bufferToAddress(buffer: Buffer): EvmAddress;
    static bufferFromString(utf8: string): Buffer;
    static dataFromParams(types: string[], params: any[]): Buffer;
    static dataToParams(types: string[], data: Buffer): any[];
    config: ECDClientConfig;
    apiRequester: EVMRequester;
    auth: EvmAuthAPI;
    bank: EvmBankAPI;
    token: EvmTokenAPI;
    nft: EvmNftAPI;
    tx: EvmTxAPI;
    /**
     * Creates a new EVM client with the specified configuration.
     *
     * @param config ECD configuration
     */
    constructor(config: ECDClientConfig);
    /** Creates a new wallet with the Key. */
    wallet(key: Key): EvmWallet;
    info(): Promise<any>;
}
