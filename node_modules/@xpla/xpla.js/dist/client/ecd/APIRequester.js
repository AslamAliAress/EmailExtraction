"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVMRequester = exports.JsonRpc2Payload = void 0;
var axios_1 = __importDefault(require("axios"));
// A JSON-RPC payload, which are sent to a JSON-RPC server.
var JsonRpc2Payload = /** @class */ (function () {
    function JsonRpc2Payload(id, method, params) {
        this.id = id;
        this.method = method;
        this.params = params;
        this.jsonrpc = '2.0';
    }
    return JsonRpc2Payload;
}());
exports.JsonRpc2Payload = JsonRpc2Payload;
var EVMRequester = /** @class */ (function () {
    function EVMRequester(baseURL) {
        this.baseURL = baseURL;
        this.axios = axios_1.default.create({
            headers: {
                Accept: 'application/json',
            },
            timeout: 30000,
        });
    }
    EVMRequester.deepCopy = function (obj) {
        var copy = {};
        // Handle the 3 simple types, and null or undefined
        if (null == obj || 'object' != typeof obj)
            return obj;
        // Keep any Addressable
        if (typeof obj.getAddress === 'function') {
            return obj;
        }
        // Handle Date
        if (obj instanceof Date) {
            copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        // Handle Array
        if (obj instanceof Array) {
            copy = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                copy[i] = EVMRequester.deepCopy(obj[i]);
            }
            return copy;
        }
        // Handle Object
        if (obj instanceof Object) {
            copy = {};
            for (var attr in obj) {
                if (obj[attr])
                    copy[attr] = EVMRequester.deepCopy(obj[attr]);
            }
            return copy;
        }
        throw new Error("should not happen: ".concat(obj, " (").concat(typeof obj, ")"));
    };
    EVMRequester.prototype.post = function (id, method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                data = new JsonRpc2Payload(id, method, params);
                return [2 /*return*/, this.axios.post(this.baseURL, data).then(function (d) {
                        var response = d.data;
                        if (_this.isError(response)) {
                            return response;
                        }
                        return response;
                    })];
            });
        });
    };
    EVMRequester.prototype.isError = function (response) {
        return response.error !== undefined;
    };
    EVMRequester.prototype.getError = function (error) {
        var _a, _b;
        return new Error('evm rpc error: ' + ((_a = error.error) === null || _a === void 0 ? void 0 : _a.code) + ': ' + ((_b = error.error) === null || _b === void 0 ? void 0 : _b.message));
    };
    return EVMRequester;
}());
exports.EVMRequester = EVMRequester;
//# sourceMappingURL=APIRequester.js.map