"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readMsg = void 0;
var xpla_js_1 = require("@xpla/xpla.js");
var utility_1 = require("./utility");
var readMsg = function (msg) {
    try {
        var data = msg.toData();
        var msgType = data["@type"];
        switch (msgType) {
            case "/cosmos.bank.v1beta1.MsgSend": {
                var amount = data.amount, to_address = data.to_address;
                return "Send " + (0, utility_1.formatCoins)(amount) + " to " + to_address;
            }
            case "/cosmos.staking.v1beta1.MsgDelegate": {
                var amount = data.amount, validator_address = data.validator_address;
                return "Delegate " + (0, utility_1.formatCoin)(amount) + " to " + validator_address;
            }
            case "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
                var amount = data.amount, validator_dst_address = data.validator_dst_address, validator_src_address = data.validator_src_address;
                return "Redelegate " + (0, utility_1.formatCoin)(amount) + " from " + validator_src_address + " to " + validator_dst_address;
            }
            case "/cosmos.staking.v1beta1.MsgUndelegate": {
                var amount = data.amount, validator_address = data.validator_address;
                return "Undelegate " + (0, utility_1.formatCoin)(amount) + " to " + validator_address;
            }
            case "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
                var validator_address = data.validator_address;
                return "Withdraw rewards from " + validator_address;
            }
            case "/cosmos.gov.v1beta1.MsgDeposit": {
                var amount = data.amount, proposal_id = data.proposal_id;
                return "Deposit " + (0, utility_1.formatCoins)(amount) + " to proposal " + proposal_id;
            }
            case "/cosmos.gov.v1beta1.MsgVote": {
                var proposal_id = data.proposal_id, option = data.option;
                var voteOption = xpla_js_1.Vote.Option[option];
                return "Vote " + voteOption.replace("VOTE_OPTION_", "") + " on proposal " + proposal_id;
            }
            case "/cosmos.gov.v1beta1.MsgSubmitProposal": {
                var content = data.content;
                var type = content["@type"];
                if (type === "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal") {
                    return "Submit a community pool spend proposal";
                }
                else if (type === "/cosmos.gov.v1beta1.TextProposal") {
                    return "Submit a text proposal";
                }
                else if (type === "/cosmos.params.v1beta1.ParameterChangeProposal") {
                    return "Submit a parameter change proposal";
                }
                else if (type === "/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal") {
                    return "Submit a cancel software upgrade proposal";
                }
                else if (type === "/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal") {
                    return "Submit a software upgrade proposal";
                }
                return (0, utility_1.defaultMessage)(msgType);
            }
            case "/ibc.applications.transfer.v1.MsgTransfer": {
                var receiver = data.receiver, token = data.token, source_channel = data.source_channel;
                var coin = token ? (0, utility_1.formatCoins)([token]) : "";
                return "Send " + coin + " to " + receiver + " via " + source_channel;
            }
            case "/cosmwasm.wasm.v1.MsgExecuteContract": {
                var contract = data.contract, execute_msg = data.msg, coins = data.funds;
                var key = Object.keys(execute_msg)[0];
                var payload = key ? " " + key : "";
                var suffix = coins.length ? " with " + (0, utility_1.formatCoins)(coins) : "";
                return "Execute" + payload + " on " + contract + suffix;
            }
            default:
                return (0, utility_1.defaultMessage)(msgType);
        }
    }
    catch (_a) {
        return "";
    }
};
exports.readMsg = readMsg;
//# sourceMappingURL=index.js.map