"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var compound_binary_file_js_1 = require("compound-binary-file-js");
var PropertyNameString_1 = require("../property/PropertyNameString");
var CRC_1 = require("../CRC");
var PropertyNameLID_1 = require("../property/PropertyNameLID");
var PropertyTag_1 = require("../property/PropertyTag");
var Long = __importStar(require("long"));
var Entry_1 = require("./Entry");
var GuidStream_1 = require("./GuidStream");
var EntryStream_1 = require("./EntryStream");
var StringStream_1 = require("./StringStream");
var PropertySet_1 = require("../property/PropertySet");
var utils_1 = require("../utils");
var UnsupportedPropertyType_1 = require("../property/property_type/UnsupportedPropertyType");
var NamedPropertyMappingStorage = /** @class */ (function () {
    function NamedPropertyMappingStorage(storage) {
        this.storage = storage;
    }
    NamedPropertyMappingStorage.prototype.getPropertyNameByPropertyTag = function (propertyTag) {
        var entry = this.entryStream().getEntry(propertyTag.propertyId - NamedPropertyMappingStorage.NAMED_PROPERTY_ID_BASE);
        if (entry.isNumeric()) {
            return utils_1.toHex(entry.getPropertyNameIdentifierOrOffsetOrChecksum());
        }
        else {
            return entry.getPropertyName(this.stringStream());
        }
    };
    NamedPropertyMappingStorage.prototype.getPropertyIdByPropertyName = function (propertyName) {
        if (propertyName instanceof PropertyNameString_1.PropertyNameString) {
            var crcOrPropertyIdentifier = CRC_1.CRC.crc32(compound_binary_file_js_1.toUTF16Bytes(propertyName.propertyName));
            var propertyTag = this.getPropertyIdForNamedProperty(crcOrPropertyIdentifier, propertyName.propertySet.id, true);
            if (propertyTag == null) {
                throw new Error("Unable to find property: " + propertyName.propertyName);
            }
            else {
                return propertyTag;
            }
        }
        else {
            var propertyTag = this.getPropertyIdForNamedProperty(propertyName.propertyLID, propertyName.propertySet.id);
            if (propertyTag == null) {
                throw new Error("Unable to find property: " + propertyName.propertyLID);
            }
            else {
                return propertyTag;
            }
        }
    };
    NamedPropertyMappingStorage.prototype.getPropertyTagByPropertyName = function (propertyName) {
        return new PropertyTag_1.PropertyTag(this.getPropertyIdByPropertyName(propertyName), propertyName.propertyType);
    };
    NamedPropertyMappingStorage.prototype.getNamedPropertyByPropertyTag = function (propertyTag) {
        var entry = this.entryStream().getEntry(propertyTag.propertyId - NamedPropertyMappingStorage.NAMED_PROPERTY_ID_BASE);
        if (entry.isNumeric()) {
            return new PropertyNameLID_1.PropertyNameLID(entry.getPropertySet(this.guidStream()), entry.getPropertyNameIdentifierOrOffsetOrChecksum(), propertyTag.propertyType);
        }
        else {
            return new PropertyNameString_1.PropertyNameString(entry.getPropertySet(this.guidStream()), entry.getPropertyName(this.stringStream()), propertyTag.propertyType);
        }
    };
    NamedPropertyMappingStorage.prototype.getPropertyIdForNamedProperty = function (crcOrPropertyIdentifier, propertySetGuid, isStringPropertyName) {
        if (isStringPropertyName === void 0) { isStringPropertyName = false; }
        var guidIndex = this.guidStream().getIndexFor(propertySetGuid);
        var streamId = (function () {
            if (isStringPropertyName) {
                var longResult = Long.fromNumber(crcOrPropertyIdentifier)
                    .xor(Long.UZERO.add(Long.fromInt(guidIndex)).shiftLeft(1).or(1)).mod(0x1F).add(0x1000);
                return longResult.toInt();
            }
            else {
                var longResult = Long.fromNumber(crcOrPropertyIdentifier)
                    .xor(Long.UZERO.add(Long.fromInt(guidIndex)).shiftLeft(1)).mod(0x1F).add(0x1000);
                return longResult.toInt();
            }
        })();
        var hexIdentifier = (streamId << 16) | 0x00000102;
        var streamName = "__substg1.0_" + utils_1.toHex(hexIdentifier, false, 8);
        var namesStream = this.storage.findChild(function (directoryEntry) { return directoryEntry.getDirectoryEntryName().toUpperCase() === streamName.toUpperCase(); });
        for (var i = 0; i < namesStream.getStreamSize() / 8; i++) {
            var entry = new Entry_1.Entry(namesStream.read(i * 8, (i + 1) * 8));
            if (entry.getPropertyNameIdentifierOrOffsetOrChecksum() === crcOrPropertyIdentifier) {
                return NamedPropertyMappingStorage.NAMED_PROPERTY_ID_BASE + entry.getPropertyIndex();
            }
        }
        return undefined;
    };
    NamedPropertyMappingStorage.prototype.guidStream = function () {
        return new GuidStream_1.GUIDStream(this.storage.findChild(function (directoryEntry) { return directoryEntry.getDirectoryEntryName() === GuidStream_1.GUIDStream.STREAM_NAME; }));
    };
    NamedPropertyMappingStorage.prototype.entryStream = function () {
        return new EntryStream_1.EntryStream(this.storage.findChild(function (directoryEntry) { return directoryEntry.getDirectoryEntryName() === EntryStream_1.EntryStream.STREAM_NAME; }));
    };
    NamedPropertyMappingStorage.prototype.propertyNames = function () {
        var _this = this;
        var result = [];
        this.entryStream().entries().forEach(function (entry) {
            var propertySet = PropertySet_1.PropertySet.forUUID(entry.getPropertySetGuid(_this.guidStream()));
            if (entry.isNumeric()) {
                result.push(new PropertyNameLID_1.PropertyNameLID(propertySet, entry.getPropertyNameIdentifierOrOffsetOrChecksum(), new UnsupportedPropertyType_1.UnsupportedPropertyType(-1, "Unknown")));
            }
            else {
                var propertyName = _this.stringStream().getPropertyNameAt(entry.getPropertyNameIdentifierOrOffsetOrChecksum());
                result.push(new PropertyNameString_1.PropertyNameString(propertySet, propertyName, new UnsupportedPropertyType_1.UnsupportedPropertyType(-1, "Unknown")));
            }
        });
        return result;
    };
    NamedPropertyMappingStorage.prototype.stringStream = function () {
        return new StringStream_1.StringStream(this.storage.findChild(function (directoryEntry) { return directoryEntry.getDirectoryEntryName() === StringStream_1.StringStream.STREAM_NAME; }));
    };
    NamedPropertyMappingStorage.STORAGE_NAME = "__nameid_version1.0";
    NamedPropertyMappingStorage.NAMED_PROPERTY_ID_BASE = 0x8000; // 32768
    return NamedPropertyMappingStorage;
}());
exports.NamedPropertyMappingStorage = NamedPropertyMappingStorage;
//# sourceMappingURL=NamedPropertyMappingStorage.js.map