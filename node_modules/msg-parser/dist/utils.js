"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var pure_uuid_1 = __importDefault(require("pure-uuid"));
var compound_binary_file_js_1 = require("compound-binary-file-js");
var long_1 = __importDefault(require("long"));
var DIFF_BETWEEN_EPOCHS_1970_1601 = 11644473599996;
function uuidFromByteLE(sourceBytes) {
    var mostSignificant = compound_binary_file_js_1.initializedWidth(8, 0);
    mostSignificant[0] = sourceBytes[3];
    mostSignificant[1] = sourceBytes[2];
    mostSignificant[2] = sourceBytes[1];
    mostSignificant[3] = sourceBytes[0];
    mostSignificant[4] = sourceBytes[5];
    mostSignificant[5] = sourceBytes[4];
    mostSignificant[6] = sourceBytes[7];
    mostSignificant[7] = sourceBytes[6];
    var leastSignificant = [];
    leastSignificant.push.apply(leastSignificant, sourceBytes.slice(8));
    mostSignificant.push.apply(mostSignificant, leastSignificant);
    return new pure_uuid_1.default().import(mostSignificant);
}
exports.uuidFromByteLE = uuidFromByteLE;
function uuidToBytesLE(uuid) {
    var _a, _b, _c, _d;
    var bytes = uuid.export();
    var mostSignificantBits = bytes.slice(0, 8);
    var leastSignificantBits = bytes.slice(8);
    _a = [mostSignificantBits[3], mostSignificantBits[0]], mostSignificantBits[0] = _a[0], mostSignificantBits[3] = _a[1];
    _b = [mostSignificantBits[2], mostSignificantBits[1]], mostSignificantBits[1] = _b[0], mostSignificantBits[2] = _b[1];
    _c = [mostSignificantBits[5], mostSignificantBits[4]], mostSignificantBits[4] = _c[0], mostSignificantBits[5] = _c[1];
    _d = [mostSignificantBits[7], mostSignificantBits[6]], mostSignificantBits[6] = _d[0], mostSignificantBits[7] = _d[1];
    mostSignificantBits.push.apply(mostSignificantBits, leastSignificantBits);
    return mostSignificantBits;
}
exports.uuidToBytesLE = uuidToBytesLE;
function toTime(bytes) {
    return new Date(long_1.default.fromBytesLE(bytes).toNumber() / 10000 - DIFF_BETWEEN_EPOCHS_1970_1601);
}
exports.toTime = toTime;
function toHex(val, toUpper, maxDigits) {
    if (toUpper === void 0) { toUpper = false; }
    if (maxDigits === void 0) { maxDigits = 4; }
    var result = long_1.default.fromValue(val).toString(16);
    if (result.length < maxDigits) {
        result = "0".repeat(maxDigits - result.length) + result;
    }
    else if (result.length > maxDigits) {
        throw new Error("Expect not more then " + maxDigits + "-digit hex number: " + result);
    }
    return toUpper ? result.toUpperCase() : result;
}
exports.toHex = toHex;
function fromHex(str) {
    return long_1.default.fromString(str.toLowerCase(), false, 16).toInt();
}
exports.fromHex = fromHex;
//# sourceMappingURL=utils.js.map