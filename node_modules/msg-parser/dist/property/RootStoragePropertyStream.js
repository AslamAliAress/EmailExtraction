"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var PropertiesStream_1 = require("./PropertiesStream");
var Long = __importStar(require("long"));
var RootStoragePropertyStream = /** @class */ (function (_super) {
    __extends(RootStoragePropertyStream, _super);
    function RootStoragePropertyStream(stream) {
        var _this = _super.call(this, stream, RootStoragePropertyStream.HEADER_LENGTH) || this;
        var data = stream.read(0, 32);
        _this.header = {
            nextRecipientId: function () { return Long.fromBytesLE(data.slice(8, 12)).toNumber(); },
            nextAttachmentId: function () { return Long.fromBytesLE(data.slice(12, 16)).toNumber(); },
            recipientCount: function () { return Long.fromBytesLE(data.slice(16, 20)).toNumber(); },
            attachmentCount: function () { return Long.fromBytesLE(data.slice(20, 24)).toNumber(); }
        };
        return _this;
    }
    RootStoragePropertyStream.HEADER_LENGTH = 32;
    return RootStoragePropertyStream;
}(PropertiesStream_1.PropertiesStream));
exports.RootStoragePropertyStream = RootStoragePropertyStream;
//# sourceMappingURL=RootStoragePropertyStream.js.map